'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.ButtonGroup = ButtonGroup;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _ = require('./');

require('./styles.css');

var _styles = {
  'buttonClassName': 'entur-form-control--button',
  'buttonGroupClassName': 'entur-button-group',
  'inputGroupClassName': 'entur-input-group',
  'rootClassName': 'entur-form-control',
  'entur-form-control': 'entur-form-control',
  'entur-form-control-prepend': 'entur-form-control-prepend',
  'entur-form-control-append': 'entur-form-control-append',
  'entur-form-control--disabled': 'entur-form-control--disabled',
  'entur-form-control-prepend--disabled': 'entur-form-control-prepend--disabled',
  'entur-form-control-append--disabled': 'entur-form-control-append--disabled',
  'entur-form-control--has-focus': 'entur-form-control--has-focus',
  'entur-form-control-prepend--has-focus': 'entur-form-control-prepend--has-focus',
  'entur-form-control-append--has-focus': 'entur-form-control-append--has-focus',
  'entur-form-control--size-md': 'entur-form-control--size-md',
  'entur-form-control-prepend--size-md': 'entur-form-control-prepend--size-md',
  'entur-form-control-append--size-md': 'entur-form-control-append--size-md',
  'entur-form-control--size-lg': 'entur-form-control--size-lg',
  'entur-form-control-prepend--size-lg': 'entur-form-control-prepend--size-lg',
  'entur-form-control-append--size-lg': 'entur-form-control-append--size-lg',
  'entur-form-control--is-prepended': 'entur-form-control--is-prepended',
  'entur-form-control-prepend--is-prepended': 'entur-form-control-prepend--is-prepended',
  'entur-form-control-append--is-prepended': 'entur-form-control-append--is-prepended',
  'entur-form-control--is-appended': 'entur-form-control--is-appended',
  'entur-form-control-prepend--is-appended': 'entur-form-control-prepend--is-appended',
  'entur-form-control-append--is-appended': 'entur-form-control-append--is-appended',
  'entur-form-control--valid-success': 'entur-form-control--valid-success',
  'entur-form-control-prepend--valid-success': 'entur-form-control-prepend--valid-success',
  'entur-form-control-append--valid-success': 'entur-form-control-append--valid-success',
  'entur-form-control--valid-error': 'entur-form-control--valid-error',
  'entur-form-control-prepend--valid-error': 'entur-form-control-prepend--valid-error',
  'entur-form-control-append--valid-error': 'entur-form-control-append--valid-error',
  'entur-form-control--width-fluid': 'entur-form-control--width-fluid',
  'entur-form-control-prepend--width-fluid': 'entur-form-control-prepend--width-fluid',
  'entur-form-control-append--width-fluid': 'entur-form-control-append--width-fluid',
  'entur-form-control--variant-midnight': 'entur-form-control--variant-midnight',
  'entur-form-control-prepend--variant-midnight': 'entur-form-control-prepend--variant-midnight',
  'entur-form-control-append--variant-midnight': 'entur-form-control-append--variant-midnight',
  'entur-form-control--button': 'entur-form-control--button',
  'entur-form-control--active': 'entur-form-control--active',
  'entur-button-group': 'entur-button-group',
  'entur-button-group__btn': 'entur-button-group__btn',
  'entur-button-group--width-fluid': 'entur-button-group--width-fluid',
  'entur-input-group': 'entur-input-group',
  'entur-input-group--width-fluid': 'entur-input-group--width-fluid'
};

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var CHILDREN_WHITELIST = [_.RadioFormButton, _.CheckboxFormButton, _.LinkFormButton];

function ButtonGroup(_ref) {
  var _cx;

  var id = _ref.id,
      className = _ref.className,
      name = _ref.name,
      children = _ref.children,
      variant = _ref.variant,
      size = _ref.size,
      width = _ref.width,
      value = _ref.value,
      rest = _objectWithoutProperties(_ref, ['id', 'className', 'name', 'children', 'variant', 'size', 'width', 'value']);

  var combinedClassNames = (0, _classnames2.default)(_styles.buttonGroupClassName, className, (_cx = {}, _defineProperty(_cx, _styles.buttonGroupClassName + '--width-' + width, width), _defineProperty(_cx, _styles.buttonGroupClassName + '--' + variant, variant), _cx));

  var childrenArray = _react2.default.Children.toArray(children);

  var buttons = childrenArray.map(function (child, index) {
    if (!CHILDREN_WHITELIST.includes(child.type)) {
      var whitelistNames = CHILDREN_WHITELIST.map(function (_ref2) {
        var name = _ref2.name;
        return name;
      });
      throw new Error('ButtonGroup only allow children of type ' + whitelistNames.join(', ') + ', ' + child.type + ' is not allowed');
    }

    var active = value !== undefined ? value === child.props.value : child.props.active;

    return _react2.default.cloneElement(child, _extends({
      id: id ? id + '-' + index : undefined,
      className: (0, _classnames2.default)(_styles.buttonGroupClassName + '__btn', child.props.className),
      name: name,
      size: size,
      active: active,
      variant: variant
    }, rest));
  });

  return _react2.default.createElement(
    'div',
    { className: combinedClassNames },
    buttons
  );
}

ButtonGroup.propTypes = {
  className: _propTypes2.default.string,
  children: _propTypes2.default.node.isRequired,
  id: _propTypes2.default.string,
  name: _propTypes2.default.string,
  variant: _propTypes2.default.oneOf(['midnight', 'primary']),
  size: _propTypes2.default.oneOf(['md', 'lg']).isRequired,
  value: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
  width: _propTypes2.default.oneOf(['fluid'])
};

ButtonGroup.defaultProps = {
  onChange: function onChange() {},
  variant: 'primary',
  size: 'md'
};
ButtonGroup.__docgenInfo = {
  'description': '',
  'methods': [],
  'displayName': 'ButtonGroup',
  'props': {
    'onChange': {
      'defaultValue': {
        'value': '() => {}',
        'computed': false
      },
      'required': false
    },
    'variant': {
      'defaultValue': {
        'value': '\'primary\'',
        'computed': false
      },
      'type': {
        'name': 'enum',
        'value': [{
          'value': '\'midnight\'',
          'computed': false
        }, {
          'value': '\'primary\'',
          'computed': false
        }]
      },
      'required': false,
      'description': ''
    },
    'size': {
      'defaultValue': {
        'value': '\'md\'',
        'computed': false
      },
      'type': {
        'name': 'enum',
        'value': [{
          'value': '\'md\'',
          'computed': false
        }, {
          'value': '\'lg\'',
          'computed': false
        }]
      },
      'required': false,
      'description': ''
    },
    'className': {
      'type': {
        'name': 'string'
      },
      'required': false,
      'description': ''
    },
    'children': {
      'type': {
        'name': 'node'
      },
      'required': true,
      'description': ''
    },
    'id': {
      'type': {
        'name': 'string'
      },
      'required': false,
      'description': ''
    },
    'name': {
      'type': {
        'name': 'string'
      },
      'required': false,
      'description': ''
    },
    'value': {
      'type': {
        'name': 'union',
        'value': [{
          'name': 'string'
        }, {
          'name': 'number'
        }]
      },
      'required': false,
      'description': ''
    },
    'width': {
      'type': {
        'name': 'enum',
        'value': [{
          'value': '\'fluid\'',
          'computed': false
        }]
      },
      'required': false,
      'description': ''
    }
  }
};