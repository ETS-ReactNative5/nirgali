'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.getClassNames = getClassNames;
exports.FormControlWrapper = FormControlWrapper;
exports.TextField = TextField;
exports.TextArea = TextArea;
exports.CheckboxFormButton = CheckboxFormButton;
exports.RadioFormButton = RadioFormButton;
exports.LinkFormButton = LinkFormButton;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

require('./styles.css');

var _styles = {
  'buttonClassName': 'entur-form-control--button',
  'buttonGroupClassName': 'entur-button-group',
  'inputGroupClassName': 'entur-input-group',
  'rootClassName': 'entur-form-control',
  'entur-form-control': 'entur-form-control',
  'entur-form-control-prepend': 'entur-form-control-prepend',
  'entur-form-control-append': 'entur-form-control-append',
  'entur-form-control--disabled': 'entur-form-control--disabled',
  'entur-form-control-prepend--disabled': 'entur-form-control-prepend--disabled',
  'entur-form-control-append--disabled': 'entur-form-control-append--disabled',
  'entur-form-control--has-focus': 'entur-form-control--has-focus',
  'entur-form-control-prepend--has-focus': 'entur-form-control-prepend--has-focus',
  'entur-form-control-append--has-focus': 'entur-form-control-append--has-focus',
  'entur-form-control--size-md': 'entur-form-control--size-md',
  'entur-form-control-prepend--size-md': 'entur-form-control-prepend--size-md',
  'entur-form-control-append--size-md': 'entur-form-control-append--size-md',
  'entur-form-control--size-lg': 'entur-form-control--size-lg',
  'entur-form-control-prepend--size-lg': 'entur-form-control-prepend--size-lg',
  'entur-form-control-append--size-lg': 'entur-form-control-append--size-lg',
  'entur-form-control--is-prepended': 'entur-form-control--is-prepended',
  'entur-form-control-prepend--is-prepended': 'entur-form-control-prepend--is-prepended',
  'entur-form-control-append--is-prepended': 'entur-form-control-append--is-prepended',
  'entur-form-control--is-appended': 'entur-form-control--is-appended',
  'entur-form-control-prepend--is-appended': 'entur-form-control-prepend--is-appended',
  'entur-form-control-append--is-appended': 'entur-form-control-append--is-appended',
  'entur-form-control--valid-success': 'entur-form-control--valid-success',
  'entur-form-control-prepend--valid-success': 'entur-form-control-prepend--valid-success',
  'entur-form-control-append--valid-success': 'entur-form-control-append--valid-success',
  'entur-form-control--valid-error': 'entur-form-control--valid-error',
  'entur-form-control-prepend--valid-error': 'entur-form-control-prepend--valid-error',
  'entur-form-control-append--valid-error': 'entur-form-control-append--valid-error',
  'entur-form-control--width-fluid': 'entur-form-control--width-fluid',
  'entur-form-control-prepend--width-fluid': 'entur-form-control-prepend--width-fluid',
  'entur-form-control-append--width-fluid': 'entur-form-control-append--width-fluid',
  'entur-form-control--variant-midnight': 'entur-form-control--variant-midnight',
  'entur-form-control-prepend--variant-midnight': 'entur-form-control-prepend--variant-midnight',
  'entur-form-control-append--variant-midnight': 'entur-form-control-append--variant-midnight',
  'entur-form-control--button': 'entur-form-control--button',
  'entur-form-control--active': 'entur-form-control--active',
  'entur-button-group': 'entur-button-group',
  'entur-button-group__btn': 'entur-button-group__btn',
  'entur-button-group--width-fluid': 'entur-button-group--width-fluid',
  'entur-input-group': 'entur-input-group',
  'entur-input-group--width-fluid': 'entur-input-group--width-fluid'
};

var _inputButton = require('../button/inputButton');

var _inputButton2 = _interopRequireDefault(_inputButton);

var _helper = require('../button/helper');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var commonPropTypes = {
  className: _propTypes2.default.string,
  onChange: _propTypes2.default.func,
  size: _propTypes2.default.oneOf(['md', 'lg']).isRequired,
  value: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]).isRequired,
  type: _propTypes2.default.oneOf(['number', 'text', 'checkbox', 'radio', 'search', 'password']),
  valid: _propTypes2.default.oneOf(['success', 'error', 'warning', 'info', 'none']),
  variant: _propTypes2.default.oneOf(['midnight', 'primary']),
  width: _propTypes2.default.oneOf(['fluid']),
  disabled: _propTypes2.default.bool,
  refCallback: _propTypes2.default.func
};

var defaultProps = {
  size: 'md',
  value: '',
  onChange: function onChange() {}
};

function getClassNames(baseClassName, props) {
  var _ref;

  var className = props.className,
      valid = props.valid,
      prepend = props.prepend,
      append = props.append,
      rest = _objectWithoutProperties(props, ['className', 'valid', 'prepend', 'append']);

  var sharedClassNames = (0, _helper.getClassNames)(baseClassName, rest);

  for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
    args[_key - 2] = arguments[_key];
  }

  return _classnames2.default.apply(undefined, [sharedClassNames, (_ref = {}, _defineProperty(_ref, baseClassName + '--valid-' + valid, valid), _defineProperty(_ref, baseClassName + '--is-prepended', prepend), _defineProperty(_ref, baseClassName + '--is-appended', append), _ref)].concat(args, [className]));
}

function FormControlWrapper(_ref2) {
  var className = _ref2.className,
      prepend = _ref2.prepend,
      append = _ref2.append,
      variant = _ref2.variant,
      valid = _ref2.valid,
      size = _ref2.size,
      width = _ref2.width,
      disabled = _ref2.disabled,
      children = _ref2.children;

  var classNames = (0, _helper.getClassNames)(_styles.inputGroupClassName, { className: className, width: width });

  var prependClassNames = getClassNames(_styles.rootClassName, {
    className: _styles.rootClassName + '-prepend',
    variant: variant,
    size: size,
    valid: valid,
    disabled: disabled
  });
  var appendClassNames = getClassNames(_styles.rootClassName, {
    className: _styles.rootClassName + '-append',
    variant: variant,
    size: size,
    valid: valid,
    disabled: disabled
  });

  return _react2.default.createElement(
    'div',
    { className: classNames },
    prepend && _react2.default.createElement(
      'div',
      { className: prependClassNames },
      prepend
    ),
    children,
    append && _react2.default.createElement(
      'div',
      { className: appendClassNames },
      append
    )
  );
}

FormControlWrapper.propTypes = {
  className: _propTypes2.default.string,
  prepend: _propTypes2.default.node,
  append: _propTypes2.default.node,
  valid: commonPropTypes.valid,
  variant: commonPropTypes.variant,
  disabled: _propTypes2.default.bool,
  children: _propTypes2.default.node,
  width: _propTypes2.default.oneOf(['fluid']),
  size: _propTypes2.default.oneOf(['md', 'lg'])
};

function TextField(_ref3) {
  var className = _ref3.className,
      variant = _ref3.variant,
      size = _ref3.size,
      width = _ref3.width,
      valid = _ref3.valid,
      disabled = _ref3.disabled,
      refCallback = _ref3.refCallback,
      prepend = _ref3.prepend,
      append = _ref3.append,
      style = _ref3.style,
      rest = _objectWithoutProperties(_ref3, ['className', 'variant', 'size', 'width', 'valid', 'disabled', 'refCallback', 'prepend', 'append', 'style']);

  var classNames = getClassNames(_styles.rootClassName, {
    variant: variant,
    size: size,
    width: width,
    valid: valid,
    prepend: prepend,
    append: append
  });

  if (!prepend && !append) {
    return _react2.default.createElement('input', _extends({}, rest, {
      ref: refCallback,
      className: (0, _classnames2.default)(classNames, className),
      style: style,
      disabled: disabled
    }));
  }

  return _react2.default.createElement(
    FormControlWrapper,
    {
      prepend: prepend,
      append: append,
      valid: valid,
      variant: variant,
      size: size,
      width: width,
      className: className,
      style: style,
      disabled: disabled
    },
    _react2.default.createElement('input', _extends({}, rest, {
      ref: refCallback,
      className: classNames,
      disabled: disabled
    }))
  );
}

TextField.propTypes = _extends({}, commonPropTypes, {
  prepend: _propTypes2.default.node,
  append: _propTypes2.default.node,
  style: _propTypes2.default.object
});
TextField.defaultProps = defaultProps;

function TextArea(_ref4) {
  var className = _ref4.className,
      variant = _ref4.variant,
      size = _ref4.size,
      width = _ref4.width,
      valid = _ref4.valid,
      disabled = _ref4.disabled,
      refCallback = _ref4.refCallback,
      prepend = _ref4.prepend,
      append = _ref4.append,
      style = _ref4.style,
      rest = _objectWithoutProperties(_ref4, ['className', 'variant', 'size', 'width', 'valid', 'disabled', 'refCallback', 'prepend', 'append', 'style']);

  var classNames = getClassNames(_styles.rootClassName, {
    variant: variant,
    size: size,
    width: width,
    valid: valid,
    prepend: prepend,
    append: append
  });

  if (!prepend && !append) {
    return _react2.default.createElement('textarea', _extends({}, rest, {
      ref: refCallback,
      className: (0, _classnames2.default)(classNames, className),
      style: style,
      disabled: disabled
    }));
  }

  return _react2.default.createElement(
    FormControlWrapper,
    {
      prepend: prepend,
      append: append,
      valid: valid,
      variant: variant,
      size: size,
      width: width,
      className: className,
      style: style,
      disabled: disabled
    },
    _react2.default.createElement('textarea', _extends({}, rest, {
      ref: refCallback,
      className: classNames,
      disabled: disabled
    }))
  );
}

TextArea.propTypes = _extends({}, commonPropTypes, {
  prepend: _propTypes2.default.node,
  append: _propTypes2.default.node,
  style: _propTypes2.default.object
});
TextArea.defaultProps = defaultProps;

function CheckboxFormButton(_ref5) {
  var className = _ref5.className,
      children = _ref5.children,
      variant = _ref5.variant,
      size = _ref5.size,
      width = _ref5.width,
      active = _ref5.active,
      disabled = _ref5.disabled,
      rest = _objectWithoutProperties(_ref5, ['className', 'children', 'variant', 'size', 'width', 'active', 'disabled']);

  var classNames = getClassNames(_styles.rootClassName, {
    className: className,
    variant: variant,
    size: size,
    width: width,
    active: active,
    disabled: disabled
  }, _styles.buttonClassName);

  return _react2.default.createElement(
    _inputButton2.default,
    _extends({}, rest, {
      className: classNames,
      focusClassName: (0, _helper.getFocusClassName)(_styles.rootClassName),
      type: 'checkbox',
      checked: active,
      disabled: disabled
    }),
    children
  );
}

CheckboxFormButton.propTypes = _extends({}, commonPropTypes, {
  active: _propTypes2.default.bool,
  children: _propTypes2.default.node
});
CheckboxFormButton.defaultProps = defaultProps;

function RadioFormButton(_ref6) {
  var className = _ref6.className,
      children = _ref6.children,
      variant = _ref6.variant,
      size = _ref6.size,
      width = _ref6.width,
      active = _ref6.active,
      disabled = _ref6.disabled,
      rest = _objectWithoutProperties(_ref6, ['className', 'children', 'variant', 'size', 'width', 'active', 'disabled']);

  var classNames = getClassNames(_styles.rootClassName, {
    className: className,
    variant: variant,
    size: size,
    width: width,
    active: active,
    disabled: disabled
  }, _styles.buttonClassName);

  return _react2.default.createElement(
    _inputButton2.default,
    _extends({}, rest, {
      className: classNames,
      focusClassName: (0, _helper.getFocusClassName)(_styles.rootClassName),
      type: 'radio',
      checked: active,
      disabled: disabled
    }),
    children
  );
}

RadioFormButton.propTypes = _extends({}, commonPropTypes, {
  active: _propTypes2.default.bool,
  children: _propTypes2.default.node
});
RadioFormButton.defaultProps = defaultProps;

function LinkFormButton(_ref7) {
  var className = _ref7.className,
      children = _ref7.children,
      variant = _ref7.variant,
      size = _ref7.size,
      width = _ref7.width,
      active = _ref7.active,
      disabled = _ref7.disabled,
      href = _ref7.href,
      rest = _objectWithoutProperties(_ref7, ['className', 'children', 'variant', 'size', 'width', 'active', 'disabled', 'href']);

  var classNames = getClassNames(_styles.rootClassName, {
    className: className,
    variant: variant,
    size: size,
    width: width,
    active: active,
    disabled: disabled
  }, _styles.buttonClassName);

  return _react2.default.createElement(
    'a',
    _extends({}, rest, {
      href: disabled || active ? '' : href,
      className: classNames,
      disabled: disabled
    }),
    children
  );
}

LinkFormButton.propTypes = _extends({}, commonPropTypes, {
  active: _propTypes2.default.bool,
  children: _propTypes2.default.node,
  href: _propTypes2.default.string
});
LinkFormButton.defaultProps = defaultProps;
FormControlWrapper.__docgenInfo = {
  'description': '',
  'methods': [],
  'displayName': 'FormControlWrapper',
  'props': {
    'className': {
      'type': {
        'name': 'string'
      },
      'required': false,
      'description': ''
    },
    'prepend': {
      'type': {
        'name': 'node'
      },
      'required': false,
      'description': ''
    },
    'append': {
      'type': {
        'name': 'node'
      },
      'required': false,
      'description': ''
    },
    'valid': {
      'type': {
        'name': 'custom',
        'raw': 'commonPropTypes.valid'
      },
      'required': false,
      'description': ''
    },
    'variant': {
      'type': {
        'name': 'custom',
        'raw': 'commonPropTypes.variant'
      },
      'required': false,
      'description': ''
    },
    'disabled': {
      'type': {
        'name': 'bool'
      },
      'required': false,
      'description': ''
    },
    'children': {
      'type': {
        'name': 'node'
      },
      'required': false,
      'description': ''
    },
    'width': {
      'type': {
        'name': 'enum',
        'value': [{
          'value': '\'fluid\'',
          'computed': false
        }]
      },
      'required': false,
      'description': ''
    },
    'size': {
      'type': {
        'name': 'enum',
        'value': [{
          'value': '\'md\'',
          'computed': false
        }, {
          'value': '\'lg\'',
          'computed': false
        }]
      },
      'required': false,
      'description': ''
    }
  }
};
TextField.__docgenInfo = {
  'description': '',
  'methods': [],
  'displayName': 'TextField',
  'props': {
    'size': {
      'defaultValue': {
        'value': '\'md\'',
        'computed': false
      },
      'type': {
        'name': 'enum',
        'value': [{
          'value': '\'md\'',
          'computed': false
        }, {
          'value': '\'lg\'',
          'computed': false
        }]
      },
      'required': false,
      'description': ''
    },
    'value': {
      'defaultValue': {
        'value': '\'\'',
        'computed': false
      },
      'type': {
        'name': 'union',
        'value': [{
          'name': 'string'
        }, {
          'name': 'number'
        }]
      },
      'required': false,
      'description': ''
    },
    'onChange': {
      'defaultValue': {
        'value': '() => {}',
        'computed': false
      },
      'type': {
        'name': 'func'
      },
      'required': false,
      'description': ''
    },
    'className': {
      'type': {
        'name': 'string'
      },
      'required': false,
      'description': ''
    },
    'type': {
      'type': {
        'name': 'enum',
        'value': [{
          'value': '\'number\'',
          'computed': false
        }, {
          'value': '\'text\'',
          'computed': false
        }, {
          'value': '\'checkbox\'',
          'computed': false
        }, {
          'value': '\'radio\'',
          'computed': false
        }, {
          'value': '\'search\'',
          'computed': false
        }, {
          'value': '\'password\'',
          'computed': false
        }]
      },
      'required': false,
      'description': ''
    },
    'valid': {
      'type': {
        'name': 'enum',
        'value': [{
          'value': '\'success\'',
          'computed': false
        }, {
          'value': '\'error\'',
          'computed': false
        }, {
          'value': '\'warning\'',
          'computed': false
        }, {
          'value': '\'info\'',
          'computed': false
        }, {
          'value': '\'none\'',
          'computed': false
        }]
      },
      'required': false,
      'description': ''
    },
    'variant': {
      'type': {
        'name': 'enum',
        'value': [{
          'value': '\'midnight\'',
          'computed': false
        }, {
          'value': '\'primary\'',
          'computed': false
        }]
      },
      'required': false,
      'description': ''
    },
    'width': {
      'type': {
        'name': 'enum',
        'value': [{
          'value': '\'fluid\'',
          'computed': false
        }]
      },
      'required': false,
      'description': ''
    },
    'disabled': {
      'type': {
        'name': 'bool'
      },
      'required': false,
      'description': ''
    },
    'refCallback': {
      'type': {
        'name': 'func'
      },
      'required': false,
      'description': ''
    },
    'prepend': {
      'type': {
        'name': 'node'
      },
      'required': false,
      'description': ''
    },
    'append': {
      'type': {
        'name': 'node'
      },
      'required': false,
      'description': ''
    },
    'style': {
      'type': {
        'name': 'object'
      },
      'required': false,
      'description': ''
    }
  }
};
TextArea.__docgenInfo = {
  'description': '',
  'methods': [],
  'displayName': 'TextArea',
  'props': {
    'size': {
      'defaultValue': {
        'value': '\'md\'',
        'computed': false
      },
      'type': {
        'name': 'enum',
        'value': [{
          'value': '\'md\'',
          'computed': false
        }, {
          'value': '\'lg\'',
          'computed': false
        }]
      },
      'required': false,
      'description': ''
    },
    'value': {
      'defaultValue': {
        'value': '\'\'',
        'computed': false
      },
      'type': {
        'name': 'union',
        'value': [{
          'name': 'string'
        }, {
          'name': 'number'
        }]
      },
      'required': false,
      'description': ''
    },
    'onChange': {
      'defaultValue': {
        'value': '() => {}',
        'computed': false
      },
      'type': {
        'name': 'func'
      },
      'required': false,
      'description': ''
    },
    'className': {
      'type': {
        'name': 'string'
      },
      'required': false,
      'description': ''
    },
    'type': {
      'type': {
        'name': 'enum',
        'value': [{
          'value': '\'number\'',
          'computed': false
        }, {
          'value': '\'text\'',
          'computed': false
        }, {
          'value': '\'checkbox\'',
          'computed': false
        }, {
          'value': '\'radio\'',
          'computed': false
        }, {
          'value': '\'search\'',
          'computed': false
        }, {
          'value': '\'password\'',
          'computed': false
        }]
      },
      'required': false,
      'description': ''
    },
    'valid': {
      'type': {
        'name': 'enum',
        'value': [{
          'value': '\'success\'',
          'computed': false
        }, {
          'value': '\'error\'',
          'computed': false
        }, {
          'value': '\'warning\'',
          'computed': false
        }, {
          'value': '\'info\'',
          'computed': false
        }, {
          'value': '\'none\'',
          'computed': false
        }]
      },
      'required': false,
      'description': ''
    },
    'variant': {
      'type': {
        'name': 'enum',
        'value': [{
          'value': '\'midnight\'',
          'computed': false
        }, {
          'value': '\'primary\'',
          'computed': false
        }]
      },
      'required': false,
      'description': ''
    },
    'width': {
      'type': {
        'name': 'enum',
        'value': [{
          'value': '\'fluid\'',
          'computed': false
        }]
      },
      'required': false,
      'description': ''
    },
    'disabled': {
      'type': {
        'name': 'bool'
      },
      'required': false,
      'description': ''
    },
    'refCallback': {
      'type': {
        'name': 'func'
      },
      'required': false,
      'description': ''
    },
    'prepend': {
      'type': {
        'name': 'node'
      },
      'required': false,
      'description': ''
    },
    'append': {
      'type': {
        'name': 'node'
      },
      'required': false,
      'description': ''
    },
    'style': {
      'type': {
        'name': 'object'
      },
      'required': false,
      'description': ''
    }
  }
};
CheckboxFormButton.__docgenInfo = {
  'description': '',
  'methods': [],
  'displayName': 'CheckboxFormButton',
  'props': {
    'size': {
      'defaultValue': {
        'value': '\'md\'',
        'computed': false
      },
      'type': {
        'name': 'enum',
        'value': [{
          'value': '\'md\'',
          'computed': false
        }, {
          'value': '\'lg\'',
          'computed': false
        }]
      },
      'required': false,
      'description': ''
    },
    'value': {
      'defaultValue': {
        'value': '\'\'',
        'computed': false
      },
      'type': {
        'name': 'union',
        'value': [{
          'name': 'string'
        }, {
          'name': 'number'
        }]
      },
      'required': false,
      'description': ''
    },
    'onChange': {
      'defaultValue': {
        'value': '() => {}',
        'computed': false
      },
      'type': {
        'name': 'func'
      },
      'required': false,
      'description': ''
    },
    'className': {
      'type': {
        'name': 'string'
      },
      'required': false,
      'description': ''
    },
    'type': {
      'type': {
        'name': 'enum',
        'value': [{
          'value': '\'number\'',
          'computed': false
        }, {
          'value': '\'text\'',
          'computed': false
        }, {
          'value': '\'checkbox\'',
          'computed': false
        }, {
          'value': '\'radio\'',
          'computed': false
        }, {
          'value': '\'search\'',
          'computed': false
        }, {
          'value': '\'password\'',
          'computed': false
        }]
      },
      'required': false,
      'description': ''
    },
    'valid': {
      'type': {
        'name': 'enum',
        'value': [{
          'value': '\'success\'',
          'computed': false
        }, {
          'value': '\'error\'',
          'computed': false
        }, {
          'value': '\'warning\'',
          'computed': false
        }, {
          'value': '\'info\'',
          'computed': false
        }, {
          'value': '\'none\'',
          'computed': false
        }]
      },
      'required': false,
      'description': ''
    },
    'variant': {
      'type': {
        'name': 'enum',
        'value': [{
          'value': '\'midnight\'',
          'computed': false
        }, {
          'value': '\'primary\'',
          'computed': false
        }]
      },
      'required': false,
      'description': ''
    },
    'width': {
      'type': {
        'name': 'enum',
        'value': [{
          'value': '\'fluid\'',
          'computed': false
        }]
      },
      'required': false,
      'description': ''
    },
    'disabled': {
      'type': {
        'name': 'bool'
      },
      'required': false,
      'description': ''
    },
    'refCallback': {
      'type': {
        'name': 'func'
      },
      'required': false,
      'description': ''
    },
    'active': {
      'type': {
        'name': 'bool'
      },
      'required': false,
      'description': ''
    },
    'children': {
      'type': {
        'name': 'node'
      },
      'required': false,
      'description': ''
    }
  }
};
RadioFormButton.__docgenInfo = {
  'description': '',
  'methods': [],
  'displayName': 'RadioFormButton',
  'props': {
    'size': {
      'defaultValue': {
        'value': '\'md\'',
        'computed': false
      },
      'type': {
        'name': 'enum',
        'value': [{
          'value': '\'md\'',
          'computed': false
        }, {
          'value': '\'lg\'',
          'computed': false
        }]
      },
      'required': false,
      'description': ''
    },
    'value': {
      'defaultValue': {
        'value': '\'\'',
        'computed': false
      },
      'type': {
        'name': 'union',
        'value': [{
          'name': 'string'
        }, {
          'name': 'number'
        }]
      },
      'required': false,
      'description': ''
    },
    'onChange': {
      'defaultValue': {
        'value': '() => {}',
        'computed': false
      },
      'type': {
        'name': 'func'
      },
      'required': false,
      'description': ''
    },
    'className': {
      'type': {
        'name': 'string'
      },
      'required': false,
      'description': ''
    },
    'type': {
      'type': {
        'name': 'enum',
        'value': [{
          'value': '\'number\'',
          'computed': false
        }, {
          'value': '\'text\'',
          'computed': false
        }, {
          'value': '\'checkbox\'',
          'computed': false
        }, {
          'value': '\'radio\'',
          'computed': false
        }, {
          'value': '\'search\'',
          'computed': false
        }, {
          'value': '\'password\'',
          'computed': false
        }]
      },
      'required': false,
      'description': ''
    },
    'valid': {
      'type': {
        'name': 'enum',
        'value': [{
          'value': '\'success\'',
          'computed': false
        }, {
          'value': '\'error\'',
          'computed': false
        }, {
          'value': '\'warning\'',
          'computed': false
        }, {
          'value': '\'info\'',
          'computed': false
        }, {
          'value': '\'none\'',
          'computed': false
        }]
      },
      'required': false,
      'description': ''
    },
    'variant': {
      'type': {
        'name': 'enum',
        'value': [{
          'value': '\'midnight\'',
          'computed': false
        }, {
          'value': '\'primary\'',
          'computed': false
        }]
      },
      'required': false,
      'description': ''
    },
    'width': {
      'type': {
        'name': 'enum',
        'value': [{
          'value': '\'fluid\'',
          'computed': false
        }]
      },
      'required': false,
      'description': ''
    },
    'disabled': {
      'type': {
        'name': 'bool'
      },
      'required': false,
      'description': ''
    },
    'refCallback': {
      'type': {
        'name': 'func'
      },
      'required': false,
      'description': ''
    },
    'active': {
      'type': {
        'name': 'bool'
      },
      'required': false,
      'description': ''
    },
    'children': {
      'type': {
        'name': 'node'
      },
      'required': false,
      'description': ''
    }
  }
};
LinkFormButton.__docgenInfo = {
  'description': '',
  'methods': [],
  'displayName': 'LinkFormButton',
  'props': {
    'size': {
      'defaultValue': {
        'value': '\'md\'',
        'computed': false
      },
      'type': {
        'name': 'enum',
        'value': [{
          'value': '\'md\'',
          'computed': false
        }, {
          'value': '\'lg\'',
          'computed': false
        }]
      },
      'required': false,
      'description': ''
    },
    'value': {
      'defaultValue': {
        'value': '\'\'',
        'computed': false
      },
      'type': {
        'name': 'union',
        'value': [{
          'name': 'string'
        }, {
          'name': 'number'
        }]
      },
      'required': false,
      'description': ''
    },
    'onChange': {
      'defaultValue': {
        'value': '() => {}',
        'computed': false
      },
      'type': {
        'name': 'func'
      },
      'required': false,
      'description': ''
    },
    'className': {
      'type': {
        'name': 'string'
      },
      'required': false,
      'description': ''
    },
    'type': {
      'type': {
        'name': 'enum',
        'value': [{
          'value': '\'number\'',
          'computed': false
        }, {
          'value': '\'text\'',
          'computed': false
        }, {
          'value': '\'checkbox\'',
          'computed': false
        }, {
          'value': '\'radio\'',
          'computed': false
        }, {
          'value': '\'search\'',
          'computed': false
        }, {
          'value': '\'password\'',
          'computed': false
        }]
      },
      'required': false,
      'description': ''
    },
    'valid': {
      'type': {
        'name': 'enum',
        'value': [{
          'value': '\'success\'',
          'computed': false
        }, {
          'value': '\'error\'',
          'computed': false
        }, {
          'value': '\'warning\'',
          'computed': false
        }, {
          'value': '\'info\'',
          'computed': false
        }, {
          'value': '\'none\'',
          'computed': false
        }]
      },
      'required': false,
      'description': ''
    },
    'variant': {
      'type': {
        'name': 'enum',
        'value': [{
          'value': '\'midnight\'',
          'computed': false
        }, {
          'value': '\'primary\'',
          'computed': false
        }]
      },
      'required': false,
      'description': ''
    },
    'width': {
      'type': {
        'name': 'enum',
        'value': [{
          'value': '\'fluid\'',
          'computed': false
        }]
      },
      'required': false,
      'description': ''
    },
    'disabled': {
      'type': {
        'name': 'bool'
      },
      'required': false,
      'description': ''
    },
    'refCallback': {
      'type': {
        'name': 'func'
      },
      'required': false,
      'description': ''
    },
    'active': {
      'type': {
        'name': 'bool'
      },
      'required': false,
      'description': ''
    },
    'children': {
      'type': {
        'name': 'node'
      },
      'required': false,
      'description': ''
    },
    'href': {
      'type': {
        'name': 'string'
      },
      'required': false,
      'description': ''
    }
  }
};