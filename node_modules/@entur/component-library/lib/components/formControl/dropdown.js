'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.DropDownOptions = DropDownOptions;
exports.DropDown = DropDown;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _ = require('./');

require('./styles.css');

var _styles = {
  'buttonClassName': 'entur-form-control--button',
  'buttonGroupClassName': 'entur-button-group',
  'inputGroupClassName': 'entur-input-group',
  'rootClassName': 'entur-form-control',
  'entur-form-control': 'entur-form-control',
  'entur-form-control-prepend': 'entur-form-control-prepend',
  'entur-form-control-append': 'entur-form-control-append',
  'entur-form-control--disabled': 'entur-form-control--disabled',
  'entur-form-control-prepend--disabled': 'entur-form-control-prepend--disabled',
  'entur-form-control-append--disabled': 'entur-form-control-append--disabled',
  'entur-form-control--has-focus': 'entur-form-control--has-focus',
  'entur-form-control-prepend--has-focus': 'entur-form-control-prepend--has-focus',
  'entur-form-control-append--has-focus': 'entur-form-control-append--has-focus',
  'entur-form-control--size-md': 'entur-form-control--size-md',
  'entur-form-control-prepend--size-md': 'entur-form-control-prepend--size-md',
  'entur-form-control-append--size-md': 'entur-form-control-append--size-md',
  'entur-form-control--size-lg': 'entur-form-control--size-lg',
  'entur-form-control-prepend--size-lg': 'entur-form-control-prepend--size-lg',
  'entur-form-control-append--size-lg': 'entur-form-control-append--size-lg',
  'entur-form-control--is-prepended': 'entur-form-control--is-prepended',
  'entur-form-control-prepend--is-prepended': 'entur-form-control-prepend--is-prepended',
  'entur-form-control-append--is-prepended': 'entur-form-control-append--is-prepended',
  'entur-form-control--is-appended': 'entur-form-control--is-appended',
  'entur-form-control-prepend--is-appended': 'entur-form-control-prepend--is-appended',
  'entur-form-control-append--is-appended': 'entur-form-control-append--is-appended',
  'entur-form-control--valid-success': 'entur-form-control--valid-success',
  'entur-form-control-prepend--valid-success': 'entur-form-control-prepend--valid-success',
  'entur-form-control-append--valid-success': 'entur-form-control-append--valid-success',
  'entur-form-control--valid-error': 'entur-form-control--valid-error',
  'entur-form-control-prepend--valid-error': 'entur-form-control-prepend--valid-error',
  'entur-form-control-append--valid-error': 'entur-form-control-append--valid-error',
  'entur-form-control--width-fluid': 'entur-form-control--width-fluid',
  'entur-form-control-prepend--width-fluid': 'entur-form-control-prepend--width-fluid',
  'entur-form-control-append--width-fluid': 'entur-form-control-append--width-fluid',
  'entur-form-control--variant-midnight': 'entur-form-control--variant-midnight',
  'entur-form-control-prepend--variant-midnight': 'entur-form-control-prepend--variant-midnight',
  'entur-form-control-append--variant-midnight': 'entur-form-control-append--variant-midnight',
  'entur-form-control--button': 'entur-form-control--button',
  'entur-form-control--active': 'entur-form-control--active',
  'entur-button-group': 'entur-button-group',
  'entur-button-group__btn': 'entur-button-group__btn',
  'entur-button-group--width-fluid': 'entur-button-group--width-fluid',
  'entur-input-group': 'entur-input-group',
  'entur-input-group--width-fluid': 'entur-input-group--width-fluid'
};

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function DropDownOptions(_ref) {
  var value = _ref.value,
      label = _ref.label,
      rest = _objectWithoutProperties(_ref, ['value', 'label']);

  return _react2.default.createElement(
    'option',
    _extends({ value: value }, rest),
    label
  );
}

DropDownOptions.propTypes = {
  label: _propTypes2.default.string.isRequired,
  value: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]).isRequired
};

function DropDown(_ref2) {
  var className = _ref2.className,
      variant = _ref2.variant,
      size = _ref2.size,
      width = _ref2.width,
      valid = _ref2.valid,
      disabled = _ref2.disabled,
      refCallback = _ref2.refCallback,
      prepend = _ref2.prepend,
      append = _ref2.append,
      children = _ref2.children,
      style = _ref2.style,
      rest = _objectWithoutProperties(_ref2, ['className', 'variant', 'size', 'width', 'valid', 'disabled', 'refCallback', 'prepend', 'append', 'children', 'style']);

  var classNames = (0, _.getClassNames)(_styles.rootClassName, {
    variant: variant,
    size: size,
    width: width,
    valid: valid,
    prepend: prepend,
    append: append
  });

  var childrenArray = _react2.default.Children.toArray(children);
  var isOnlyDropDownOptions = childrenArray.every(function (_ref3) {
    var type = _ref3.type;
    return type === DropDownOptions;
  });

  if (!isOnlyDropDownOptions) {
    throw new Error('DropDown only allow children of type DropDownOptions');
  }

  if (!prepend && !append) {
    return _react2.default.createElement(
      'select',
      _extends({}, rest, {
        ref: refCallback,
        className: (0, _classnames2.default)(classNames, className),
        style: style,
        disabled: disabled
      }),
      children
    );
  }

  return _react2.default.createElement(
    _.FormControlWrapper,
    {
      prepend: prepend,
      append: append,
      valid: valid,
      variant: variant,
      size: size,
      width: width,
      className: className,
      style: style,
      disabled: disabled
    },
    _react2.default.createElement(
      'select',
      _extends({}, rest, {
        ref: refCallback,
        className: classNames,
        disabled: disabled
      }),
      children
    )
  );
}

DropDown.propTypes = {
  append: _propTypes2.default.node,
  className: _propTypes2.default.string,
  onChange: _propTypes2.default.func,
  size: _propTypes2.default.oneOf(['md', 'lg']).isRequired,
  value: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
  valid: _propTypes2.default.oneOf(['success', 'error', 'warning', 'info', 'none']),
  variant: _propTypes2.default.oneOf(['primary', 'midnight']),
  width: _propTypes2.default.oneOf(['fluid']),
  prepend: _propTypes2.default.node,
  disabled: _propTypes2.default.bool,
  children: _propTypes2.default.node,
  style: _propTypes2.default.object,
  refCallback: _propTypes2.default.func
};

DropDown.defaultProps = {
  size: 'md',
  value: ''
};
DropDownOptions.__docgenInfo = {
  'description': '',
  'methods': [],
  'displayName': 'DropDownOptions',
  'props': {
    'label': {
      'type': {
        'name': 'string'
      },
      'required': true,
      'description': ''
    },
    'value': {
      'type': {
        'name': 'union',
        'value': [{
          'name': 'string'
        }, {
          'name': 'number'
        }]
      },
      'required': true,
      'description': ''
    }
  }
};
DropDown.__docgenInfo = {
  'description': '',
  'methods': [],
  'displayName': 'DropDown',
  'props': {
    'size': {
      'defaultValue': {
        'value': '\'md\'',
        'computed': false
      },
      'type': {
        'name': 'enum',
        'value': [{
          'value': '\'md\'',
          'computed': false
        }, {
          'value': '\'lg\'',
          'computed': false
        }]
      },
      'required': false,
      'description': ''
    },
    'value': {
      'defaultValue': {
        'value': '\'\'',
        'computed': false
      },
      'type': {
        'name': 'union',
        'value': [{
          'name': 'string'
        }, {
          'name': 'number'
        }]
      },
      'required': false,
      'description': ''
    },
    'append': {
      'type': {
        'name': 'node'
      },
      'required': false,
      'description': ''
    },
    'className': {
      'type': {
        'name': 'string'
      },
      'required': false,
      'description': ''
    },
    'onChange': {
      'type': {
        'name': 'func'
      },
      'required': false,
      'description': ''
    },
    'valid': {
      'type': {
        'name': 'enum',
        'value': [{
          'value': '\'success\'',
          'computed': false
        }, {
          'value': '\'error\'',
          'computed': false
        }, {
          'value': '\'warning\'',
          'computed': false
        }, {
          'value': '\'info\'',
          'computed': false
        }, {
          'value': '\'none\'',
          'computed': false
        }]
      },
      'required': false,
      'description': ''
    },
    'variant': {
      'type': {
        'name': 'enum',
        'value': [{
          'value': '\'primary\'',
          'computed': false
        }, {
          'value': '\'midnight\'',
          'computed': false
        }]
      },
      'required': false,
      'description': ''
    },
    'width': {
      'type': {
        'name': 'enum',
        'value': [{
          'value': '\'fluid\'',
          'computed': false
        }]
      },
      'required': false,
      'description': ''
    },
    'prepend': {
      'type': {
        'name': 'node'
      },
      'required': false,
      'description': ''
    },
    'disabled': {
      'type': {
        'name': 'bool'
      },
      'required': false,
      'description': ''
    },
    'children': {
      'type': {
        'name': 'node'
      },
      'required': false,
      'description': ''
    },
    'style': {
      'type': {
        'name': 'object'
      },
      'required': false,
      'description': ''
    },
    'refCallback': {
      'type': {
        'name': 'func'
      },
      'required': false,
      'description': ''
    }
  }
};