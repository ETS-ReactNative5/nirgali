'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

exports.ExpandableGroup = ExpandableGroup;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

require('./styles.css');

var _styles = {
  'groupClassName': 'entur-expandable-group',
  'rootClassName': 'entur-expandable',
  'entur-expandable': 'entur-expandable',
  'entur-expandable--disabled': 'entur-expandable--disabled',
  'entur-expandable__header': 'entur-expandable__header',
  'entur-expandable__icon': 'entur-expandable__icon',
  'entur-expandable__content': 'entur-expandable__content',
  'entur-expandable--size-md': 'entur-expandable--size-md',
  'entur-expandable--size-lg': 'entur-expandable--size-lg',
  'entur-expandable--variant-default': 'entur-expandable--variant-default',
  'entur-expandable__header--disabled': 'entur-expandable__header--disabled',
  'entur-expandable--variant-midnight': 'entur-expandable--variant-midnight',
  'entur-expandable__header--expanded': 'entur-expandable__header--expanded'
};

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function isDefined(whatever) {
  return whatever !== undefined;
}

function cloneChildren(children, getPropsUpdates) {
  return _react2.default.Children.toArray(children).map(function (child) {
    return _react2.default.cloneElement(child, getPropsUpdates(child));
  });
}

function ExpandableGroup(props) {
  var className = props.className,
      children = props.children,
      icon = props.icon,
      disabled = props.disabled,
      size = props.size,
      variant = props.variant;

  var _useState = (0, _react.useState)(),
      _useState2 = _slicedToArray(_useState, 2),
      expanded = _useState2[0],
      setExpanded = _useState2[1];

  var classNames = (0, _classnames2.default)(_styles.groupClassName, _styles.groupClassName + '--variant-' + variant, className);

  var expandables = cloneChildren(children, function (child) {
    return {
      icon: isDefined(icon) ? icon : child.props.icon,
      disabled: isDefined(disabled) ? disabled : child.props.disabled,
      size: size,
      variant: variant,
      expanded: child.key === expanded,
      onHeaderClick: function onHeaderClick() {
        return setExpanded(expanded !== child.key ? child.key : undefined);
      }
    };
  });

  return _react2.default.createElement(
    'div',
    { className: classNames },
    expandables
  );
}

ExpandableGroup.propTypes = {
  children: _propTypes2.default.node,
  className: _propTypes2.default.string,
  disabled: _propTypes2.default.bool,
  icon: _propTypes2.default.node,
  size: _propTypes2.default.oneOf(['md', 'lg']),
  variant: _propTypes2.default.oneOf(['default', 'midnight'])
};
ExpandableGroup.__docgenInfo = {
  'description': '',
  'methods': [],
  'displayName': 'ExpandableGroup',
  'props': {
    'children': {
      'type': {
        'name': 'node'
      },
      'required': false,
      'description': ''
    },
    'className': {
      'type': {
        'name': 'string'
      },
      'required': false,
      'description': ''
    },
    'disabled': {
      'type': {
        'name': 'bool'
      },
      'required': false,
      'description': ''
    },
    'icon': {
      'type': {
        'name': 'node'
      },
      'required': false,
      'description': ''
    },
    'size': {
      'type': {
        'name': 'enum',
        'value': [{
          'value': '\'md\'',
          'computed': false
        }, {
          'value': '\'lg\'',
          'computed': false
        }]
      },
      'required': false,
      'description': ''
    },
    'variant': {
      'type': {
        'name': 'enum',
        'value': [{
          'value': '\'default\'',
          'computed': false
        }, {
          'value': '\'midnight\'',
          'computed': false
        }]
      },
      'required': false,
      'description': ''
    }
  }
};