'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

exports.Expandable = Expandable;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _chevron = require('../icons/arrows/chevron');

var _chevron2 = _interopRequireDefault(_chevron);

require('./styles.css');

var _styles = {
  'groupClassName': 'entur-expandable-group',
  'rootClassName': 'entur-expandable',
  'entur-expandable': 'entur-expandable',
  'entur-expandable--disabled': 'entur-expandable--disabled',
  'entur-expandable__header': 'entur-expandable__header',
  'entur-expandable__icon': 'entur-expandable__icon',
  'entur-expandable__content': 'entur-expandable__content',
  'entur-expandable--size-md': 'entur-expandable--size-md',
  'entur-expandable--size-lg': 'entur-expandable--size-lg',
  'entur-expandable--variant-default': 'entur-expandable--variant-default',
  'entur-expandable__header--disabled': 'entur-expandable__header--disabled',
  'entur-expandable--variant-midnight': 'entur-expandable--variant-midnight',
  'entur-expandable__header--expanded': 'entur-expandable__header--expanded'
};

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function getIcon(expanded) {
  var direction = expanded ? 'up' : 'down';

  return _react2.default.createElement(_chevron2.default, { direction: direction, height: '14', width: '14' });
}

function getExpandedHandlers(expanded, onHeaderClick, disabled, defaultExpanded) {
  if (disabled) return [expanded];
  if (onHeaderClick !== undefined) return [expanded, onHeaderClick];

  var _useState = (0, _react.useState)(defaultExpanded),
      _useState2 = _slicedToArray(_useState, 2),
      expandedState = _useState2[0],
      updatedExpandedState = _useState2[1];

  return [expandedState, function () {
    return updatedExpandedState(!expandedState);
  }];
}

function Expandable(props) {
  var _cx, _cx2;

  var className = props.className,
      icon = props.icon,
      title = props.title,
      disabled = props.disabled,
      children = props.children,
      variant = props.variant,
      size = props.size,
      expanded = props.expanded,
      onHeaderClick = props.onHeaderClick,
      defaultExpanded = props.defaultExpanded,
      rest = _objectWithoutProperties(props, ['className', 'icon', 'title', 'disabled', 'children', 'variant', 'size', 'expanded', 'onHeaderClick', 'defaultExpanded']);

  var _getExpandedHandlers = getExpandedHandlers(expanded, onHeaderClick, disabled, defaultExpanded),
      _getExpandedHandlers2 = _slicedToArray(_getExpandedHandlers, 2),
      expandedState = _getExpandedHandlers2[0],
      headerClickHandler = _getExpandedHandlers2[1];

  var classNames = (0, _classnames2.default)(_styles.rootClassName, _styles.rootClassName + '--variant-' + variant, _styles.rootClassName + '--size-' + size, (_cx = {}, _defineProperty(_cx, _styles.rootClassName + '--disabled', disabled), _defineProperty(_cx, _styles.rootClassName + '--expanded', expandedState), _cx), className);

  var headerClassNames = (0, _classnames2.default)(_styles.rootClassName + '__header', (_cx2 = {}, _defineProperty(_cx2, _styles.rootClassName + '__header--expanded', expandedState), _defineProperty(_cx2, _styles.rootClassName + '__header--disabled', disabled), _cx2));

  return _react2.default.createElement(
    'div',
    _extends({ className: classNames }, rest),
    _react2.default.createElement(
      'div',
      { className: headerClassNames, onClick: headerClickHandler },
      _react2.default.createElement(
        'span',
        null,
        title
      ),
      icon !== null && _react2.default.createElement(
        'div',
        { className: _styles.rootClassName + '__icon' },
        icon || getIcon(expandedState)
      )
    ),
    expandedState && _react2.default.createElement(
      'div',
      { className: _styles.rootClassName + '__content' },
      children
    )
  );
}

Expandable.propTypes = {
  children: _propTypes2.default.node,
  className: _propTypes2.default.string,
  defaultExpanded: _propTypes2.default.bool,
  disabled: _propTypes2.default.bool,
  expanded: _propTypes2.default.bool,
  icon: _propTypes2.default.node,
  onHeaderClick: _propTypes2.default.func,
  title: _propTypes2.default.node,
  size: _propTypes2.default.oneOf(['md', 'lg']),
  variant: _propTypes2.default.oneOf(['default', 'midnight'])
};

Expandable.defaultProps = {
  defaultExpanded: false,
  size: 'md',
  variant: 'default'
};
Expandable.__docgenInfo = {
  'description': '',
  'methods': [],
  'displayName': 'Expandable',
  'props': {
    'defaultExpanded': {
      'defaultValue': {
        'value': 'false',
        'computed': false
      },
      'type': {
        'name': 'bool'
      },
      'required': false,
      'description': ''
    },
    'size': {
      'defaultValue': {
        'value': '\'md\'',
        'computed': false
      },
      'type': {
        'name': 'enum',
        'value': [{
          'value': '\'md\'',
          'computed': false
        }, {
          'value': '\'lg\'',
          'computed': false
        }]
      },
      'required': false,
      'description': ''
    },
    'variant': {
      'defaultValue': {
        'value': '\'default\'',
        'computed': false
      },
      'type': {
        'name': 'enum',
        'value': [{
          'value': '\'default\'',
          'computed': false
        }, {
          'value': '\'midnight\'',
          'computed': false
        }]
      },
      'required': false,
      'description': ''
    },
    'children': {
      'type': {
        'name': 'node'
      },
      'required': false,
      'description': ''
    },
    'className': {
      'type': {
        'name': 'string'
      },
      'required': false,
      'description': ''
    },
    'disabled': {
      'type': {
        'name': 'bool'
      },
      'required': false,
      'description': ''
    },
    'expanded': {
      'type': {
        'name': 'bool'
      },
      'required': false,
      'description': ''
    },
    'icon': {
      'type': {
        'name': 'node'
      },
      'required': false,
      'description': ''
    },
    'onHeaderClick': {
      'type': {
        'name': 'func'
      },
      'required': false,
      'description': ''
    },
    'title': {
      'type': {
        'name': 'node'
      },
      'required': false,
      'description': ''
    }
  }
};