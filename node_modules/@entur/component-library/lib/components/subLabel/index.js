'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.SubLabel = SubLabel;
exports.Legend = Legend;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

require('./styles.css');

var _styles = {
  'rootClassName': 'entur-sub-label',
  'entur-sub-label': 'entur-sub-label'
};

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function SubLabel(props) {
  var children = props.children,
      className = props.className,
      rest = _objectWithoutProperties(props, ['children', 'className']);

  var combinedClassNames = (0, _classnames2.default)(_styles.rootClassName, className);

  return _react2.default.createElement(
    'label',
    _extends({}, rest, { className: combinedClassNames }),
    children
  );
}

function Legend(props) {
  var children = props.children,
      className = props.className,
      rest = _objectWithoutProperties(props, ['children', 'className']);

  var combinedClassNames = (0, _classnames2.default)(_styles.rootClassName, className);

  return _react2.default.createElement(
    'legend',
    _extends({}, rest, { className: combinedClassNames }),
    children
  );
}

SubLabel.propTypes = Legend.propTypes = {
  className: _propTypes2.default.string,
  children: _propTypes2.default.node
};
SubLabel.__docgenInfo = {
  'description': '',
  'methods': [],
  'displayName': 'SubLabel',
  'props': {
    'className': {
      'type': {
        'name': 'string'
      },
      'required': false,
      'description': ''
    },
    'children': {
      'type': {
        'name': 'node'
      },
      'required': false,
      'description': ''
    }
  }
};
Legend.__docgenInfo = {
  'description': '',
  'methods': [],
  'displayName': 'Legend'
};