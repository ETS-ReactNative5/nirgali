'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.SlideSwitch = SlideSwitch;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

require('./styles.css');

var _styles = {
  'rootClassName': 'entur-switch',
  'entur-switch__input': 'entur-switch__input',
  'entur-switch__indicator': 'entur-switch__indicator',
  'entur-switch__indicator__knob': 'entur-switch__indicator__knob',
  'disabled': 'disabled',
  'slider': 'slider',
  'entur-switch--size-medium': 'entur-switch--size-medium',
  'entur-switch--size-large': 'entur-switch--size-large',
  'entur-switch__label': 'entur-switch__label'
};

var _label = require('../label');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function SlideSwitch(props) {
  var id = props.id,
      value = props.value,
      checked = props.checked,
      className = props.className,
      onChange = props.onChange,
      label = props.label,
      disabled = props.disabled,
      color = props.color,
      size = props.size,
      knobIcon = props.knobIcon,
      rest = _objectWithoutProperties(props, ['id', 'value', 'checked', 'className', 'onChange', 'label', 'disabled', 'color', 'size', 'knobIcon']);

  var combinedClassNames = (0, _classnames2.default)(_styles.rootClassName, _defineProperty({}, _styles.rootClassName + '--size-' + size, size), className);

  var checkboxClassName = _styles.rootClassName + '__input';
  var indicatorClassName = _styles.rootClassName + '__indicator';
  var labelClassName = _styles.rootClassName + '__label';
  var knobClassName = indicatorClassName + '__knob';

  var indicatorStyle = checked && !disabled ? { backgroundColor: color, borderColor: color } : undefined;
  var knobStyle = checked && !disabled ? { borderColor: color } : undefined;

  return _react2.default.createElement(
    'div',
    { className: combinedClassNames },
    _react2.default.createElement('input', _extends({
      id: id,
      className: checkboxClassName,
      type: 'checkbox',
      value: value,
      checked: checked,
      onChange: onChange,
      disabled: disabled
    }, rest)),
    _react2.default.createElement(
      'div',
      { className: indicatorClassName, style: indicatorStyle },
      _react2.default.createElement(
        'div',
        { className: knobClassName, style: knobStyle },
        knobIcon
      )
    ),
    _react2.default.createElement(
      _label.Label,
      { htmlFor: id, className: labelClassName },
      label
    )
  );
}

SlideSwitch.propTypes = {
  className: _propTypes2.default.string,
  id: _propTypes2.default.string,
  checked: _propTypes2.default.bool,
  value: _propTypes2.default.string,
  onChange: _propTypes2.default.func,
  disabled: _propTypes2.default.bool,
  label: _propTypes2.default.string,
  color: _propTypes2.default.string,
  size: _propTypes2.default.oneOf(['medium', 'large']),
  knobIcon: _propTypes2.default.node
};

SlideSwitch.defaultProps = {
  checked: false,
  value: '',
  onChange: function onChange() {},
  disabled: false,
  label: '',
  size: 'medium'
};
SlideSwitch.__docgenInfo = {
  'description': '',
  'methods': [],
  'displayName': 'SlideSwitch',
  'props': {
    'checked': {
      'defaultValue': {
        'value': 'false',
        'computed': false
      },
      'type': {
        'name': 'bool'
      },
      'required': false,
      'description': ''
    },
    'value': {
      'defaultValue': {
        'value': '\'\'',
        'computed': false
      },
      'type': {
        'name': 'string'
      },
      'required': false,
      'description': ''
    },
    'onChange': {
      'defaultValue': {
        'value': '() => {}',
        'computed': false
      },
      'type': {
        'name': 'func'
      },
      'required': false,
      'description': ''
    },
    'disabled': {
      'defaultValue': {
        'value': 'false',
        'computed': false
      },
      'type': {
        'name': 'bool'
      },
      'required': false,
      'description': ''
    },
    'label': {
      'defaultValue': {
        'value': '\'\'',
        'computed': false
      },
      'type': {
        'name': 'string'
      },
      'required': false,
      'description': ''
    },
    'size': {
      'defaultValue': {
        'value': '\'medium\'',
        'computed': false
      },
      'type': {
        'name': 'enum',
        'value': [{
          'value': '\'medium\'',
          'computed': false
        }, {
          'value': '\'large\'',
          'computed': false
        }]
      },
      'required': false,
      'description': ''
    },
    'className': {
      'type': {
        'name': 'string'
      },
      'required': false,
      'description': ''
    },
    'id': {
      'type': {
        'name': 'string'
      },
      'required': false,
      'description': ''
    },
    'color': {
      'type': {
        'name': 'string'
      },
      'required': false,
      'description': ''
    },
    'knobIcon': {
      'type': {
        'name': 'node'
      },
      'required': false,
      'description': ''
    }
  }
};