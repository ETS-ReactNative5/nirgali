'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var InputButton = function (_Component) {
  _inherits(InputButton, _Component);

  function InputButton() {
    _classCallCheck(this, InputButton);

    var _this = _possibleConstructorReturn(this, (InputButton.__proto__ || Object.getPrototypeOf(InputButton)).call(this));

    _this.refHandler = function (el) {
      var refCallback = _this.props.refCallback;

      _this.inputEl = el;
      refCallback && refCallback(el);
    };

    _this.state = { hasFocus: false };
    _this.handleInputFocus = _this.toggleFocus.bind(_this, true);
    _this.handleInputBlur = _this.toggleFocus.bind(_this, false);
    return _this;
  }

  _createClass(InputButton, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this.inputEl.addEventListener('focus', this.handleInputFocus);
      this.inputEl.addEventListener('blur', this.handleInputBlur);
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this.inputEl.removeEventListener('focus', this.handleInputFocus);
      this.inputEl.removeEventListener('blur', this.handleInputBlur);
    }
  }, {
    key: 'toggleFocus',
    value: function toggleFocus(hasFocus) {
      this.setState({ hasFocus: hasFocus });
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          id = _props.id,
          className = _props.className,
          focusClassName = _props.focusClassName,
          type = _props.type,
          children = _props.children,
          value = _props.value,
          checked = _props.checked,
          disabled = _props.disabled,
          refCallback = _props.refCallback,
          style = _props.style,
          rest = _objectWithoutProperties(_props, ['id', 'className', 'focusClassName', 'type', 'children', 'value', 'checked', 'disabled', 'refCallback', 'style']);

      var hasFocus = this.state.hasFocus;

      var classNames = (0, _classnames2.default)(className, _defineProperty({}, focusClassName, hasFocus));

      return _react2.default.createElement(
        'label',
        { htmlFor: id, className: classNames, style: style },
        children,
        _react2.default.createElement('input', _extends({
          ref: this.refHandler,
          id: id,
          className: 'visuallyhidden',
          type: type,
          value: value,
          checked: checked,
          disabled: disabled
        }, rest))
      );
    }
  }]);

  return InputButton;
}(_react.Component);

InputButton.propTypes = {
  id: _propTypes2.default.string,
  className: _propTypes2.default.string.isRequired,
  focusClassName: _propTypes2.default.string,
  type: _propTypes2.default.oneOf(['checkbox', 'radio']),
  checked: _propTypes2.default.bool,
  disabled: _propTypes2.default.bool,
  value: _propTypes2.default.string,
  children: _propTypes2.default.node,
  refCallback: _propTypes2.default.func,
  style: _propTypes2.default.object
};

exports.default = InputButton;
InputButton.__docgenInfo = {
  'description': '',
  'methods': [{
    'name': 'toggleFocus',
    'docblock': null,
    'modifiers': [],
    'params': [{
      'name': 'hasFocus',
      'type': null
    }],
    'returns': null
  }, {
    'name': 'refHandler',
    'docblock': null,
    'modifiers': [],
    'params': [{
      'name': 'el',
      'type': null
    }],
    'returns': null
  }],
  'displayName': 'InputButton',
  'props': {
    'id': {
      'type': {
        'name': 'string'
      },
      'required': false,
      'description': ''
    },
    'className': {
      'type': {
        'name': 'string'
      },
      'required': true,
      'description': ''
    },
    'focusClassName': {
      'type': {
        'name': 'string'
      },
      'required': false,
      'description': ''
    },
    'type': {
      'type': {
        'name': 'enum',
        'value': [{
          'value': '\'checkbox\'',
          'computed': false
        }, {
          'value': '\'radio\'',
          'computed': false
        }]
      },
      'required': false,
      'description': ''
    },
    'checked': {
      'type': {
        'name': 'bool'
      },
      'required': false,
      'description': ''
    },
    'disabled': {
      'type': {
        'name': 'bool'
      },
      'required': false,
      'description': ''
    },
    'value': {
      'type': {
        'name': 'string'
      },
      'required': false,
      'description': ''
    },
    'children': {
      'type': {
        'name': 'node'
      },
      'required': false,
      'description': ''
    },
    'refCallback': {
      'type': {
        'name': 'func'
      },
      'required': false,
      'description': ''
    },
    'style': {
      'type': {
        'name': 'object'
      },
      'required': false,
      'description': ''
    }
  }
};