'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AlertMessage = AlertMessage;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _error = require('../icons/ui/error');

var _error2 = _interopRequireDefault(_error);

var _exclamation = require('../icons/ui/exclamation');

var _exclamation2 = _interopRequireDefault(_exclamation);

var _success = require('../icons/ui/success');

var _success2 = _interopRequireDefault(_success);

var _info = require('../icons/ui/info');

var _info2 = _interopRequireDefault(_info);

var _constants = require('../../utils/constants');

require('./styles.css');

var _styles = {
  'rootClassName': 'entur-alert-message',
  'entur-alert-message': 'entur-alert-message',
  'entur-alert-message__icon': 'entur-alert-message__icon',
  'entur-alert-message__text': 'entur-alert-message__text',
  'entur-alert-message__text--variant-midnight': 'entur-alert-message__text--variant-midnight'
};

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function getIcon(level, variant) {
  var fillColor = variant === 'midnight' ? _constants.COLORS.BLUE : _constants.COLORS.WHITE;
  switch (level) {
    case 'success':
      return _react2.default.createElement(_success2.default, {
        className: _styles.rootClassName + '__icon',
        backgroundColor: variant === 'midnight' ? _constants.COLORS.MINT : _constants.COLORS.DARK_MINT,
        color: fillColor
      });
    case 'error':
      return _react2.default.createElement(_error2.default, {
        className: _styles.rootClassName + '__icon',
        backgroundColor: _constants.COLORS.LAVA,
        color: fillColor
      });
    case 'warning':
      return _react2.default.createElement(_exclamation2.default, {
        className: _styles.rootClassName + '__icon',
        backgroundColor: _constants.COLORS.CANARY,
        color: fillColor
      });
    case 'info':
      return _react2.default.createElement(_info2.default, {
        className: _styles.rootClassName + '__icon',
        backgroundColor: variant === 'midnight' ? _constants.COLORS.LAVENDER : _constants.COLORS.BLUE,
        color: fillColor
      });
    case 'none':
      return null;
    default:
      return null;
  }
}

function AlertMessage(_ref) {
  var level = _ref.level,
      children = _ref.children,
      className = _ref.className,
      variant = _ref.variant;

  var classNames = (0, _classnames2.default)(_styles.rootClassName, className);
  var textClass = _styles.rootClassName + '__text';
  var textClassNames = (0, _classnames2.default)(textClass, _defineProperty({}, textClass + '--variant-' + variant, variant));
  return _react2.default.createElement(
    'div',
    { className: classNames },
    getIcon(level, variant),
    _react2.default.createElement(
      'div',
      { className: textClassNames },
      children
    )
  );
}

AlertMessage.propTypes = {
  children: _propTypes2.default.node,
  className: _propTypes2.default.string,
  level: _propTypes2.default.oneOf(['success', 'error', 'warning', 'info', 'none']),
  variant: _propTypes2.default.oneOf(['midnight'])
};

AlertMessage.defaultProps = {
  level: 'none'
};
AlertMessage.__docgenInfo = {
  'description': '',
  'methods': [],
  'displayName': 'AlertMessage',
  'props': {
    'level': {
      'defaultValue': {
        'value': '\'none\'',
        'computed': false
      },
      'type': {
        'name': 'enum',
        'value': [{
          'value': '\'success\'',
          'computed': false
        }, {
          'value': '\'error\'',
          'computed': false
        }, {
          'value': '\'warning\'',
          'computed': false
        }, {
          'value': '\'info\'',
          'computed': false
        }, {
          'value': '\'none\'',
          'computed': false
        }]
      },
      'required': false,
      'description': ''
    },
    'children': {
      'type': {
        'name': 'node'
      },
      'required': false,
      'description': ''
    },
    'className': {
      'type': {
        'name': 'string'
      },
      'required': false,
      'description': ''
    },
    'variant': {
      'type': {
        'name': 'enum',
        'value': [{
          'value': '\'midnight\'',
          'computed': false
        }]
      },
      'required': false,
      'description': ''
    }
  }
};