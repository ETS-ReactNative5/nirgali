'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _helper = require('../helper');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; } // Nucleo Icon, see LICENCE.md
// https://nucleoapp.com/license

function Map(_ref) {
  var _ref$color = _ref.color,
      color = _ref$color === undefined ? 'currentColor' : _ref$color,
      size = _ref.size,
      svgProps = _objectWithoutProperties(_ref, ['color', 'size']);

  return _react2.default.createElement(
    'svg',
    _extends({
      xmlns: 'http://www.w3.org/2000/svg',
      viewBox: '0 0 16 16'
    }, (0, _helper.getIconSize)(size), svgProps),
    _react2.default.createElement('path', {
      fill: color,
      d: 'M13.69141,0.99205L9.66602,2.5692l-3.1499-1.57715c-0.1748-0.08789-0.4375-0.08789-0.7002,0l-4.375,1.75244 c-0.34961,0.0874-0.5249,0.43799-0.5249,0.78857v10.51416c0,0.61426,0.61279,1.05176,1.2251,0.78906l4.0249-1.57715 l3.15039,1.57715c0.26172,0.08789,0.4375,0.08789,0.69922,0l4.375-1.66504c0.35059-0.08789,0.52539-0.4375,0.52539-0.78809V1.78063 C14.91602,1.16734,14.30371,0.72887,13.69141,0.99205z M7.04102,3.18248l1.75,0.87646v8.58691l-1.75-0.87598V3.18248z M2.66602,4.14635l2.625-1.05127v8.58691l-2.625,1.05176V4.14635z M13.16602,11.76988l-2.625,0.96387v-8.5874l2.625-1.05127 V11.76988z'
    })
  );
}

Map.propTypes = {
  size: _propTypes2.default.oneOf(['xlarge', 'large', 'medium', 'small']),
  color: _propTypes2.default.string
};

exports.default = Map;
Map.__docgenInfo = {
  'description': '',
  'methods': [],
  'displayName': 'Map',
  'props': {
    'color': {
      'defaultValue': {
        'value': '\'currentColor\'',
        'computed': false
      },
      'type': {
        'name': 'string'
      },
      'required': false,
      'description': ''
    },
    'size': {
      'type': {
        'name': 'enum',
        'value': [{
          'value': '\'xlarge\'',
          'computed': false
        }, {
          'value': '\'large\'',
          'computed': false
        }, {
          'value': '\'medium\'',
          'computed': false
        }, {
          'value': '\'small\'',
          'computed': false
        }]
      },
      'required': false,
      'description': ''
    }
  }
};