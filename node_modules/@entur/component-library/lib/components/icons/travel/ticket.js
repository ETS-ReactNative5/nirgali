'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _helper = require('../helper');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; } // Nucleo Icon, see LICENCE.md
// https://nucleoapp.com/license

function Ticket(_ref) {
  var _ref$color = _ref.color,
      color = _ref$color === undefined ? 'currentColor' : _ref$color,
      size = _ref.size,
      svgProps = _objectWithoutProperties(_ref, ['color', 'size']);

  return _react2.default.createElement(
    'svg',
    _extends({
      xmlns: 'http://www.w3.org/2000/svg',
      viewBox: '0 0 16 16'
    }, (0, _helper.getIconSize)(size), svgProps),
    _react2.default.createElement('path', {
      fill: color,
      d: 'M11.33301,7.33336H4.6665v-1.3335h6.6665V7.33336z M8.6665,10.00035h-4v-1.3335h4V10.00035z M15.33301,1.99986H0.6665C0.29785,1.99986,0,2.2982,0,2.66686v3.33301c0,0.36865,0.29785,0.66699,0.6665,0.66699 C1.40186,6.66686,2,7.26451,2,7.99986s-0.59814,1.3335-1.3335,1.3335C0.29785,9.33336,0,9.63121,0,10.00035v3.33301 c0,0.36816,0.29785,0.66699,0.6665,0.66699h14.6665c0.36914,0,0.66699-0.29883,0.66699-0.66699v-3.33301 c0-0.36914-0.29785-0.66699-0.66699-0.66699C14.59766,9.33336,14,8.73522,14,7.99986s0.59766-1.33301,1.33301-1.33301 C15.70215,6.66686,16,6.36852,16,5.99986V2.66686C16,2.2982,15.70215,1.99986,15.33301,1.99986z'
    })
  );
}

Ticket.propTypes = {
  size: _propTypes2.default.oneOf(['xlarge', 'large', 'medium', 'small']),
  color: _propTypes2.default.string
};

exports.default = Ticket;
Ticket.__docgenInfo = {
  'description': '',
  'methods': [],
  'displayName': 'Ticket',
  'props': {
    'color': {
      'defaultValue': {
        'value': '\'currentColor\'',
        'computed': false
      },
      'type': {
        'name': 'string'
      },
      'required': false,
      'description': ''
    },
    'size': {
      'type': {
        'name': 'enum',
        'value': [{
          'value': '\'xlarge\'',
          'computed': false
        }, {
          'value': '\'large\'',
          'computed': false
        }, {
          'value': '\'medium\'',
          'computed': false
        }, {
          'value': '\'small\'',
          'computed': false
        }]
      },
      'required': false,
      'description': ''
    }
  }
};