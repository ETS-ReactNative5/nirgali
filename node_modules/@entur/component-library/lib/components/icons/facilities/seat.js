'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _helper = require('../helper');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; } // Nucleo Icon, see LICENCE.md
// https://nucleoapp.com/license

function Seat(_ref) {
  var _ref$color = _ref.color,
      color = _ref$color === undefined ? 'currentColor' : _ref$color,
      size = _ref.size,
      svgProps = _objectWithoutProperties(_ref, ['color', 'size']);

  return _react2.default.createElement(
    'svg',
    _extends({
      xmlns: 'http://www.w3.org/2000/svg',
      viewBox: '0 0 16 16'
    }, (0, _helper.getIconSize)(size), svgProps),
    _react2.default.createElement('path', {
      fill: color,
      d: 'M3.19287,2.92516C2.46973,2.411,2.29248,1.41393,2.79883,0.68248 c0.50586-0.72363,1.51074-0.8999,2.24219-0.39307c0.72266,0.51318,0.8999,1.51025,0.39404,2.2417 C4.9209,3.25475,3.92383,3.43102,3.19287,2.92516z M11.75098,13.66246v1.60645H6.07764c-1.98535,0-3.67236-1.44531-3.97754-3.40723 L0.5,4.01793h1.60693l1.5835,7.60254c0.17676,1.17383,1.18994,2.04199,2.37891,2.04199H11.75098z M8.01465,10.44762h4.58594 l2.76367,4.19043c0.24512,0.37305,0.14941,0.87793-0.21484,1.12988l-0.12988,0.09082 c-0.37012,0.25683-0.875,0.15332-1.11914-0.22852l-1.77832-2.77148H6.79248c-1.15625,0-2.14551-0.81934-2.37061-1.96191 L3.33691,6.13951C3.104,5.05406,3.82715,4.2191,4.81592,4.04186h0.01611C5.09717,3.994,5.51904,4.03258,5.76709,4.13268 c0.32617,0.13135,0.80225,0.35303,1.00635,1.2876L8.01465,10.44762z'
    })
  );
}

Seat.propTypes = {
  size: _propTypes2.default.oneOf(['xlarge', 'large', 'medium', 'small']),
  color: _propTypes2.default.string
};

exports.default = Seat;
Seat.__docgenInfo = {
  'description': '',
  'methods': [],
  'displayName': 'Seat',
  'props': {
    'color': {
      'defaultValue': {
        'value': '\'currentColor\'',
        'computed': false
      },
      'type': {
        'name': 'string'
      },
      'required': false,
      'description': ''
    },
    'size': {
      'type': {
        'name': 'enum',
        'value': [{
          'value': '\'xlarge\'',
          'computed': false
        }, {
          'value': '\'large\'',
          'computed': false
        }, {
          'value': '\'medium\'',
          'computed': false
        }, {
          'value': '\'small\'',
          'computed': false
        }]
      },
      'required': false,
      'description': ''
    }
  }
};