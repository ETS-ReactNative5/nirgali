'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _helper = require('../helper');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function BusShelter(_ref) {
  var _ref$color = _ref.color,
      color = _ref$color === undefined ? 'currentColor' : _ref$color,
      size = _ref.size,
      svgProps = _objectWithoutProperties(_ref, ['color', 'size']);

  return _react2.default.createElement(
    'svg',
    _extends({
      xmlns: 'http://www.w3.org/2000/svg',
      viewBox: '0 0 16 16'
    }, (0, _helper.getIconSize)(size), svgProps),
    _react2.default.createElement('path', {
      fill: color,
      d: 'M8,6.99986c1.26074,0,2.28613,1.00928,2.28613,2.25049v0.5625c0,1.24023-1.02539,2.25-2.28613,2.25 s-2.28564-1.00977-2.28564-2.25v-0.5625C5.71436,8.00914,6.73926,6.99986,8,6.99986z M10.30664,12.30211 C11.3125,12.62535,12,13.36266,12,14.31285v1.6875H4v-1.6875c0-0.9502,0.6875-1.6875,1.69385-2.01074 C6.30322,12.84996,7.11133,13.18785,8,13.18785S9.69629,12.84996,10.30664,12.30211z M14.94141,5.99986L8,2.20055L1.05859,5.99986 L0,4.22496l7.4707-4.08984c0.32861-0.18018,0.73096-0.18018,1.05859,0L16,4.22496L14.94141,5.99986z'
    })
  );
}

BusShelter.propTypes = {
  size: _propTypes2.default.oneOf(['xlarge', 'large', 'medium', 'small']),
  color: _propTypes2.default.string
};

exports.default = BusShelter;
BusShelter.__docgenInfo = {
  'description': '',
  'methods': [],
  'displayName': 'BusShelter',
  'props': {
    'color': {
      'defaultValue': {
        'value': '\'currentColor\'',
        'computed': false
      },
      'type': {
        'name': 'string'
      },
      'required': false,
      'description': ''
    },
    'size': {
      'type': {
        'name': 'enum',
        'value': [{
          'value': '\'xlarge\'',
          'computed': false
        }, {
          'value': '\'large\'',
          'computed': false
        }, {
          'value': '\'medium\'',
          'computed': false
        }, {
          'value': '\'small\'',
          'computed': false
        }]
      },
      'required': false,
      'description': ''
    }
  }
};