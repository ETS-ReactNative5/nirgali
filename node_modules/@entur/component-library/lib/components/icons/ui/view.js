'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _helper = require('../helper');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; } // Nucleo Icon, see LICENCE.md
// https://nucleoapp.com/license

function View(_ref) {
  var _ref$color = _ref.color,
      color = _ref$color === undefined ? 'currentColor' : _ref$color,
      size = _ref.size,
      svgProps = _objectWithoutProperties(_ref, ['color', 'size']);

  return _react2.default.createElement(
    'svg',
    _extends({
      xmlns: 'http://www.w3.org/2000/svg',
      viewBox: '0 0 16 16'
    }, (0, _helper.getIconSize)(size), svgProps),
    _react2.default.createElement('path', {
      fill: color,
      d: 'M8,3.99986c2.83887,0,5.03613,2.83496,5.81836,4C13.03418,9.16637,10.83691,12.00035,8,12.00035 c-2.84082,0-5.03809-2.83789-5.81885-4.00146C2.95801,6.83482,5.146,3.99986,8,3.99986 M8,14.00035 c4.70703,0,7.74414-5.28418,7.87109-5.5083c0.1709-0.3042,0.17188-0.67627,0.00098-0.97998 C15.74609,7.28697,12.73145,1.99986,8,1.99986c-4.75488,0-7.74902,5.28906-7.87402,5.51416 c-0.16895,0.30273-0.16797,0.67188,0.00195,0.9751C0.25391,8.71275,3.26904,14.00035,8,14.00035 M8,5.99986 c1.10547,0,2,0.89502,2,2s-0.89453,2.00049-2,2.00049c-1.10498,0-2-0.89551-2-2.00049S6.89502,5.99986,8,5.99986'
    })
  );
}

View.propTypes = {
  size: _propTypes2.default.oneOf(['xlarge', 'large', 'medium', 'small']),
  color: _propTypes2.default.string
};

exports.default = View;
View.__docgenInfo = {
  'description': '',
  'methods': [],
  'displayName': 'View',
  'props': {
    'color': {
      'defaultValue': {
        'value': '\'currentColor\'',
        'computed': false
      },
      'type': {
        'name': 'string'
      },
      'required': false,
      'description': ''
    },
    'size': {
      'type': {
        'name': 'enum',
        'value': [{
          'value': '\'xlarge\'',
          'computed': false
        }, {
          'value': '\'large\'',
          'computed': false
        }, {
          'value': '\'medium\'',
          'computed': false
        }, {
          'value': '\'small\'',
          'computed': false
        }]
      },
      'required': false,
      'description': ''
    }
  }
};