'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _helper = require('../helper');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; } // Nucleo Icon, see LICENCE.md
// https://nucleoapp.com/license

function ZoomIn(_ref) {
  var _ref$color = _ref.color,
      color = _ref$color === undefined ? 'currentColor' : _ref$color,
      size = _ref.size,
      svgProps = _objectWithoutProperties(_ref, ['color', 'size']);

  return _react2.default.createElement(
    'svg',
    _extends({
      xmlns: 'http://www.w3.org/2000/svg',
      viewBox: '0 0 16 16'
    }, (0, _helper.getIconSize)(size), svgProps),
    _react2.default.createElement('path', {
      fill: color,
      d: 'M7.1001,12.09996c-2.80029,0-5.1001-2.2002-5.1001-5s2.2998-5.1001,5.1001-5.1001 s5.1001,2.30029,5.1001,5.1001S9.90039,12.09996,7.1001,12.09996z M12.7002,11.30016c0.89941-1.2002,1.39941-2.6001,1.39941-4.2002 c0-3.8999-3.09961-7.1001-6.99951-7.1001S0,3.20006,0,7.09996c0,3.90039,3.2002,7.09961,7.1001,7.09961 c1.6001,0,3.1001-0.5,4.19971-1.39941l3,3c0.2002,0.20019,0.5,0.2998,0.7002,0.2998s0.5-0.09961,0.7002-0.2998 c0.39941-0.40039,0.39941-1,0-1.40039L12.7002,11.30016z M8,3.99986H6v2H4v2h2v2.00049h2V7.99986h2v-2H8V3.99986z'
    })
  );
}

ZoomIn.propTypes = {
  size: _propTypes2.default.oneOf(['xlarge', 'large', 'medium', 'small']),
  color: _propTypes2.default.string
};

exports.default = ZoomIn;
ZoomIn.__docgenInfo = {
  'description': '',
  'methods': [],
  'displayName': 'ZoomIn',
  'props': {
    'color': {
      'defaultValue': {
        'value': '\'currentColor\'',
        'computed': false
      },
      'type': {
        'name': 'string'
      },
      'required': false,
      'description': ''
    },
    'size': {
      'type': {
        'name': 'enum',
        'value': [{
          'value': '\'xlarge\'',
          'computed': false
        }, {
          'value': '\'large\'',
          'computed': false
        }, {
          'value': '\'medium\'',
          'computed': false
        }, {
          'value': '\'small\'',
          'computed': false
        }]
      },
      'required': false,
      'description': ''
    }
  }
};