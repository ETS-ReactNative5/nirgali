'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _helper = require('../helper');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; } // Nucleo Icon, see LICENCE.md
// https://nucleoapp.com/license

function Deposition(_ref) {
  var _ref$color = _ref.color,
      color = _ref$color === undefined ? 'currentColor' : _ref$color,
      size = _ref.size,
      svgProps = _objectWithoutProperties(_ref, ['color', 'size']);

  return _react2.default.createElement(
    'svg',
    _extends({
      xmlns: 'http://www.w3.org/2000/svg',
      viewBox: '0 0 16 16'
    }, (0, _helper.getIconSize)(size), svgProps),
    _react2.default.createElement('path', {
      fill: color,
      d: 'M15,4.49986v1.75h-1.40039l1.05078,2.80029c0.52441,1.3125,0.34961,2.7998-0.4375,4.02441 c-0.78809,1.22559-2.1875,1.92578-3.58789,1.92578H5.2876c-1.3999,0-2.7124-0.7002-3.5-1.92578 C1,11.84996,0.8252,10.36266,1.3501,9.05016l1.0498-2.80029H1v-1.75H15z M5.8125,0.99986c0.72461,0,1.3125,0.58789,1.3125,1.3125 s-0.58789,1.3125-1.3125,1.3125S4.5,3.03697,4.5,2.31236S5.08789,0.99986,5.8125,0.99986z M10.1875,0.99986 c0.72461,0,1.3125,0.58789,1.3125,1.3125s-0.58789,1.3125-1.3125,1.3125S8.875,3.03697,8.875,2.31236 S9.46289,0.99986,10.1875,0.99986z'
    })
  );
}

Deposition.propTypes = {
  size: _propTypes2.default.oneOf(['xlarge', 'large', 'medium', 'small']),
  color: _propTypes2.default.string
};

exports.default = Deposition;
Deposition.__docgenInfo = {
  'description': '',
  'methods': [],
  'displayName': 'Deposition',
  'props': {
    'color': {
      'defaultValue': {
        'value': '\'currentColor\'',
        'computed': false
      },
      'type': {
        'name': 'string'
      },
      'required': false,
      'description': ''
    },
    'size': {
      'type': {
        'name': 'enum',
        'value': [{
          'value': '\'xlarge\'',
          'computed': false
        }, {
          'value': '\'large\'',
          'computed': false
        }, {
          'value': '\'medium\'',
          'computed': false
        }, {
          'value': '\'small\'',
          'computed': false
        }]
      },
      'required': false,
      'description': ''
    }
  }
};