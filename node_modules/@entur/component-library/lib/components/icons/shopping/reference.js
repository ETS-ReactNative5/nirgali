'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _helper = require('../helper');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; } // Nucleo Icon, see LICENCE.md
// https://nucleoapp.com/license

function Reference(_ref) {
  var _ref$color = _ref.color,
      color = _ref$color === undefined ? 'currentColor' : _ref$color,
      size = _ref.size,
      svgProps = _objectWithoutProperties(_ref, ['color', 'size']);

  return _react2.default.createElement(
    'svg',
    _extends({
      xmlns: 'http://www.w3.org/2000/svg',
      viewBox: '0 0 16 16'
    }, (0, _helper.getIconSize)(size), svgProps),
    _react2.default.createElement('path', {
      fill: color,
      d: 'M4.2666,5.33336c-0.58936,0-1.06641-0.47754-1.06641-1.06689S3.67725,3.20006,4.2666,3.20006 S5.3335,3.67711,5.3335,4.26647S4.85596,5.33336,4.2666,5.33336 M15.84375,8.68932l-8.5332-8.5332 c-0.1001-0.1001-0.23535-0.15625-0.37744-0.15625H2.6665c-0.1416,0-0.27734,0.05615-0.37695,0.15625l-2.1333,2.1333 C0.05615,2.38951,0,2.52525,0,2.66686v4.2666C0,7.07457,0.05615,7.2108,0.15625,7.31041l8.5332,8.53271 c0.104,0.10449,0.24072,0.15625,0.37695,0.15625c0.13672,0,0.27344-0.05176,0.37695-0.15625l6.40039-6.39941 C16.05176,9.23473,16.05176,8.89781,15.84375,8.68932'
    })
  );
}

Reference.propTypes = {
  size: _propTypes2.default.oneOf(['xlarge', 'large', 'medium', 'small']),
  color: _propTypes2.default.string
};

exports.default = Reference;
Reference.__docgenInfo = {
  'description': '',
  'methods': [],
  'displayName': 'Reference',
  'props': {
    'color': {
      'defaultValue': {
        'value': '\'currentColor\'',
        'computed': false
      },
      'type': {
        'name': 'string'
      },
      'required': false,
      'description': ''
    },
    'size': {
      'type': {
        'name': 'enum',
        'value': [{
          'value': '\'xlarge\'',
          'computed': false
        }, {
          'value': '\'large\'',
          'computed': false
        }, {
          'value': '\'medium\'',
          'computed': false
        }, {
          'value': '\'small\'',
          'computed': false
        }]
      },
      'required': false,
      'description': ''
    }
  }
};