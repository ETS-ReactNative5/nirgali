'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _helper = require('../helper');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; } // Nucleo Icon, see LICENCE.md
// https://nucleoapp.com/license

function tiltTransform(tilt) {
  switch (tilt) {
    case 'right':
      return 'rotate(45), translate(4, -8)';
    case 'left':
      return 'rotate(135), translate(-8, -19)';
  }
}

function Unlink(_ref) {
  var _ref$color = _ref.color,
      color = _ref$color === undefined ? 'currentColor' : _ref$color,
      size = _ref.size,
      tilt = _ref.tilt,
      svgProps = _objectWithoutProperties(_ref, ['color', 'size', 'tilt']);

  return _react2.default.createElement(
    'svg',
    _extends({
      xmlns: 'http://www.w3.org/2000/svg',
      viewBox: '0 0 16 16'
    }, (0, _helper.getIconSize)(size), svgProps),
    _react2.default.createElement('path', {
      fill: color,
      transform: tiltTransform(tilt),
      d: 'M11.688 6.078a.794.794 0 0 1-.208.52.794.794 0 0 1-.52.207.71.71 0 0 1-.727-.727l-.051-1.195c.051-.571-.208-1.143-.624-1.558s-.987-.676-1.61-.676c-1.143 0-2.182 1.04-2.182 2.182v1.247c0 .415-.312.727-.727.727s-.728-.312-.728-.727l.052-1.195c-.052-.987.364-1.922 1.04-2.597S7.012 1.195 8 1.246c.987-.051 1.922.364 2.597 1.04s1.091 1.61 1.091 2.545v1.247zm-1.455 3.844c0-.416.26-.78.676-.78s.727.312.727.728v1.247c.052.987-.364 1.922-1.039 2.597S8.987 14.805 8 14.754c-.987.051-1.922-.364-2.598-1.04s-1.09-1.61-1.039-2.597l-.052-1.195c0-.416.312-.727.728-.727s.727.311.727.727l.052 1.195c-.052.571.208 1.143.623 1.558s.987.676 1.61.676c1.144 0 2.182-1.04 2.182-2.182V9.922zm-2.96-4.104A.71.71 0 0 1 8 5.091a.71.71 0 0 1 .727.727v4.364c0 .208-.104.415-.208.52s-.311.207-.52.207a.71.71 0 0 1-.727-.727V5.818zm-4.468 2.91H.727A.71.71 0 0 1 0 8a.71.71 0 0 1 .727-.727h2.078A.71.71 0 0 1 3.532 8a.667.667 0 0 1-.208.52.667.667 0 0 1-.52.207zm10.39-1.455h2.077A.71.71 0 0 1 16 8c0 .208-.104.416-.208.52s-.312.207-.52.207h-2.077A.71.71 0 0 1 12.467 8a.71.71 0 0 1 .728-.727z'
    })
  );
}

Unlink.propTypes = {
  color: _propTypes2.default.string,
  size: _propTypes2.default.oneOf(['xlarge', 'large', 'medium', 'small']),
  tilt: _propTypes2.default.oneOf(['left', 'right'])
};

exports.default = Unlink;
Unlink.__docgenInfo = {
  'description': '',
  'methods': [],
  'displayName': 'Unlink',
  'props': {
    'color': {
      'defaultValue': {
        'value': '\'currentColor\'',
        'computed': false
      },
      'type': {
        'name': 'string'
      },
      'required': false,
      'description': ''
    },
    'size': {
      'type': {
        'name': 'enum',
        'value': [{
          'value': '\'xlarge\'',
          'computed': false
        }, {
          'value': '\'large\'',
          'computed': false
        }, {
          'value': '\'medium\'',
          'computed': false
        }, {
          'value': '\'small\'',
          'computed': false
        }]
      },
      'required': false,
      'description': ''
    },
    'tilt': {
      'type': {
        'name': 'enum',
        'value': [{
          'value': '\'left\'',
          'computed': false
        }, {
          'value': '\'right\'',
          'computed': false
        }]
      },
      'required': false,
      'description': ''
    }
  }
};