'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _helper = require('../helper');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; } // Nucleo Icon, see LICENCE.md
// https://nucleoapp.com/license

function Underline(_ref) {
  var _ref$color = _ref.color,
      color = _ref$color === undefined ? 'currentColor' : _ref$color,
      size = _ref.size,
      svgProps = _objectWithoutProperties(_ref, ['color', 'size']);

  return _react2.default.createElement(
    'svg',
    _extends({
      xmlns: 'http://www.w3.org/2000/svg',
      viewBox: '0 0 16 16'
    }, (0, _helper.getIconSize)(size), svgProps),
    _react2.default.createElement('path', {
      fill: color,
      d: 'M1,12.95836h14v2.04199H1V12.95836z M14.125,0.99986v0.875l-1.26562,0.63379 C12.5625,2.6566,12.375,2.95934,12.375,3.29088v3.83447c0,2.55664-2.20508,4.60742-4.8125,4.35352 C5.29004,11.25719,3.625,9.21422,3.625,6.93004V3.29088c0-0.33154-0.1875-0.63428-0.48389-0.78223l-1.2666-0.63379v-0.875H7.125 v0.875L5.85889,2.50865C5.56201,2.6566,5.375,2.95934,5.375,3.29088v3.83447c0,1.61865,1.47266,2.89941,3.14844,2.57422 C9.76953,9.45738,10.625,8.29186,10.625,7.02184V3.29088c0-0.33154-0.1875-0.63428-0.4834-0.78223L8.875,1.87486v-0.875H14.125z'
    })
  );
}

Underline.propTypes = {
  size: _propTypes2.default.oneOf(['xlarge', 'large', 'medium', 'small']),
  color: _propTypes2.default.string
};

exports.default = Underline;
Underline.__docgenInfo = {
  'description': '',
  'methods': [],
  'displayName': 'Underline',
  'props': {
    'color': {
      'defaultValue': {
        'value': '\'currentColor\'',
        'computed': false
      },
      'type': {
        'name': 'string'
      },
      'required': false,
      'description': ''
    },
    'size': {
      'type': {
        'name': 'enum',
        'value': [{
          'value': '\'xlarge\'',
          'computed': false
        }, {
          'value': '\'large\'',
          'computed': false
        }, {
          'value': '\'medium\'',
          'computed': false
        }, {
          'value': '\'small\'',
          'computed': false
        }]
      },
      'required': false,
      'description': ''
    }
  }
};