'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _helper = require('../helper');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; } // Nucleo Icon, see LICENCE.md
// https://nucleoapp.com/license

function directionTransform(direction) {
  switch (direction) {
    case 'down':
      return 'rotate(270), translate(-16, 0)';
    case 'up':
      return 'rotate(90), translate(0, -16)';
    case 'right':
      return 'rotate(180), translate(-16, -16)';
  }
}

function Arrow(_ref) {
  var _ref$color = _ref.color,
      color = _ref$color === undefined ? 'currentColor' : _ref$color,
      size = _ref.size,
      direction = _ref.direction,
      svgProps = _objectWithoutProperties(_ref, ['color', 'size', 'direction']);

  return _react2.default.createElement(
    'svg',
    _extends({
      xmlns: 'http://www.w3.org/2000/svg',
      viewBox: '0 0 16 16'
    }, (0, _helper.getIconSize)(size), svgProps),
    _react2.default.createElement('polygon', {
      fill: color,
      transform: directionTransform(direction),
      points: '6.7002,14.39977 8.1001,13.00035 3.7998,8.70006 16,8.70006 16,6.70006 3.7998,6.70006 8.1001,2.39977 6.7002,0.99986 0,7.70006'
    })
  );
}

Arrow.propTypes = {
  size: _propTypes2.default.oneOf(['xlarge', 'large', 'medium', 'small']),
  color: _propTypes2.default.string,
  direction: _propTypes2.default.oneOf(['up', 'down', 'left', 'right'])
};

exports.default = Arrow;
Arrow.__docgenInfo = {
  'description': '',
  'methods': [],
  'displayName': 'Arrow',
  'props': {
    'color': {
      'defaultValue': {
        'value': '\'currentColor\'',
        'computed': false
      },
      'type': {
        'name': 'string'
      },
      'required': false,
      'description': ''
    },
    'size': {
      'type': {
        'name': 'enum',
        'value': [{
          'value': '\'xlarge\'',
          'computed': false
        }, {
          'value': '\'large\'',
          'computed': false
        }, {
          'value': '\'medium\'',
          'computed': false
        }, {
          'value': '\'small\'',
          'computed': false
        }]
      },
      'required': false,
      'description': ''
    },
    'direction': {
      'type': {
        'name': 'enum',
        'value': [{
          'value': '\'up\'',
          'computed': false
        }, {
          'value': '\'down\'',
          'computed': false
        }, {
          'value': '\'left\'',
          'computed': false
        }, {
          'value': '\'right\'',
          'computed': false
        }]
      },
      'required': false,
      'description': ''
    }
  }
};