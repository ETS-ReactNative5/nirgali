'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _helper = require('../helper');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function Standing(_ref) {
  var _ref$color = _ref.color,
      color = _ref$color === undefined ? 'currentColor' : _ref$color,
      size = _ref.size,
      svgProps = _objectWithoutProperties(_ref, ['color', 'size']);

  return _react2.default.createElement(
    'svg',
    _extends({
      xmlns: 'http://www.w3.org/2000/svg',
      viewBox: '0 0 16 16'
    }, (0, _helper.getIconSize)(size), svgProps),
    _react2.default.createElement('path', { fill: color, d: 'M9.89 5.29l.701 3.36c.04.194-.06.387-.232.44l-.033.01c-.173.054-.357-.056-.416-.247L9.3 7.01l-.058 2.578-.117 4.118a.3.3 0 0 1-.3.294H8.51a.3.3 0 0 1-.3-.294l-.043-3.88h-.35l-.041 3.88a.3.3 0 0 1-.3.294h-.317a.301.301 0 0 1-.3-.294l-.123-4.323-.052-2.388-.593 1.858c-.06.191-.242.3-.416.247l-.033-.01c-.171-.053-.273-.246-.232-.44l.706-3.383s.118-.385.438-.5c.44-.16 2.668-.109 2.898-.017.26.106.392.34.44.54zM8 4.016c-.553 0-1-.451-1-1.007S7.447 2 8 2c.552 0 1 .452 1 1.008s-.448 1.007-1 1.007z' })
  );
}

Standing.propTypes = {
  size: _propTypes2.default.oneOf(['xlarge', 'large', 'medium', 'small']),
  color: _propTypes2.default.string
};

exports.default = Standing;
Standing.__docgenInfo = {
  'description': '',
  'methods': [],
  'displayName': 'Standing',
  'props': {
    'color': {
      'defaultValue': {
        'value': '\'currentColor\'',
        'computed': false
      },
      'type': {
        'name': 'string'
      },
      'required': false,
      'description': ''
    },
    'size': {
      'type': {
        'name': 'enum',
        'value': [{
          'value': '\'xlarge\'',
          'computed': false
        }, {
          'value': '\'large\'',
          'computed': false
        }, {
          'value': '\'medium\'',
          'computed': false
        }, {
          'value': '\'small\'',
          'computed': false
        }]
      },
      'required': false,
      'description': ''
    }
  }
};