'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _helper = require('../helper');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function Taxi(_ref) {
  var _ref$color = _ref.color,
      color = _ref$color === undefined ? 'currentColor' : _ref$color,
      size = _ref.size,
      svgProps = _objectWithoutProperties(_ref, ['color', 'size']);

  return _react2.default.createElement(
    'svg',
    _extends({
      xmlns: 'http://www.w3.org/2000/svg',
      viewBox: '0 0 16 16'
    }, (0, _helper.getIconSize)(size), svgProps),
    _react2.default.createElement('path', { fill: color, d: 'M12.801 9.784a.962.962 0 0 1-.97-.96.967.967 0 0 1 .97-.968.975.975 0 0 1 .97.969.97.97 0 0 1-.97.959zM3.46 6.76l.867-2.214c.105-.315.268-.543.649-.548H11.034c.378.005.539.233.65.548l.866 2.214H3.46zm-.25 3.023a.963.963 0 0 1-.971-.96.968.968 0 0 1 .97-.968.973.973 0 0 1 .97.969.968.968 0 0 1-.97.959zm10.526-2.955l-1.15-2.864c-.212-.54-.681-1.004-1.568-1.001H9.399v-.75c-.003-.298-.17-.448-.442-.446H7.07c-.276-.002-.44.148-.442.446v.75H4.983c-.88-.003-1.35.46-1.566 1.001L2.265 6.83c-.454.053-1.26.567-1.265 1.54v3.638h1.125v1.162c-.003 1.426 2.1 1.41 2.097 0v-1.162h7.557v1.162c.003 1.41 2.104 1.426 2.104 0v-1.162H15V8.37c.001-.974-.806-1.488-1.265-1.541z' })
  );
}

Taxi.propTypes = {
  size: _propTypes2.default.oneOf(['xlarge', 'large', 'medium', 'small']),
  color: _propTypes2.default.string
};

exports.default = Taxi;
Taxi.__docgenInfo = {
  'description': '',
  'methods': [],
  'displayName': 'Taxi',
  'props': {
    'color': {
      'defaultValue': {
        'value': '\'currentColor\'',
        'computed': false
      },
      'type': {
        'name': 'string'
      },
      'required': false,
      'description': ''
    },
    'size': {
      'type': {
        'name': 'enum',
        'value': [{
          'value': '\'xlarge\'',
          'computed': false
        }, {
          'value': '\'large\'',
          'computed': false
        }, {
          'value': '\'medium\'',
          'computed': false
        }, {
          'value': '\'small\'',
          'computed': false
        }]
      },
      'required': false,
      'description': ''
    }
  }
};