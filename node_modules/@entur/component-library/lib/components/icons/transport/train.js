'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _helper = require('../helper');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function Train(_ref) {
  var _ref$color = _ref.color,
      color = _ref$color === undefined ? 'currentColor' : _ref$color,
      size = _ref.size,
      svgProps = _objectWithoutProperties(_ref, ['color', 'size']);

  return _react2.default.createElement(
    'svg',
    _extends({
      xmlns: 'http://www.w3.org/2000/svg',
      viewBox: '0 0 16 16'
    }, (0, _helper.getIconSize)(size), svgProps),
    _react2.default.createElement('path', { fill: color, d: 'M14.637 11.801H0v.761h14.637a.38.38 0 1 0 0-.76zM15.714 7.726a.712.712 0 0 0-.104-.125c-.013-.014-.026-.029-.04-.041a6.556 6.556 0 0 1-.106-.109c-.36-.36-2.618-2.023-3.871-2.85-.41-.27-.868-.379-1.142-.379h-3.96l.901-.902a.434.434 0 0 0 .117-.297.401.401 0 0 0-.114-.278L5.837 1.16a.401.401 0 0 0-.566-.006.396.396 0 0 0-.006.563l1.29 1.312-1.18 1.181c.03.006.061.006.092.012H0v6.818h14.211a1 1 0 0 0 .842-.46c.631-.983.947-1.655.947-2.015 0-.317-.109-.604-.286-.84zm-2.9-.64c-.051.155-.197.196-.361.196h-.761c-.082 0-.212.012-.325-.072l-1.086-.767a.379.379 0 0 1 .229-.684h.76c.083 0 .163.027.23.077l1.182.89c.13.098.185.205.133.36z' })
  );
}

Train.propTypes = {
  size: _propTypes2.default.oneOf(['xlarge', 'large', 'medium', 'small']),
  color: _propTypes2.default.string
};

exports.default = Train;
Train.__docgenInfo = {
  'description': '',
  'methods': [],
  'displayName': 'Train',
  'props': {
    'color': {
      'defaultValue': {
        'value': '\'currentColor\'',
        'computed': false
      },
      'type': {
        'name': 'string'
      },
      'required': false,
      'description': ''
    },
    'size': {
      'type': {
        'name': 'enum',
        'value': [{
          'value': '\'xlarge\'',
          'computed': false
        }, {
          'value': '\'large\'',
          'computed': false
        }, {
          'value': '\'medium\'',
          'computed': false
        }, {
          'value': '\'small\'',
          'computed': false
        }]
      },
      'required': false,
      'description': ''
    }
  }
};