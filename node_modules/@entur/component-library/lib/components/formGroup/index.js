'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.FormGroup = FormGroup;
exports.FieldSetGroup = FieldSetGroup;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

require('./styles.css');

var _styles = {
  'rootClassName': 'entur-form-group',
  'entur-form-group': 'entur-form-group'
};

var _label = require('../label');

var _alertMessage = require('../alertMessage');

var _formControl = require('../formControl');

var _dropdown = require('../formControl/dropdown');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var propTypes = {
  id: _propTypes2.default.string,
  className: _propTypes2.default.string,
  title: _propTypes2.default.node,
  alertLabel: _propTypes2.default.string,
  alertLevel: _propTypes2.default.string,
  children: _propTypes2.default.node,
  variant: _propTypes2.default.oneOf(['primary', 'midnight'])
};

var CHILDREN_WHITELIST = [_formControl.TextField, _formControl.TextArea, _dropdown.DropDown];

function FormGroup(props) {
  var id = props.id,
      className = props.className,
      inputId = props.inputId,
      title = props.title,
      alertLevel = props.alertLevel,
      alertLabel = props.alertLabel,
      children = props.children,
      variant = props.variant;

  var combinedClassNames = (0, _classnames2.default)(_styles.rootClassName, className);

  var childrenArray = _react2.default.Children.toArray(children);
  var mappedChildren = childrenArray.map(function (child) {
    if (!CHILDREN_WHITELIST.includes(child.type)) {
      return child;
    }

    return _react2.default.cloneElement(child, {
      valid: child.props.valid || alertLevel,
      variant: child.props.variant || variant
    });
  });

  return _react2.default.createElement(
    'div',
    { id: id, className: combinedClassNames },
    title && _react2.default.createElement(
      _label.Label,
      { htmlFor: inputId, variant: variant },
      title
    ),
    mappedChildren,
    alertLabel && _react2.default.createElement(
      _alertMessage.AlertMessage,
      { variant: variant, level: alertLevel },
      alertLabel
    )
  );
}

FormGroup.propTypes = _extends({}, propTypes, {
  inputId: _propTypes2.default.string.isRequired
});

function FieldSetGroup(props) {
  var id = props.id,
      children = props.children,
      className = props.className,
      title = props.title,
      disabled = props.disabled,
      alertLevel = props.alertLevel,
      alertLabel = props.alertLabel,
      variant = props.variant;

  var combinedClassNames = (0, _classnames2.default)(_styles.rootClassName, className);

  var mappedChildren = _react2.default.Children.toArray(children).map(function (child) {
    return _react2.default.cloneElement(child, {
      variant: child.props.variant || variant
    });
  });

  return _react2.default.createElement(
    'fieldset',
    { id: id, className: combinedClassNames, disabled: disabled },
    title && _react2.default.createElement(
      _label.Legend,
      { variant: variant },
      title
    ),
    mappedChildren,
    alertLabel && _react2.default.createElement(
      _alertMessage.AlertMessage,
      { variant: variant, level: alertLevel },
      alertLabel
    )
  );
}

FieldSetGroup.propTypes = _extends({}, propTypes, {
  disabled: _propTypes2.default.bool
});
FormGroup.__docgenInfo = {
  'description': '',
  'methods': [],
  'displayName': 'FormGroup',
  'props': {
    'id': {
      'type': {
        'name': 'string'
      },
      'required': false,
      'description': ''
    },
    'className': {
      'type': {
        'name': 'string'
      },
      'required': false,
      'description': ''
    },
    'title': {
      'type': {
        'name': 'node'
      },
      'required': false,
      'description': ''
    },
    'alertLabel': {
      'type': {
        'name': 'string'
      },
      'required': false,
      'description': ''
    },
    'alertLevel': {
      'type': {
        'name': 'string'
      },
      'required': false,
      'description': ''
    },
    'children': {
      'type': {
        'name': 'node'
      },
      'required': false,
      'description': ''
    },
    'variant': {
      'type': {
        'name': 'enum',
        'value': [{
          'value': '\'primary\'',
          'computed': false
        }, {
          'value': '\'midnight\'',
          'computed': false
        }]
      },
      'required': false,
      'description': ''
    },
    'inputId': {
      'type': {
        'name': 'string'
      },
      'required': true,
      'description': ''
    }
  }
};
FieldSetGroup.__docgenInfo = {
  'description': '',
  'methods': [],
  'displayName': 'FieldSetGroup',
  'props': {
    'id': {
      'type': {
        'name': 'string'
      },
      'required': false,
      'description': ''
    },
    'className': {
      'type': {
        'name': 'string'
      },
      'required': false,
      'description': ''
    },
    'title': {
      'type': {
        'name': 'node'
      },
      'required': false,
      'description': ''
    },
    'alertLabel': {
      'type': {
        'name': 'string'
      },
      'required': false,
      'description': ''
    },
    'alertLevel': {
      'type': {
        'name': 'string'
      },
      'required': false,
      'description': ''
    },
    'children': {
      'type': {
        'name': 'node'
      },
      'required': false,
      'description': ''
    },
    'variant': {
      'type': {
        'name': 'enum',
        'value': [{
          'value': '\'primary\'',
          'computed': false
        }, {
          'value': '\'midnight\'',
          'computed': false
        }]
      },
      'required': false,
      'description': ''
    },
    'disabled': {
      'type': {
        'name': 'bool'
      },
      'required': false,
      'description': ''
    }
  }
};