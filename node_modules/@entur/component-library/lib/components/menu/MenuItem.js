'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.MenuItem = MenuItem;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _ = require('.');

require('./styles.css');

var _styles = {
  'itemClassName': 'entur-menu-item',
  'listClassName': 'entur-menu-list',
  'rootClassName': 'entur-menu',
  'entur-menu': 'entur-menu',
  'entur-menu-list': 'entur-menu-list',
  'entur-menu-item': 'entur-menu-item',
  'entur-menu-item__inner': 'entur-menu-item__inner',
  'entur-menu-item--nested': 'entur-menu-item--nested',
  'entur-menu-item--active': 'entur-menu-item--active',
  'entur-menu-item--disabled': 'entur-menu-item--disabled'
};

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var propTypes = {
  id: _propTypes2.default.string.isRequired,
  active: _propTypes2.default.bool,
  label: _propTypes2.default.node.isRequired,
  icon: _propTypes2.default.node,
  children: _propTypes2.default.node,
  disabled: _propTypes2.default.bool,
  onClick: _propTypes2.default.func,
  refCallback: _propTypes2.default.func
};

var innerClass = _styles.itemClassName + '__inner';

function getClassNames(_ref) {
  var _cx;

  var active = _ref.active,
      disabled = _ref.disabled,
      nested = _ref.nested;

  return (0, _classnames2.default)(_styles.itemClassName, (_cx = {}, _defineProperty(_cx, _styles.itemClassName + '--active', active), _defineProperty(_cx, _styles.itemClassName + '--disabled', disabled), _defineProperty(_cx, _styles.itemClassName + '--nested', nested), _cx));
}

function isActive(activeId, child) {
  if (child.props.id === activeId) return true;
  if (!child.props.children) return false;

  return _react2.default.Children.toArray(child.props.children).some(function (grandChild) {
    return isActive(activeId, grandChild);
  });
}

function MenuItem(props) {
  var id = props.id,
      children = props.children,
      disabled = props.disabled,
      label = props.label,
      icon = props.icon,
      onClick = props.onClick,
      refCallback = props.refCallback,
      rest = _objectWithoutProperties(props, ['id', 'children', 'disabled', 'label', 'icon', 'onClick', 'refCallback']);

  var activeId = (0, _react.useContext)(_.ActiveContext);
  var active = isActive(activeId, { props: props });

  var labelComponent = typeof label === 'string' ? _react2.default.createElement(
    'button',
    { disabled: disabled, onClick: onClick },
    icon,
    label
  ) : label;

  var classNames = getClassNames({ active: active, disabled: disabled, nested: Boolean(children) });

  return _react2.default.createElement(
    'li',
    _extends({}, rest, { ref: refCallback, className: classNames }),
    _react2.default.createElement(
      'div',
      { className: innerClass },
      labelComponent
    ),
    children && active ? children : null
  );
}

MenuItem.propTypes = propTypes;
MenuItem.__docgenInfo = {
  'description': '',
  'methods': [],
  'displayName': 'MenuItem',
  'props': {
    'id': {
      'type': {
        'name': 'string'
      },
      'required': true,
      'description': ''
    },
    'active': {
      'type': {
        'name': 'bool'
      },
      'required': false,
      'description': ''
    },
    'label': {
      'type': {
        'name': 'node'
      },
      'required': true,
      'description': ''
    },
    'icon': {
      'type': {
        'name': 'node'
      },
      'required': false,
      'description': ''
    },
    'children': {
      'type': {
        'name': 'node'
      },
      'required': false,
      'description': ''
    },
    'disabled': {
      'type': {
        'name': 'bool'
      },
      'required': false,
      'description': ''
    },
    'onClick': {
      'type': {
        'name': 'func'
      },
      'required': false,
      'description': ''
    },
    'refCallback': {
      'type': {
        'name': 'func'
      },
      'required': false,
      'description': ''
    }
  }
};