'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Pagination = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _chevron = require('../icons/arrows/chevron');

var _chevron2 = _interopRequireDefault(_chevron);

require('./styles.css');

var _styles = {
  'rootClassName': 'entur-pagination',
  'entur-pagination': 'entur-pagination',
  'entur-pagination-wrapper': 'entur-pagination-wrapper',
  'entur-pagination__number': 'entur-pagination__number',
  'entur-pagination__number--active': 'entur-pagination__number--active',
  'entur-pagination__prev': 'entur-pagination__prev',
  'entur-pagination__next': 'entur-pagination__next',
  'arrow-icon': 'arrow-icon',
  'disabled': 'disabled',
  'dot-dot-dot': 'dot-dot-dot',
  'entur-pagination--variant-midnight': 'entur-pagination--variant-midnight'
};

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var KEY = {
  ENTER: 13
};

function getKey(event) {
  return event.keyCode || event.which;
}

var Pagination = exports.Pagination = function (_Component) {
  _inherits(Pagination, _Component);

  function Pagination() {
    _classCallCheck(this, Pagination);

    return _possibleConstructorReturn(this, (Pagination.__proto__ || Object.getPrototypeOf(Pagination)).apply(this, arguments));
  }

  _createClass(Pagination, [{
    key: 'renderPrevButton',
    value: function renderPrevButton() {
      var _props = this.props,
          currentPage = _props.currentPage,
          onPageChange = _props.onPageChange;

      var prevDisabled = currentPage === 1;
      var prevPage = currentPage - 1;
      return _react2.default.createElement(
        'button',
        {
          tabIndex: prevDisabled ? -1 : 0,
          key: 'pagelink-prev',
          className: (0, _classnames2.default)([_styles.rootClassName + '__prev'], { disabled: prevDisabled }),
          onClick: function onClick() {
            onPageChange(prevPage);
          },
          onKeyPress: function onKeyPress(event) {
            if (!prevDisabled && getKey(event) === KEY.ENTER) {
              onPageChange(prevPage);
            }
          }
        },
        _react2.default.createElement(_chevron2.default, {
          className: 'arrow-icon',
          direction: 'left',
          height: 10,
          width: 10
        })
      );
    }
  }, {
    key: 'renderNextButton',
    value: function renderNextButton(nrOfPages) {
      var _props2 = this.props,
          currentPage = _props2.currentPage,
          onPageChange = _props2.onPageChange;

      var nextDisabled = currentPage === nrOfPages;
      var nextPage = currentPage + 1;
      return _react2.default.createElement(
        'button',
        {
          tabIndex: nextDisabled ? -1 : 0,
          key: 'pagelink-next',
          className: (0, _classnames2.default)([_styles.rootClassName + '__next'], { disabled: nextDisabled }),
          onClick: function onClick() {
            onPageChange(nextPage);
          },
          onKeyPress: function onKeyPress(event) {
            if (!nextDisabled && getKey(event) === KEY.ENTER) {
              onPageChange(nextPage);
            }
          }
        },
        _react2.default.createElement(_chevron2.default, {
          className: 'arrow-icon',
          direction: 'right',
          height: 10,
          width: 10
        })
      );
    }
  }, {
    key: 'renderPageButton',
    value: function renderPageButton(pageNumber) {
      var _props3 = this.props,
          currentPage = _props3.currentPage,
          onPageChange = _props3.onPageChange;

      return _react2.default.createElement(
        'button',
        {
          tabIndex: pageNumber === currentPage ? -1 : 0,
          key: 'pagelink-' + pageNumber,
          className: (0, _classnames2.default)([_styles.rootClassName + '__number'], _defineProperty({}, _styles.rootClassName + '__number--active', pageNumber === currentPage)),
          onClick: function onClick() {
            onPageChange(pageNumber);
          },
          onKeyPress: function onKeyPress(event) {
            if (getKey(event) === KEY.ENTER) {
              onPageChange(pageNumber);
            }
          }
        },
        pageNumber
      );
    }
  }, {
    key: 'renderDotDotDot',
    value: function renderDotDotDot(side) {
      return _react2.default.createElement(
        'div',
        { className: 'dot-dot-dot', key: 'dot-dot-dot-' + side },
        '...'
      );
    }
  }, {
    key: 'renderPages',
    value: function renderPages(nrOfPages) {
      var currentPage = this.props.currentPage;

      var buttons = [];
      var nrOfPagesTilStart = currentPage - 1;
      var nrOfPagesTilEnd = nrOfPages - currentPage;

      if (nrOfPages === 0) {
        buttons.push(this.renderPageButton(1));
      } else if (nrOfPages < 6) {
        for (var i = 1; i <= nrOfPages; i++) {
          buttons.push(this.renderPageButton(i));
        }
      } else {
        if (nrOfPagesTilStart < 3) {
          for (var _i = 1; _i < 4 && _i < nrOfPages; _i++) {
            buttons.push(this.renderPageButton(_i));
          }
        } else {
          buttons.push(this.renderPageButton(1));
          buttons.push(this.renderDotDotDot('left'));
        }

        if (nrOfPagesTilStart >= 3 && nrOfPagesTilEnd >= 3) {
          buttons.push(this.renderPageButton(currentPage));
        }

        if (nrOfPagesTilEnd < 3) {
          for (var _i2 = nrOfPages - 2; _i2 <= nrOfPages; _i2++) {
            buttons.push(this.renderPageButton(_i2));
          }
        } else {
          buttons.push(this.renderDotDotDot('right'));
          buttons.push(this.renderPageButton(nrOfPages));
        }
      }
      return buttons;
    }
  }, {
    key: 'render',
    value: function render() {
      var _props4 = this.props,
          className = _props4.className,
          collectionSize = _props4.collectionSize,
          pageSize = _props4.pageSize,
          variant = _props4.variant;

      var classNames = (0, _classnames2.default)(_styles.rootClassName, className, _defineProperty({}, _styles.rootClassName + '--variant-' + variant, variant));
      var nrOfPages = Math.ceil(collectionSize / pageSize);
      return _react2.default.createElement(
        'div',
        { className: classNames },
        _react2.default.createElement(
          'div',
          { className: _styles.rootClassName + '-wrapper' },
          this.renderPrevButton(),
          this.renderPages(nrOfPages),
          this.renderNextButton(nrOfPages)
        )
      );
    }
  }]);

  return Pagination;
}(_react.Component);

Pagination.propTypes = {
  currentPage: _propTypes2.default.number.isRequired,
  collectionSize: _propTypes2.default.number.isRequired,
  pageSize: _propTypes2.default.number.isRequired,
  onPageChange: _propTypes2.default.func.isRequired,
  className: _propTypes2.default.string,
  variant: _propTypes2.default.oneOf(['midnight'])
};

Pagination.defaultProps = {
  onPageChange: function onPageChange() {}
};
Pagination.__docgenInfo = {
  'description': '',
  'methods': [{
    'name': 'renderPrevButton',
    'docblock': null,
    'modifiers': [],
    'params': [],
    'returns': null
  }, {
    'name': 'renderNextButton',
    'docblock': null,
    'modifiers': [],
    'params': [{
      'name': 'nrOfPages',
      'type': null
    }],
    'returns': null
  }, {
    'name': 'renderPageButton',
    'docblock': null,
    'modifiers': [],
    'params': [{
      'name': 'pageNumber',
      'type': null
    }],
    'returns': null
  }, {
    'name': 'renderDotDotDot',
    'docblock': null,
    'modifiers': [],
    'params': [{
      'name': 'side',
      'type': null
    }],
    'returns': null
  }, {
    'name': 'renderPages',
    'docblock': null,
    'modifiers': [],
    'params': [{
      'name': 'nrOfPages',
      'type': null
    }],
    'returns': null
  }],
  'displayName': 'Pagination',
  'props': {
    'onPageChange': {
      'defaultValue': {
        'value': '() => {}',
        'computed': false
      },
      'type': {
        'name': 'func'
      },
      'required': false,
      'description': ''
    },
    'currentPage': {
      'type': {
        'name': 'number'
      },
      'required': true,
      'description': ''
    },
    'collectionSize': {
      'type': {
        'name': 'number'
      },
      'required': true,
      'description': ''
    },
    'pageSize': {
      'type': {
        'name': 'number'
      },
      'required': true,
      'description': ''
    },
    'className': {
      'type': {
        'name': 'string'
      },
      'required': false,
      'description': ''
    },
    'variant': {
      'type': {
        'name': 'enum',
        'value': [{
          'value': '\'midnight\'',
          'computed': false
        }]
      },
      'required': false,
      'description': ''
    }
  }
};