'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.CheckboxGroup = CheckboxGroup;
exports.RadioGroup = RadioGroup;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _index = require('./index');

var _panel = require('./panel');

require('./group.css');

var _group = {
  'groupClassName': 'entur-radio-checkbox-group',
  'entur-radio-checkbox-group': 'entur-radio-checkbox-group',
  'entur-radio-checkbox-group--horizontal': 'entur-radio-checkbox-group--horizontal',
  'entur-radio-checkbox': 'entur-radio-checkbox',
  'entur-radio-checkbox-group--vertical': 'entur-radio-checkbox-group--vertical',
  'entur-radio-panel': 'entur-radio-panel',
  'entur-radio-panel--variant-default': 'entur-radio-panel--variant-default',
  'entur-radio-panel--variant-midnight': 'entur-radio-panel--variant-midnight'
};

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var CHECKBOX_WHITE_LIST = [_index.Checkbox, _panel.CheckboxPanel];
var RADIO_WHITE_LIST = [_index.Radio, _panel.RadioPanel];

function getClassNames(className, direction) {
  return (0, _classnames2.default)(_group.groupClassName, className, _defineProperty({}, _group.groupClassName + '--' + direction, direction));
}

function ensureCorrectType(child, MustBeOfType) {
  if (child && MustBeOfType.every(function (type) {
    return child.type !== type;
  })) {
    var calleeName = 'Group';
    var allowedTypesNames = MustBeOfType.map(function (_ref) {
      var name = _ref.name;
      return name;
    }).join(', ');
    throw new Error(calleeName + ' only allow children of types ' + allowedTypesNames);
  }
}

function CheckboxGroup(props) {
  var id = props.id,
      onChange = props.onChange,
      direction = props.direction,
      className = props.className,
      children = props.children,
      rest = _objectWithoutProperties(props, ['id', 'onChange', 'direction', 'className', 'children']);

  var classNames = getClassNames(className, direction);

  return _react2.default.createElement(
    'div',
    _extends({ id: id, className: classNames }, rest),
    _react.Children.map(children, function (child, index) {
      ensureCorrectType(child, CHECKBOX_WHITE_LIST);

      if (!child) {
        return child;
      }

      return (0, _react.cloneElement)(child, {
        id: id + '-' + index,
        onChange: onChange
      });
    })
  );
}

CheckboxGroup.propTypes = {
  id: _propTypes2.default.string.isRequired,
  children: _propTypes2.default.node.isRequired,
  className: _propTypes2.default.string,
  onChange: _propTypes2.default.func,
  direction: _propTypes2.default.oneOf(['horizontal', 'vertical'])
};

CheckboxGroup.defaultProps = {
  direction: 'vertical'
};

function RadioGroup(props) {
  var id = props.id,
      name = props.name,
      value = props.value,
      onChange = props.onChange,
      direction = props.direction,
      className = props.className,
      children = props.children,
      rest = _objectWithoutProperties(props, ['id', 'name', 'value', 'onChange', 'direction', 'className', 'children']);

  var classNames = getClassNames(className, direction);

  return _react2.default.createElement(
    'div',
    _extends({ id: id, className: classNames }, rest),
    _react.Children.map(children, function (child, index) {
      ensureCorrectType(child, RADIO_WHITE_LIST);

      if (!child) {
        return child;
      }

      return (0, _react.cloneElement)(child, {
        id: id + '-' + index,
        name: name,
        onChange: onChange,
        checked: child.props.value === value
      });
    })
  );
}

RadioGroup.propTypes = {
  name: _propTypes2.default.string.isRequired,
  onChange: _propTypes2.default.func,
  direction: _propTypes2.default.oneOf(['horizontal', 'vertical']),
  value: _propTypes2.default.string.isRequired,
  id: _propTypes2.default.string.isRequired,
  className: _propTypes2.default.string,
  children: _propTypes2.default.node.isRequired
};

RadioGroup.defaultProps = {
  direction: 'vertical'
};
CheckboxGroup.__docgenInfo = {
  'description': '',
  'methods': [],
  'displayName': 'CheckboxGroup',
  'props': {
    'direction': {
      'defaultValue': {
        'value': '\'vertical\'',
        'computed': false
      },
      'type': {
        'name': 'enum',
        'value': [{
          'value': '\'horizontal\'',
          'computed': false
        }, {
          'value': '\'vertical\'',
          'computed': false
        }]
      },
      'required': false,
      'description': ''
    },
    'id': {
      'type': {
        'name': 'string'
      },
      'required': true,
      'description': ''
    },
    'children': {
      'type': {
        'name': 'node'
      },
      'required': true,
      'description': ''
    },
    'className': {
      'type': {
        'name': 'string'
      },
      'required': false,
      'description': ''
    },
    'onChange': {
      'type': {
        'name': 'func'
      },
      'required': false,
      'description': ''
    }
  }
};
RadioGroup.__docgenInfo = {
  'description': '',
  'methods': [],
  'displayName': 'RadioGroup',
  'props': {
    'direction': {
      'defaultValue': {
        'value': '\'vertical\'',
        'computed': false
      },
      'type': {
        'name': 'enum',
        'value': [{
          'value': '\'horizontal\'',
          'computed': false
        }, {
          'value': '\'vertical\'',
          'computed': false
        }]
      },
      'required': false,
      'description': ''
    },
    'name': {
      'type': {
        'name': 'string'
      },
      'required': true,
      'description': ''
    },
    'onChange': {
      'type': {
        'name': 'func'
      },
      'required': false,
      'description': ''
    },
    'value': {
      'type': {
        'name': 'string'
      },
      'required': true,
      'description': ''
    },
    'id': {
      'type': {
        'name': 'string'
      },
      'required': true,
      'description': ''
    },
    'className': {
      'type': {
        'name': 'string'
      },
      'required': false,
      'description': ''
    },
    'children': {
      'type': {
        'name': 'node'
      },
      'required': true,
      'description': ''
    }
  }
};