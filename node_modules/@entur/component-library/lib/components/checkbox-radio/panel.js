'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

exports.RadioPanel = RadioPanel;
exports.CheckboxPanel = CheckboxPanel;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _checkboxRadio = require('../checkbox-radio');

require('./panel.css');

var _panel = {
  'checkMarkClassName': 'entur-radio-panel__checkmark',
  'labelClassName': 'entur-radio-panel__label',
  'labelsClassName': 'entur-radio-panel__labels',
  'radioPanelClassName': 'entur-radio-panel',
  'entur-radio-panel': 'entur-radio-panel',
  'entur-radio-panel--with-checkmark': 'entur-radio-panel--with-checkmark',
  'entur-radio-panel--variant-default': 'entur-radio-panel--variant-default',
  'entur-radio-panel--checked': 'entur-radio-panel--checked',
  'entur-radio-panel__checkmark': 'entur-radio-panel__checkmark',
  'entur-radio-panel--variant-midnight': 'entur-radio-panel--variant-midnight',
  'entur-radio-panel--size-md': 'entur-radio-panel--size-md',
  'entur-radio-panel--size-lg': 'entur-radio-panel--size-lg',
  'entur-radio-panel__labels': 'entur-radio-panel__labels'
};

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var propTypes = {
  label: _propTypes2.default.string,
  secondLabel: _propTypes2.default.string,
  thirdLabel: _propTypes2.default.string,
  className: _propTypes2.default.string,
  variant: _propTypes2.default.oneOf(['default', 'midnight']),
  checked: _propTypes2.default.bool,
  children: _propTypes2.default.node,
  onChange: _propTypes2.default.func,
  size: _propTypes2.default.oneOf(['md', 'lg'])
};

var defaultProps = {
  variant: 'default',
  size: 'md'
};

var Panel = function (_Component) {
  _inherits(Panel, _Component);

  function Panel() {
    _classCallCheck(this, Panel);

    return _possibleConstructorReturn(this, (Panel.__proto__ || Object.getPrototypeOf(Panel)).apply(this, arguments));
  }

  _createClass(Panel, [{
    key: 'renderLabel',
    value: function renderLabel(label, key) {
      if (!label) {
        return null;
      }

      return _react2.default.createElement(
        'div',
        { key: key, className: _panel.labelClassName },
        label
      );
    }
  }, {
    key: 'renderLabels',
    value: function renderLabels() {
      var _props = this.props,
          label = _props.label,
          secondLabel = _props.secondLabel,
          thirdLabel = _props.thirdLabel,
          children = _props.children;

      var showLabels = Boolean(label || secondLabel || thirdLabel);

      return _react2.default.createElement(
        _react.Fragment,
        null,
        showLabels && _react2.default.createElement(
          'div',
          { className: _panel.labelsClassName },
          [label, secondLabel, thirdLabel].map(this.renderLabel)
        ),
        children
      );
    }
  }, {
    key: 'render',
    value: function render() {
      var _cx;

      var _props2 = this.props,
          className = _props2.className,
          value = _props2.value,
          _props2$variant = _props2.variant,
          variant = _props2$variant === undefined ? '' : _props2$variant,
          inputType = _props2.inputType,
          checked = _props2.checked,
          size = _props2.size,
          onChange = _props2.onChange,
          label = _props2.label,
          secondLabel = _props2.secondLabel,
          thirdLabel = _props2.thirdLabel,
          children = _props2.children,
          disabled = _props2.disabled,
          rest = _objectWithoutProperties(_props2, ['className', 'value', 'variant', 'inputType', 'checked', 'size', 'onChange', 'label', 'secondLabel', 'thirdLabel', 'children', 'disabled']);

      var classNames = (0, _classnames2.default)(_panel.radioPanelClassName, (_cx = {}, _defineProperty(_cx, _panel.radioPanelClassName + '--with-checkmark', onChange), _defineProperty(_cx, _panel.radioPanelClassName + '--checked', onChange && checked), _defineProperty(_cx, _panel.radioPanelClassName + '--variant-' + variant, variant), _defineProperty(_cx, _panel.radioPanelClassName + '--size-' + size, size), _cx), className);

      if (onChange) {
        var JustInput = inputType === 'radio' ? _checkboxRadio.JustRadio : _checkboxRadio.JustCheckbox;

        return _react2.default.createElement(
          'label',
          _extends({ className: classNames }, rest),
          this.renderLabels(),
          _react2.default.createElement(JustInput, {
            className: _panel.checkMarkClassName,
            variant: 'midnight',
            size: size,
            checked: checked,
            onChange: onChange,
            value: value,
            disabled: disabled
          })
        );
      }

      return _react2.default.createElement(
        'div',
        { className: classNames },
        this.renderLabels()
      );
    }
  }]);

  return Panel;
}(_react.Component);

Panel.propTypes = _extends({}, propTypes, {
  inputType: _propTypes2.default.oneOf(['checkbox', 'radio']).isRequired
});

function RadioPanel(props) {
  return _react2.default.createElement(Panel, _extends({}, props, { inputType: 'radio' }));
}

RadioPanel.propTypes = propTypes;
RadioPanel.defaultProps = defaultProps;

function CheckboxPanel(props) {
  return _react2.default.createElement(Panel, _extends({}, props, { inputType: 'checkbox' }));
}

CheckboxPanel.propTypes = propTypes;
CheckboxPanel.defaultProps = defaultProps;
RadioPanel.__docgenInfo = {
  'description': '',
  'methods': [],
  'displayName': 'RadioPanel',
  'props': {
    'variant': {
      'defaultValue': {
        'value': '\'default\'',
        'computed': false
      },
      'type': {
        'name': 'enum',
        'value': [{
          'value': '\'default\'',
          'computed': false
        }, {
          'value': '\'midnight\'',
          'computed': false
        }]
      },
      'required': false,
      'description': ''
    },
    'size': {
      'defaultValue': {
        'value': '\'md\'',
        'computed': false
      },
      'type': {
        'name': 'enum',
        'value': [{
          'value': '\'md\'',
          'computed': false
        }, {
          'value': '\'lg\'',
          'computed': false
        }]
      },
      'required': false,
      'description': ''
    },
    'label': {
      'type': {
        'name': 'string'
      },
      'required': false,
      'description': ''
    },
    'secondLabel': {
      'type': {
        'name': 'string'
      },
      'required': false,
      'description': ''
    },
    'thirdLabel': {
      'type': {
        'name': 'string'
      },
      'required': false,
      'description': ''
    },
    'className': {
      'type': {
        'name': 'string'
      },
      'required': false,
      'description': ''
    },
    'checked': {
      'type': {
        'name': 'bool'
      },
      'required': false,
      'description': ''
    },
    'children': {
      'type': {
        'name': 'node'
      },
      'required': false,
      'description': ''
    },
    'onChange': {
      'type': {
        'name': 'func'
      },
      'required': false,
      'description': ''
    }
  }
};
CheckboxPanel.__docgenInfo = {
  'description': '',
  'methods': [],
  'displayName': 'CheckboxPanel',
  'props': {
    'variant': {
      'defaultValue': {
        'value': '\'default\'',
        'computed': false
      },
      'type': {
        'name': 'enum',
        'value': [{
          'value': '\'default\'',
          'computed': false
        }, {
          'value': '\'midnight\'',
          'computed': false
        }]
      },
      'required': false,
      'description': ''
    },
    'size': {
      'defaultValue': {
        'value': '\'md\'',
        'computed': false
      },
      'type': {
        'name': 'enum',
        'value': [{
          'value': '\'md\'',
          'computed': false
        }, {
          'value': '\'lg\'',
          'computed': false
        }]
      },
      'required': false,
      'description': ''
    },
    'label': {
      'type': {
        'name': 'string'
      },
      'required': false,
      'description': ''
    },
    'secondLabel': {
      'type': {
        'name': 'string'
      },
      'required': false,
      'description': ''
    },
    'thirdLabel': {
      'type': {
        'name': 'string'
      },
      'required': false,
      'description': ''
    },
    'className': {
      'type': {
        'name': 'string'
      },
      'required': false,
      'description': ''
    },
    'checked': {
      'type': {
        'name': 'bool'
      },
      'required': false,
      'description': ''
    },
    'children': {
      'type': {
        'name': 'node'
      },
      'required': false,
      'description': ''
    },
    'onChange': {
      'type': {
        'name': 'func'
      },
      'required': false,
      'description': ''
    }
  }
};