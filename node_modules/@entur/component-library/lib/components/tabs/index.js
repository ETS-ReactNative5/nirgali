'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Tabs = Tabs;

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _tab = require('./tab');

require('./styles.css');

var _styles = {
  'rootClassName': 'entur-tabs',
  'tabHeaderClassName': 'entur-tab-header',
  'tabHeadersClassName': 'entur-tab-headers-list',
  'entur-tabs': 'entur-tabs',
  'entur-tab-headers-list': 'entur-tab-headers-list',
  'entur-tab-header': 'entur-tab-header',
  'entur-tab-header--selected': 'entur-tab-header--selected',
  'entur-tab-header--disabled': 'entur-tab-header--disabled',
  'margin-block': 'margin-block'
};

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function Tabs(_ref) {
  var selected = _ref.selected,
      onChange = _ref.onChange,
      className = _ref.className,
      children = _ref.children;

  var childrenArray = _react2.default.Children.toArray(children);

  var filteredTabHeaders = childrenArray.filter(function (child) {
    return child.type === _tab.Tab;
  });
  var tabHeaders = filteredTabHeaders.map(function (tab, i) {
    var _cx;

    var _tab$props = tab.props,
        disabled = _tab$props.disabled,
        label = _tab$props.label,
        value = _tab$props.value;

    var tabHeaderClassNames = (0, _classnames2.default)(_styles.tabHeaderClassName, (_cx = {}, _defineProperty(_cx, _styles.tabHeaderClassName + '--selected', selected === value), _defineProperty(_cx, _styles.tabHeaderClassName + '--disabled', disabled), _cx));
    return _react2.default.createElement(
      _react.Fragment,
      { key: i },
      _react2.default.createElement(
        'div',
        {
          onClick: function onClick() {
            return !disabled && onChange(value);
          },
          className: tabHeaderClassNames
        },
        label
      ),
      i + 1 !== filteredTabHeaders.length && _react2.default.createElement('div', { className: 'margin-block' })
    );
  });
  var selectedTab = childrenArray.find(function (tab) {
    return selected === tab.props.value;
  });
  var classNames = (0, _classnames2.default)(_styles.rootClassName, className);
  return _react2.default.createElement(
    'div',
    { className: classNames },
    _react2.default.createElement(
      'div',
      { className: _styles.tabHeadersClassName },
      tabHeaders
    ),
    selectedTab && selectedTab
  );
}

Tabs.propTypes = {
  className: _propTypes2.default.string,
  selected: _propTypes2.default.string.isRequired,
  onChange: _propTypes2.default.func,
  children: _propTypes2.default.oneOfType([_propTypes2.default.arrayOf(_propTypes2.default.node), _propTypes2.default.node])
};
Tabs.defaultProps = {
  onChange: function onChange() {}
};
Tabs.__docgenInfo = {
  'description': '',
  'methods': [],
  'displayName': 'Tabs',
  'props': {
    'onChange': {
      'defaultValue': {
        'value': '() => {}',
        'computed': false
      },
      'type': {
        'name': 'func'
      },
      'required': false,
      'description': ''
    },
    'className': {
      'type': {
        'name': 'string'
      },
      'required': false,
      'description': ''
    },
    'selected': {
      'type': {
        'name': 'string'
      },
      'required': true,
      'description': ''
    },
    'children': {
      'type': {
        'name': 'union',
        'value': [{
          'name': 'arrayOf',
          'value': {
            'name': 'node'
          }
        }, {
          'name': 'node'
        }]
      },
      'required': false,
      'description': ''
    }
  }
};