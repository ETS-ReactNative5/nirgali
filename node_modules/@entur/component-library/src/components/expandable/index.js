import React, { useState } from 'react';
import PropTypes from 'prop-types';
import cx from 'classnames';

import Chevron from '../icons/arrows/chevron';

import { rootClassName } from './styles.scss';

function getIcon(expanded) {
  const direction = expanded ? 'up' : 'down';

  return (
    <Chevron direction={direction} height="14" width="14" />
  );
}

function getExpandedHandlers(expanded, onHeaderClick, disabled, defaultExpanded) {
  if (disabled) return [expanded];
  if (onHeaderClick !== undefined) return [ expanded, onHeaderClick ];
  const [ expandedState, updatedExpandedState ] = useState(defaultExpanded);
  return [ expandedState, () => updatedExpandedState(!expandedState) ];
}

export function Expandable(props) {
  const {
    className,
    icon,
    title,
    disabled,
    children,
    variant,
    size,
    expanded,
    onHeaderClick,
    defaultExpanded,
    ...rest
  } = props;

  const [
    expandedState,
    headerClickHandler,
  ] = getExpandedHandlers(expanded, onHeaderClick, disabled, defaultExpanded);

  const classNames = cx(
    rootClassName,
    `${rootClassName}--variant-${variant}`,
    `${rootClassName}--size-${size}`,
    {
      [`${rootClassName}--disabled`]: disabled,
      [`${rootClassName}--expanded`]: expandedState,
    },
    className,
  );

  const headerClassNames = cx(
    `${rootClassName}__header`, {
      [`${rootClassName}__header--expanded`]: expandedState,
      [`${rootClassName}__header--disabled`]: disabled,
    });

  return (
    <div className={classNames} {...rest}>
      <div className={headerClassNames} onClick={headerClickHandler}>
        <span>
          {title}
        </span>

        { icon !== null &&
          <div className={`${rootClassName}__icon`}>
            {icon || getIcon(expandedState)}
          </div>
        }

      </div>
      { expandedState &&
        <div className={`${rootClassName}__content`}>
          {children}
        </div>
      }
    </div>
  );
}

Expandable.propTypes = {
  children: PropTypes.node,
  className: PropTypes.string,
  defaultExpanded: PropTypes.bool,
  disabled: PropTypes.bool,
  expanded: PropTypes.bool,
  icon: PropTypes.node,
  onHeaderClick: PropTypes.func,
  title: PropTypes.node,
  size: PropTypes.oneOf(['md', 'lg']),
  variant: PropTypes.oneOf(['default', 'midnight']),
};

Expandable.defaultProps = {
  defaultExpanded: false,
  size: 'md',
  variant: 'default',
};
