import React, { useState } from 'react';
import PropTypes from 'prop-types';
import cx from 'classnames';

import { groupClassName } from './styles.scss';

function isDefined(whatever) {
  return whatever !== undefined;
}

function cloneChildren(children, getPropsUpdates) {
  return React.Children.toArray(children).map(child => {
    return React.cloneElement(child, getPropsUpdates(child));
  });
}

export function ExpandableGroup(props) {
  const { className, children, icon, disabled, size, variant } = props;
  const [ expanded, setExpanded ] = useState();

  const classNames = cx(
    groupClassName,
    `${groupClassName}--variant-${variant}`,
    className,
  );

  const expandables = cloneChildren(children, child => ({
    icon: isDefined(icon) ? icon : child.props.icon,
    disabled: isDefined(disabled) ? disabled : child.props.disabled,
    size,
    variant,
    expanded: child.key === expanded,
    onHeaderClick: () => setExpanded(expanded !== child.key ? child.key : undefined),
  }));

  return (
    <div className={classNames}>
      { expandables }
    </div>
  );
}

ExpandableGroup.propTypes = {
  children: PropTypes.node,
  className: PropTypes.string,
  disabled: PropTypes.bool,
  icon: PropTypes.node,
  size: PropTypes.oneOf(['md', 'lg']),
  variant: PropTypes.oneOf(['default', 'midnight']),
};
