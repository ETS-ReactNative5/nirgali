import React, { Component } from 'react';
import propTypes from 'prop-types';
import cx from 'classnames';

import Chevron from '../icons/arrows/chevron';

import { rootClassName } from './styles.scss';

const KEY = {
  ENTER: 13,
};

function getKey(event) {
  return event.keyCode || event.which;
}

export class Pagination extends Component {
  renderPrevButton() {
    const { currentPage, onPageChange } = this.props;
    const prevDisabled = currentPage === 1;
    const prevPage = currentPage - 1;
    return (
      <button
        tabIndex={prevDisabled ? -1 : 0}
        key={'pagelink-prev'}
        className={cx([rootClassName + '__prev'], { disabled: prevDisabled })}
        onClick={() => {
          onPageChange(prevPage);
        }}
        onKeyPress={event => {
          if (!prevDisabled && getKey(event) === KEY.ENTER) {
            onPageChange(prevPage);
          }
        }}
      >
        <Chevron
          className="arrow-icon"
          direction="left"
          height={10}
          width={10}
        />
      </button>
    );
  }

  renderNextButton(nrOfPages) {
    const { currentPage, onPageChange } = this.props;
    const nextDisabled = currentPage === nrOfPages;
    const nextPage = currentPage + 1;
    return (
      <button
        tabIndex={nextDisabled ? -1 : 0}
        key={'pagelink-next'}
        className={cx([rootClassName + '__next'], { disabled: nextDisabled })}
        onClick={() => {
          onPageChange(nextPage);
        }}
        onKeyPress={event => {
          if (!nextDisabled && getKey(event) === KEY.ENTER) {
            onPageChange(nextPage);
          }
        }}
      >
        <Chevron
          className="arrow-icon"
          direction="right"
          height={10}
          width={10}
        />
      </button>
    );
  }

  renderPageButton(pageNumber) {
    const { currentPage, onPageChange } = this.props;
    return (
      <button
        tabIndex={pageNumber === currentPage ? -1 : 0}
        key={'pagelink-' + pageNumber}
        className={cx([rootClassName + '__number'], {
          [rootClassName + '__number--active']: pageNumber === currentPage,
        })}
        onClick={() => {
          onPageChange(pageNumber);
        }}
        onKeyPress={event => {
          if (getKey(event) === KEY.ENTER) {
            onPageChange(pageNumber);
          }
        }}
      >
        {pageNumber}
      </button>
    );
  }

  renderDotDotDot(side) {
    return (
      <div className="dot-dot-dot" key={'dot-dot-dot-' + side}>
        ...
      </div>
    );
  }

  renderPages(nrOfPages) {
    const { currentPage } = this.props;
    const buttons = [];
    const nrOfPagesTilStart = currentPage - 1;
    const nrOfPagesTilEnd = nrOfPages - currentPage;

    if (nrOfPages === 0) {
      buttons.push(this.renderPageButton(1));
    } else if (nrOfPages < 6) {
      for (let i = 1; i <= nrOfPages; i++) {
        buttons.push(this.renderPageButton(i));
      }
    } else {
      if (nrOfPagesTilStart < 3) {
        for (let i = 1; i < 4 && i < nrOfPages; i++) {
          buttons.push(this.renderPageButton(i));
        }
      } else {
        buttons.push(this.renderPageButton(1));
        buttons.push(this.renderDotDotDot('left'));
      }

      if (nrOfPagesTilStart >= 3 && nrOfPagesTilEnd >= 3) {
        buttons.push(this.renderPageButton(currentPage));
      }

      if (nrOfPagesTilEnd < 3) {
        for (let i = nrOfPages - 2; i <= nrOfPages; i++) {
          buttons.push(this.renderPageButton(i));
        }
      } else {
        buttons.push(this.renderDotDotDot('right'));
        buttons.push(this.renderPageButton(nrOfPages));
      }
    }
    return buttons;
  }

  render() {
    const { className, collectionSize, pageSize, variant } = this.props;
    const classNames = cx(rootClassName, className, {
      [`${rootClassName}--variant-${variant}`]: variant,
    });
    const nrOfPages = Math.ceil(collectionSize / pageSize);
    return (
      <div className={classNames}>
        <div className={`${rootClassName}-wrapper`}>
          {this.renderPrevButton()}
          {this.renderPages(nrOfPages)}
          {this.renderNextButton(nrOfPages)}
        </div>
      </div>
    );
  }
}

Pagination.propTypes = {
  currentPage: propTypes.number.isRequired,
  collectionSize: propTypes.number.isRequired,
  pageSize: propTypes.number.isRequired,
  onPageChange: propTypes.func.isRequired,
  className: propTypes.string,
  variant: propTypes.oneOf(['midnight']),
};

Pagination.defaultProps = {
  onPageChange: () => {},
};
