import React, { Fragment } from 'react';
import PropTypes from 'prop-types';
import cx from 'classnames';

import { Tab } from './tab';

import {
  rootClassName,
  tabHeadersClassName,
  tabHeaderClassName,
} from './styles.scss';

export function Tabs({ selected, onChange, className, children }) {
  const childrenArray = React.Children.toArray(children);

  const filteredTabHeaders = childrenArray.filter(child => child.type === Tab);
  const tabHeaders = filteredTabHeaders.map((tab, i) => {
    const { disabled, label, value } = tab.props;
    const tabHeaderClassNames = cx(tabHeaderClassName, {
      [`${tabHeaderClassName}--selected`]: selected === value,
      [`${tabHeaderClassName}--disabled`]: disabled,
    });
    return (
      <Fragment key={i}>
        <div
          onClick={() => !disabled && onChange(value)}
          className={tabHeaderClassNames}
        >
          {label}
        </div>
        {i + 1 !== filteredTabHeaders.length && (
          <div className="margin-block" />
        )}
      </Fragment>
    );
  });
  const selectedTab = childrenArray.find(tab => {
    return selected === tab.props.value;
  });
  const classNames = cx(rootClassName, className);
  return (
    <div className={classNames}>
      <div className={tabHeadersClassName}>{tabHeaders}</div>
      {selectedTab && selectedTab}
    </div>
  );
}

Tabs.propTypes = {
  className: PropTypes.string,
  selected: PropTypes.string.isRequired,
  onChange: PropTypes.func,
  children: PropTypes.oneOfType([
    PropTypes.arrayOf(PropTypes.node),
    PropTypes.node,
  ]),
};
Tabs.defaultProps = {
  onChange: () => {},
};
