import React from 'react';
import cx from 'classnames';
import PropTypes from 'prop-types';
import { rootClassName } from './styles.scss';

import { Label, Legend } from '../label';
import { AlertMessage } from '../alertMessage';
import { TextField, TextArea } from '../formControl';
import { DropDown } from '../formControl/dropdown';

const propTypes = {
  id: PropTypes.string,
  className: PropTypes.string,
  title: PropTypes.node,
  alertLabel: PropTypes.string,
  alertLevel: PropTypes.string,
  children: PropTypes.node,
  variant: PropTypes.oneOf(['primary', 'midnight']),
};

const CHILDREN_WHITELIST = [ TextField, TextArea, DropDown ];

export function FormGroup(props) {
  const {
    id,
    className,
    inputId,
    title,
    alertLevel,
    alertLabel,
    children,
    variant,
  } = props;
  const combinedClassNames = cx(rootClassName, className);

  const childrenArray = React.Children.toArray(children);
  const mappedChildren = childrenArray.map((child) => {
    if(!CHILDREN_WHITELIST.includes(child.type)) {
      return child;
    }

    return React.cloneElement(child, {
      valid: child.props.valid || alertLevel,
      variant: child.props.variant || variant,
    });
  });

  return (
    <div id={id} className={combinedClassNames}>
      {title && <Label htmlFor={inputId} variant={variant}>{title}</Label>}
      {mappedChildren}
      {alertLabel && <AlertMessage variant={variant} level={alertLevel}>{alertLabel}</AlertMessage>}
    </div>
  );
}

FormGroup.propTypes = {
  ...propTypes,
  inputId: PropTypes.string.isRequired,
};

export function FieldSetGroup(props) {
  const {
    id,
    children,
    className,
    title,
    disabled,
    alertLevel,
    alertLabel,
    variant,
  } = props;
  const combinedClassNames = cx(rootClassName, className);

  const mappedChildren = React.Children.toArray(children).map((child) => {
    return React.cloneElement(child, {
      variant: child.props.variant || variant,
    });
  });

  return (
    <fieldset id={id} className={combinedClassNames} disabled={disabled}>
      {title && <Legend variant={variant}>{title}</Legend>}
      {mappedChildren}
      {alertLabel && <AlertMessage variant={variant} level={alertLevel}>{alertLabel}</AlertMessage>}
    </fieldset>
  );
}

FieldSetGroup.propTypes = {
  ...propTypes,
  disabled: PropTypes.bool,
};
