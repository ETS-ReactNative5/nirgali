import React from 'react';
import PropTypes from 'prop-types';
import cx from 'classnames';

import ErrorIcon from '../icons/ui/error';
import ExclamationIcon from '../icons/ui/exclamation';
import SuccessIcon from '../icons/ui/success';
import InfoIcon from '../icons/ui/info';

import { COLORS } from '../../utils/constants';

import { rootClassName } from './styles.scss';

function getIcon(level, variant) {
  const fillColor = variant === 'midnight' ? COLORS.BLUE : COLORS.WHITE;
  switch (level) {
    case 'success':
      return (
        <SuccessIcon
          className={`${rootClassName}__icon`}
          backgroundColor={variant === 'midnight' ? COLORS.MINT : COLORS.DARK_MINT }
          color={fillColor}
        />
      );
    case 'error':
      return (
        <ErrorIcon
          className={`${rootClassName}__icon`}
          backgroundColor={COLORS.LAVA}
          color={fillColor}
        />
      );
    case 'warning':
      return (
        <ExclamationIcon
          className={`${rootClassName}__icon`}
          backgroundColor={COLORS.CANARY}
          color={fillColor}
        />
      );
    case 'info':
      return (
        <InfoIcon
          className={`${rootClassName}__icon`}
          backgroundColor={variant === 'midnight' ? COLORS.LAVENDER : COLORS.BLUE}
          color={fillColor}
        />
      );
    case 'none':
      return null;
    default:
      return null;
  }
}

export function AlertMessage({ level, children, className, variant }) {
  const classNames = cx(rootClassName, className);
  const textClass = `${rootClassName}__text`;
  const textClassNames = cx(textClass, { [`${textClass}--variant-${variant}`]: variant });
  return (
    <div className={classNames}>
      {getIcon(level, variant)}
      <div className={textClassNames}>{children}</div>
    </div>
  );
}

AlertMessage.propTypes = {
  children: PropTypes.node,
  className: PropTypes.string,
  level: PropTypes.oneOf(['success', 'error', 'warning', 'info', 'none']),
  variant: PropTypes.oneOf(['midnight']),
};

AlertMessage.defaultProps = {
  level: 'none',
};
