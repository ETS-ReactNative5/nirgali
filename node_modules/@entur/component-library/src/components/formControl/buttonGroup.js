import React from 'react';
import PropTypes from 'prop-types';
import cx from 'classnames';

import { RadioFormButton, CheckboxFormButton, LinkFormButton } from './';

import { buttonGroupClassName } from './styles.scss';

const CHILDREN_WHITELIST = [RadioFormButton, CheckboxFormButton, LinkFormButton];

export function ButtonGroup({
  id,
  className,
  name,
  children,
  variant,
  size,
  width,
  value,
  ...rest
}) {
  const combinedClassNames = cx(buttonGroupClassName, className, {
    [`${buttonGroupClassName}--width-${width}`]: width,
    [`${buttonGroupClassName}--${variant}`]: variant,
  });

  const childrenArray = React.Children.toArray(children);

  const buttons = childrenArray.map((child, index) => {
    if (!CHILDREN_WHITELIST.includes(child.type)) {
      const whitelistNames = CHILDREN_WHITELIST.map(({ name }) => name);
      throw new Error(
        `ButtonGroup only allow children of type ${whitelistNames.join(
          ', '
        )}, ${child.type} is not allowed`
      );
    }

    const active =
      value !== undefined ? value === child.props.value : child.props.active;

    return React.cloneElement(child, {
      id: id ? `${id}-${index}` : undefined,
      className: cx(`${buttonGroupClassName}__btn`, child.props.className),
      name,
      size,
      active,
      variant,
      ...rest,
    });
  });

  return <div className={combinedClassNames}>{buttons}</div>;
}

ButtonGroup.propTypes = {
  className: PropTypes.string,
  children: PropTypes.node.isRequired,
  id: PropTypes.string,
  name: PropTypes.string,
  variant: PropTypes.oneOf(['midnight', 'primary']),
  size: PropTypes.oneOf(['md', 'lg']).isRequired,
  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),
  width: PropTypes.oneOf(['fluid']),
};

ButtonGroup.defaultProps = {
  onChange: () => {},
  variant: 'primary',
  size: 'md',
};
