import React from 'react';
import PropTypes from 'prop-types';
import cx from 'classnames';

import {
  rootClassName,
  inputGroupClassName,
  buttonClassName,
} from './styles.scss';

import InputButton from '../button/inputButton';
import {
  getFocusClassName,
  getClassNames as getClassNamesShared,
} from '../button/helper';

const commonPropTypes = {
  className: PropTypes.string,
  onChange: PropTypes.func,
  size: PropTypes.oneOf(['md', 'lg']).isRequired,
  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,
  type: PropTypes.oneOf(['number', 'text', 'checkbox', 'radio', 'search', 'password']),
  valid: PropTypes.oneOf(['success', 'error', 'warning', 'info', 'none']),
  variant: PropTypes.oneOf(['midnight', 'primary']),
  width: PropTypes.oneOf(['fluid']),
  disabled: PropTypes.bool,
  refCallback: PropTypes.func,
};

const defaultProps = {
  size: 'md',
  value: '',
  onChange: () => {},
};

export function getClassNames(baseClassName, props, ...args) {
  const { className, valid, prepend, append, ...rest } = props;
  const sharedClassNames = getClassNamesShared(baseClassName, rest);

  return cx(
    sharedClassNames,
    {
      [`${baseClassName}--valid-${valid}`]: valid,
      [`${baseClassName}--is-prepended`]: prepend,
      [`${baseClassName}--is-appended`]: append,
    },
    ...args,
    className
  );
}

export function FormControlWrapper({
  className,
  prepend,
  append,
  variant,
  valid,
  size,
  width,
  disabled,
  children,
}) {
  const classNames = getClassNamesShared(
    inputGroupClassName,
    { className, width },
  );

  const prependClassNames = getClassNames(rootClassName, {
    className: `${rootClassName}-prepend`,
    variant,
    size,
    valid,
    disabled,
  });
  const appendClassNames = getClassNames(rootClassName, {
    className: `${rootClassName}-append`,
    variant,
    size,
    valid,
    disabled,
  });

  return (
    <div className={classNames}>
      {prepend && <div className={prependClassNames}>{prepend}</div>}
      {children}
      {append && <div className={appendClassNames}>{append}</div>}
    </div>
  );
}

FormControlWrapper.propTypes = {
  className: PropTypes.string,
  prepend: PropTypes.node,
  append: PropTypes.node,
  valid: commonPropTypes.valid,
  variant: commonPropTypes.variant,
  disabled: PropTypes.bool,
  children: PropTypes.node,
  width: PropTypes.oneOf(['fluid']),
  size: PropTypes.oneOf(['md', 'lg']),
};

export function TextField({
  className,
  variant,
  size,
  width,
  valid,
  disabled,
  refCallback,
  prepend,
  append,
  style,
  ...rest
}) {
  const classNames = getClassNames(rootClassName, {
    variant,
    size,
    width,
    valid,
    prepend,
    append,
  });

  if (!prepend && !append) {
    return (
      <input
        {...rest}
        ref={refCallback}
        className={cx(classNames, className)}
        style={style}
        disabled={disabled}
      />
    );
  }


  return (
    <FormControlWrapper
      prepend={prepend}
      append={append}
      valid={valid}
      variant={variant}
      size={size}
      width={width}
      className={className}
      style={style}
      disabled={disabled}
    >
      <input
        {...rest}
        ref={refCallback}
        className={classNames}
        disabled={disabled}
      />
    </FormControlWrapper>
  );
}

TextField.propTypes = {
  ...commonPropTypes,
  prepend: PropTypes.node,
  append: PropTypes.node,
  style: PropTypes.object,
};
TextField.defaultProps = defaultProps;

export function TextArea({
  className,
  variant,
  size,
  width,
  valid,
  disabled,
  refCallback,
  prepend,
  append,
  style,
  ...rest
}) {
  const classNames = getClassNames(rootClassName, {
    variant,
    size,
    width,
    valid,
    prepend,
    append,
  });

  if (!prepend && !append) {
    return (
      <textarea
        {...rest}
        ref={refCallback}
        className={cx(classNames, className)}
        style={style}
        disabled={disabled}
      />
    );
  }


  return (
    <FormControlWrapper
      prepend={prepend}
      append={append}
      valid={valid}
      variant={variant}
      size={size}
      width={width}
      className={className}
      style={style}
      disabled={disabled}
    >
      <textarea
        {...rest}
        ref={refCallback}
        className={classNames}
        disabled={disabled}
      />
    </FormControlWrapper>
  );
}

TextArea.propTypes = {
  ...commonPropTypes,
  prepend: PropTypes.node,
  append: PropTypes.node,
  style: PropTypes.object,
};
TextArea.defaultProps = defaultProps;

export function CheckboxFormButton({
  className,
  children,
  variant,
  size,
  width,
  active,
  disabled,
  ...rest
}) {
  const classNames = getClassNames(
    rootClassName,
    {
      className,
      variant,
      size,
      width,
      active,
      disabled,
    },
    buttonClassName
  );

  return (
    <InputButton
      {...rest}
      className={classNames}
      focusClassName={getFocusClassName(rootClassName)}
      type="checkbox"
      checked={active}
      disabled={disabled}
    >
      {children}
    </InputButton>
  );
}

CheckboxFormButton.propTypes = {
  ...commonPropTypes,
  active: PropTypes.bool,
  children: PropTypes.node,
};
CheckboxFormButton.defaultProps = defaultProps;

export function RadioFormButton({
  className,
  children,
  variant,
  size,
  width,
  active,
  disabled,
  ...rest
}) {
  const classNames = getClassNames(
    rootClassName,
    {
      className,
      variant,
      size,
      width,
      active,
      disabled,
    },
    buttonClassName
  );

  return (
    <InputButton
      {...rest}
      className={classNames}
      focusClassName={getFocusClassName(rootClassName)}
      type="radio"
      checked={active}
      disabled={disabled}
    >
      {children}
    </InputButton>
  );
}

RadioFormButton.propTypes = {
  ...commonPropTypes,
  active: PropTypes.bool,
  children: PropTypes.node,
};
RadioFormButton.defaultProps = defaultProps;

export function LinkFormButton({
  className,
  children,
  variant,
  size,
  width,
  active,
  disabled,
  href,
  ...rest
}) {
  const classNames = getClassNames(
    rootClassName,
    {
      className,
      variant,
      size,
      width,
      active,
      disabled,
    },
    buttonClassName
  );

  return (
    <a
      {...rest}
      href={disabled || active ? '' : href}
      className={classNames}
      disabled={disabled}
    >
      {children}
    </a>
  );
}

LinkFormButton.propTypes = {
  ...commonPropTypes,
  active: PropTypes.bool,
  children: PropTypes.node,
  href: PropTypes.string,
};
LinkFormButton.defaultProps = defaultProps;
