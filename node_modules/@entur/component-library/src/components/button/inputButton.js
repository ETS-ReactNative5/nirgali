import React, { Component } from 'react';
import PropTypes from 'prop-types';
import cx from 'classnames';

class InputButton extends Component {
  constructor() {
    super();
    this.state = { hasFocus: false };
    this.handleInputFocus = this.toggleFocus.bind(this, true);
    this.handleInputBlur = this.toggleFocus.bind(this, false);
  }

  componentDidMount() {
    this.inputEl.addEventListener('focus', this.handleInputFocus);
    this.inputEl.addEventListener('blur', this.handleInputBlur);
  }

  componentWillUnmount() {
    this.inputEl.removeEventListener('focus', this.handleInputFocus);
    this.inputEl.removeEventListener('blur', this.handleInputBlur);
  }

  toggleFocus(hasFocus) {
    this.setState({ hasFocus });
  }

  refHandler = (el) => {
    const { refCallback } = this.props;
    this.inputEl = el;
    refCallback && refCallback(el);
  }

  render() {
    const {
      id,
      className,
      focusClassName,
      type,
      children,
      value,
      checked,
      disabled,
      refCallback, // eslint-disable-line no-unused-vars
      style,
      ...rest
    } = this.props;

    const { hasFocus } = this.state;
    const classNames = cx(className, { [focusClassName]: hasFocus });

    return (
      <label htmlFor={id} className={classNames} style={style}>
        {children}
        <input
          ref={this.refHandler}
          id={id}
          className="visuallyhidden"
          type={type}
          value={value}
          checked={checked}
          disabled={disabled}
          {...rest}
        />
      </label>
    );
  }
}

InputButton.propTypes = {
  id: PropTypes.string,
  className: PropTypes.string.isRequired,
  focusClassName: PropTypes.string,
  type: PropTypes.oneOf(['checkbox', 'radio']),
  checked: PropTypes.bool,
  disabled: PropTypes.bool,
  value: PropTypes.string,
  children: PropTypes.node,
  refCallback: PropTypes.func,
  style: PropTypes.object,
};

export default InputButton;
