import React, { Component, Fragment } from 'react';
import PropTypes from 'prop-types';
import cx from 'classnames';

import { JustCheckbox, JustRadio } from '../checkbox-radio';
import {
  radioPanelClassName, checkMarkClassName, labelsClassName, labelClassName,
} from './panel.scss';

const propTypes = {
  label: PropTypes.string,
  secondLabel: PropTypes.string,
  thirdLabel: PropTypes.string,
  className: PropTypes.string,
  variant: PropTypes.oneOf(['default', 'midnight']),
  checked: PropTypes.bool,
  children: PropTypes.node,
  onChange: PropTypes.func,
  size:  PropTypes.oneOf(['md', 'lg']),
};

const defaultProps = {
  variant: 'default',
  size: 'md',
};

class Panel extends Component {
  renderLabel(label, key) {
    if(!label) {return null;}

    return (
      <div key={key} className={labelClassName}>
        { label }
      </div>
    );
  }

  renderLabels() {
    const {
      label, secondLabel, thirdLabel, children,
    } = this.props;
    const showLabels = Boolean(label || secondLabel || thirdLabel);

    return (
      <Fragment>
        { showLabels &&
          <div className={labelsClassName}>
            { [label, secondLabel, thirdLabel].map(this.renderLabel) }
          </div>
        }
        { children }
      </Fragment>
    );
  }

  render() {
    const {
      className, value, variant = '', inputType, checked, size, onChange,
      label, secondLabel, thirdLabel, children, disabled, ...rest
    } = this.props;

    const classNames = cx(radioPanelClassName, {
      [`${radioPanelClassName}--with-checkmark`]: onChange,
      [`${radioPanelClassName}--checked`]: onChange && checked,
      [`${radioPanelClassName}--variant-${variant}`]: variant,
      [`${radioPanelClassName}--size-${size}`]: size,
    }, className);

    if (onChange) {
      const JustInput = inputType === 'radio' ? JustRadio : JustCheckbox;

      return (
        <label className={ classNames } { ...rest }>
          { this.renderLabels() }
          <JustInput
            className={ checkMarkClassName }
            variant="midnight"
            size={ size }
            checked={ checked }
            onChange={ onChange }
            value={ value }
            disabled={ disabled }
          />
        </label>
      );
    }

    return (
      <div className={ classNames }>
        { this.renderLabels() }
      </div>
    );
  }
}

Panel.propTypes = {
  ...propTypes,
  inputType: PropTypes.oneOf(['checkbox', 'radio']).isRequired,
};

export function RadioPanel(props) {
  return <Panel {...props} inputType="radio" />;
}

RadioPanel.propTypes = propTypes;
RadioPanel.defaultProps = defaultProps;

export function CheckboxPanel(props) {
  return <Panel {...props} inputType="checkbox" />;
}

CheckboxPanel.propTypes = propTypes;
CheckboxPanel.defaultProps = defaultProps;
