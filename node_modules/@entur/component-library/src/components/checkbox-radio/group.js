import React, { Children, cloneElement } from 'react';
import PropTypes from 'prop-types';
import cx from 'classnames';

import { Checkbox, Radio } from './index';
import { CheckboxPanel, RadioPanel } from './panel';

import { groupClassName } from './group.scss';

const CHECKBOX_WHITE_LIST = [ Checkbox, CheckboxPanel ];
const RADIO_WHITE_LIST = [ Radio, RadioPanel ];

function getClassNames(className, direction) {
  return cx(groupClassName, className, {
    [`${groupClassName}--${direction}`]: direction,
  });
}

function ensureCorrectType(child, MustBeOfType) {
  if (child && MustBeOfType.every((type) => child.type !== type)) {
    const calleeName = 'Group';
    const allowedTypesNames = MustBeOfType.map(({name}) => name).join(', ');
    throw new Error(`${calleeName} only allow children of types ${allowedTypesNames}`);
  }
}

export function CheckboxGroup(props) {
  const { id, onChange, direction, className, children, ...rest } = props;


  const classNames = getClassNames(className, direction);

  return (
    <div id={id} className={classNames} {...rest}>
      { Children.map(children, (child, index) => {
        ensureCorrectType(child, CHECKBOX_WHITE_LIST);

        if (!child) {
          return child;
        }

        return cloneElement(child, {
          id: `${id}-${index}`,
          onChange,
        });
      }) }
    </div>
  );
}

CheckboxGroup.propTypes = {
  id: PropTypes.string.isRequired,
  children: PropTypes.node.isRequired,
  className: PropTypes.string,
  onChange: PropTypes.func,
  direction: PropTypes.oneOf(['horizontal', 'vertical']),
};

CheckboxGroup.defaultProps = {
  direction: 'vertical',
};


export function RadioGroup(props) {
  const {
    id, name, value, onChange, direction, className, children, ...rest
  } = props;

  const classNames = getClassNames(className, direction);

  return (
    <div id={id} className={classNames} {...rest}>
      { Children.map(children, (child, index) => {
        ensureCorrectType(child, RADIO_WHITE_LIST);

        if (!child) {
          return child;
        }

        return cloneElement(child, {
          id: `${id}-${index}`,
          name,
          onChange,
          checked: child.props.value === value,
        });
      }) }
    </div>
  );
}

RadioGroup.propTypes = {
  name: PropTypes.string.isRequired,
  onChange: PropTypes.func,
  direction: PropTypes.oneOf(['horizontal', 'vertical']),
  value: PropTypes.string.isRequired,
  id: PropTypes.string.isRequired,
  className: PropTypes.string,
  children: PropTypes.node.isRequired,
};

RadioGroup.defaultProps = {
  direction: 'vertical',
};
