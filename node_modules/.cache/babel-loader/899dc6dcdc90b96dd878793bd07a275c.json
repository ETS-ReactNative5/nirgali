{"ast":null,"code":"var _jsxFileName = \"/Users/Goplen/Desktop/knowit/3psx/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style/index.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport { Route, BrowserRouter as Router } from 'react-router-dom';\nimport Home from './components/home';\nimport Overview from \"./components/overview\";\nimport Register from './components/register';\nimport Edit from './components/edit';\nimport Login from './components/login';\nimport auth from './authenticate/auth';\nimport Keycloak from \"keycloak-js\";\nimport token from './authenticate/token';\nconst routing = React.createElement(Router, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 16\n  },\n  __self: this\n}, React.createElement(\"div\", {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 17\n  },\n  __self: this\n}, React.createElement(Route, {\n  path: \"/\",\n  component: Home,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 18\n  },\n  __self: this\n}), React.createElement(Route, {\n  path: \"/edit/:deviationId?\",\n  component: Edit,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 19\n  },\n  __self: this\n}), React.createElement(Route, {\n  path: \"/register\",\n  component: Register,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 20\n  },\n  __self: this\n}), React.createElement(Route, {\n  path: \"/overview\",\n  component: Overview,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 21\n  },\n  __self: this\n}), React.createElement(Route, {\n  path: \"/login\",\n  component: Login,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 22\n  },\n  __self: this\n})));\n\nconst renderIndex = () => {\n  ReactDOM.render(routing, document.getElementById('root'));\n};\n\nconst keycloak_json = {\n  realm: 'rutebanken',\n  'auth-server-url': 'https://kc-dev.devstage.entur.io/auth',\n  'ssl-required': 'external',\n  resource: 'flexible-transport-frontend',\n  'public-client': true\n}; // Minimum number of seconds left of token before a refresh is needed\n\nconst minValiditySeconds = 60; // How often should lib check for valid token\n\nconst refreshRateMs = 10000;\n\nconst initAuth = () => {\n  const kc = new Keycloak(keycloak_json);\n  const options = {\n    checkLoginIframe: false\n  };\n  kc.init(options).success(authenticated => {\n    if (authenticated) {\n      token.save(kc.token);\n      setInterval(() => {\n        kc.updateToken(minValiditySeconds).error(() => kc.logout());\n        token.save(kc.token);\n      }, refreshRateMs);\n      const userInfo = {\n        logoutUrl: kc.createLogoutUrl(options),\n        familyName: kc.idTokenParsed.family_name,\n        givenName: kc.idTokenParsed.given_name,\n        email: kc.idTokenParsed.email,\n        username: kc.idTokenParsed.preferred_username\n      };\n      renderIndex(userInfo);\n    } else {\n      kc.login();\n    }\n  });\n};\n\ninitAuth();\nexport default renderIndex;","map":{"version":3,"sources":["/Users/Goplen/Desktop/knowit/3psx/src/index.js"],"names":["React","ReactDOM","Route","BrowserRouter","Router","Home","Overview","Register","Edit","Login","auth","Keycloak","token","routing","renderIndex","render","document","getElementById","keycloak_json","realm","resource","minValiditySeconds","refreshRateMs","initAuth","kc","options","checkLoginIframe","init","success","authenticated","save","setInterval","updateToken","error","logout","userInfo","logoutUrl","createLogoutUrl","familyName","idTokenParsed","family_name","givenName","given_name","email","username","preferred_username","login"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style/index.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport { Route, BrowserRouter as Router } from 'react-router-dom'\nimport Home from './components/home'\nimport Overview from \"./components/overview\";\nimport Register from './components/register';\nimport Edit from './components/edit';\nimport Login from './components/login'\nimport auth from './authenticate/auth'\nimport Keycloak from \"keycloak-js\";\nimport token from './authenticate/token';\n\nconst routing = (\n    <Router>\n        <div>\n            <Route path=\"/\" component={Home} />\n            <Route path=\"/edit/:deviationId?\" component={Edit} />\n            <Route path=\"/register\" component={Register} />\n            <Route path=\"/overview\" component={Overview} />\n            <Route path=\"/login\" component={Login} />\n        </div>\n    </Router>\n);\n\nconst renderIndex = () => {\n    ReactDOM.render(\n        routing,\n        document.getElementById('root')\n    );\n};\n\nconst keycloak_json ={\n    realm: 'rutebanken',\n    'auth-server-url': 'https://kc-dev.devstage.entur.io/auth',\n    'ssl-required': 'external',\n    resource: 'flexible-transport-frontend',\n    'public-client': true\n};\n\n// Minimum number of seconds left of token before a refresh is needed\nconst minValiditySeconds = 60;\n\n// How often should lib check for valid token\nconst refreshRateMs = 10000;\n\nconst initAuth = () => {\n    const kc = new Keycloak(keycloak_json);\n    const options = { checkLoginIframe: false };\n    kc.init(options).success(authenticated => {\n        if (authenticated) {\n            token.save(kc.token);\n            setInterval(() => {\n                kc.updateToken(minValiditySeconds).error(() => kc.logout());\n                token.save(kc.token);\n            }, refreshRateMs);\n            const userInfo = {\n                logoutUrl: kc.createLogoutUrl(options),\n                familyName: kc.idTokenParsed.family_name,\n                givenName: kc.idTokenParsed.given_name,\n                email: kc.idTokenParsed.email,\n                username: kc.idTokenParsed.preferred_username,\n            };\n            renderIndex(userInfo);\n        } else {\n            kc.login();\n        }\n    });\n};\n\ninitAuth();\n\nexport default renderIndex"]},"metadata":{},"sourceType":"module"}