{"ast":null,"code":"import React from \"react\";\n\nconst _require = require('apollo-fetch'),\n      createApolloFetch = _require.createApolloFetch;\n\nconst uri = 'https://api.staging.entur.io/journey-planner/v2/graphql';\nconst value = localStorage.getItem(\"loggedInAs\") + ':Authority:' + localStorage.getItem(\"loggedInAs\");\nconst query = \"\\n  {\\n  lines(authorities:\\\"GOA:Authority:GOA\\\") {\\n  \\tid\\n    name\\n    quays {\\n      id\\n      name\\n    }\\n  }\\n}\\n\";\n\nconst run = (localKey, date) => {\n  const apolloFetch = createApolloFetch({\n    uri\n  });\n  const query2 = \"\\n      {\\n      serviceJourneys(authorities: \\\"GOA:Authority:GOA\\\", activeDates: [\\\"\".concat(date, \"\\\"]) {\\n        id\\n        quays {\\n          id\\n          name\\n        }\\n      }\\n    }\\n    \");\n  console.log(date);\n  console.log(query2);\n\n  if (date === null) {\n    apolloFetch({\n      query\n    }).catch(error => error).then(response => {\n      localStorage.setItem(localKey, JSON.stringify(response.data.lines));\n    });\n  } else {\n    apolloFetch({\n      query2\n    }).catch(error => error).then(response => {\n      localStorage.setItem(localKey, JSON.stringify(response));\n    });\n  }\n};\n\nexport default {\n  run\n};","map":{"version":3,"sources":["/Users/Goplen/Desktop/knowit/3psx/src/api.js"],"names":["React","require","createApolloFetch","uri","value","localStorage","getItem","query","run","localKey","date","apolloFetch","query2","console","log","catch","error","then","response","setItem","JSON","stringify","data","lines"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;;iBAC8BC,OAAO,CAAC,cAAD,C;MAA7BC,iB,YAAAA,iB;;AAER,MAAMC,GAAG,GAAG,yDAAZ;AACA,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,YAArB,IAAmC,aAAnC,GAAiDD,YAAY,CAACC,OAAb,CAAqB,YAArB,CAA/D;AAEA,MAAMC,KAAK,8HAAX;;AAaA,MAAMC,GAAG,GAAG,CAACC,QAAD,EAAWC,IAAX,KAAoB;AAC5B,QAAMC,WAAW,GAAGT,iBAAiB,CAAC;AAAEC,IAAAA;AAAF,GAAD,CAArC;AAEA,QAAMS,MAAM,kGAEyDF,IAFzD,uGAAZ;AAWAG,EAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAZ;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;;AAEA,MAAGF,IAAI,KAAK,IAAZ,EAAiB;AACbC,IAAAA,WAAW,CAAC;AAAEJ,MAAAA;AAAF,KAAD,CAAX,CACKQ,KADL,CACWC,KAAK,IAAIA,KADpB,EAEKC,IAFL,CAEUC,QAAQ,IAAI;AACdb,MAAAA,YAAY,CAACc,OAAb,CAAqBV,QAArB,EAA+BW,IAAI,CAACC,SAAL,CAAeH,QAAQ,CAACI,IAAT,CAAcC,KAA7B,CAA/B;AACH,KAJL;AAKH,GAND,MAMK;AACDZ,IAAAA,WAAW,CAAC;AAAEC,MAAAA;AAAF,KAAD,CAAX,CACKG,KADL,CACWC,KAAK,IAAIA,KADpB,EAEKC,IAFL,CAEUC,QAAQ,IAAI;AACdb,MAAAA,YAAY,CAACc,OAAb,CAAqBV,QAArB,EAA+BW,IAAI,CAACC,SAAL,CAAeH,QAAf,CAA/B;AACH,KAJL;AAKH;AACJ,CA9BD;;AAgCA,eAAe;AAAEV,EAAAA;AAAF,CAAf","sourcesContent":["import React from \"react\";\nconst { createApolloFetch } = require('apollo-fetch');\n\nconst uri = 'https://api.staging.entur.io/journey-planner/v2/graphql';\nconst value = localStorage.getItem(\"loggedInAs\")+':Authority:'+localStorage.getItem(\"loggedInAs\");\n\nconst query = `\n  {\n  lines(authorities:\"GOA:Authority:GOA\") {\n  \tid\n    name\n    quays {\n      id\n      name\n    }\n  }\n}\n`;\n\nconst run = (localKey, date) => {\n    const apolloFetch = createApolloFetch({ uri });\n\n    const query2 = `\n      {\n      serviceJourneys(authorities: \"GOA:Authority:GOA\", activeDates: [\"${date}\"]) {\n        id\n        quays {\n          id\n          name\n        }\n      }\n    }\n    `;\n    console.log(date);\n    console.log(query2);\n\n    if(date === null){\n        apolloFetch({ query })\n            .catch(error => error)\n            .then(response => {\n                localStorage.setItem(localKey, JSON.stringify(response.data.lines));\n            });\n    }else{\n        apolloFetch({ query2 })\n            .catch(error => error)\n            .then(response => {\n                localStorage.setItem(localKey, JSON.stringify(response));\n            });\n    }\n};\n\nexport default { run }"]},"metadata":{},"sourceType":"module"}