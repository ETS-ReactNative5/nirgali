{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst path = require(\"path\");\n\nconst _require = require(\"webpack-sources\"),\n      ConcatSource = _require.ConcatSource,\n      RawSource = _require.RawSource;\n\nconst ModuleFilenameHelpers = require(\"./ModuleFilenameHelpers\");\n\nconst SourceMapDevToolModuleOptionsPlugin = require(\"./SourceMapDevToolModuleOptionsPlugin\");\n\nconst createHash = require(\"./util/createHash\");\n\nconst validateOptions = require(\"schema-utils\");\n\nconst schema = require(\"../schemas/plugins/SourceMapDevToolPlugin.json\");\n/** @typedef {import(\"../declarations/plugins/SourceMapDevToolPlugin\").SourceMapDevToolPluginOptions} SourceMapDevToolPluginOptions */\n\n\nconst basename = name => {\n  if (!name.includes(\"/\")) return name;\n  return name.substr(name.lastIndexOf(\"/\") + 1);\n};\n\nconst assetsCache = new WeakMap();\n\nconst getTaskForFile = (file, chunk, options, compilation) => {\n  const asset = compilation.assets[file];\n  const cache = assetsCache.get(asset);\n\n  if (cache && cache.file === file) {\n    for (const cachedFile in cache.assets) {\n      compilation.assets[cachedFile] = cache.assets[cachedFile];\n      if (cachedFile !== file) chunk.files.push(cachedFile);\n    }\n\n    return;\n  }\n\n  let source, sourceMap;\n\n  if (asset.sourceAndMap) {\n    const sourceAndMap = asset.sourceAndMap(options);\n    sourceMap = sourceAndMap.map;\n    source = sourceAndMap.source;\n  } else {\n    sourceMap = asset.map(options);\n    source = asset.source();\n  }\n\n  if (sourceMap) {\n    return {\n      chunk,\n      file,\n      asset,\n      source,\n      sourceMap,\n      modules: undefined\n    };\n  }\n};\n\nclass SourceMapDevToolPlugin {\n  /**\n   * @param {SourceMapDevToolPluginOptions=} options options object\n   */\n  constructor(options) {\n    if (arguments.length > 1) {\n      throw new Error(\"SourceMapDevToolPlugin only takes one argument (pass an options object)\");\n    }\n\n    if (!options) options = {};\n    validateOptions(schema, options, \"SourceMap DevTool Plugin\");\n    this.sourceMapFilename = options.filename;\n    /** @type {string | false} */\n\n    this.sourceMappingURLComment = options.append === false ? false : options.append || \"\\n//# sourceMappingURL=[url]\";\n    this.moduleFilenameTemplate = options.moduleFilenameTemplate || \"webpack://[namespace]/[resourcePath]\";\n    this.fallbackModuleFilenameTemplate = options.fallbackModuleFilenameTemplate || \"webpack://[namespace]/[resourcePath]?[hash]\";\n    this.namespace = options.namespace || \"\";\n    this.options = options;\n  }\n\n  apply(compiler) {\n    const sourceMapFilename = this.sourceMapFilename;\n    const sourceMappingURLComment = this.sourceMappingURLComment;\n    const moduleFilenameTemplate = this.moduleFilenameTemplate;\n    const namespace = this.namespace;\n    const fallbackModuleFilenameTemplate = this.fallbackModuleFilenameTemplate;\n    const requestShortener = compiler.requestShortener;\n    const options = this.options;\n    options.test = options.test || /\\.(m?js|css)($|\\?)/i;\n    const matchObject = ModuleFilenameHelpers.matchObject.bind(undefined, options);\n    compiler.hooks.compilation.tap(\"SourceMapDevToolPlugin\", compilation => {\n      new SourceMapDevToolModuleOptionsPlugin(options).apply(compilation);\n      compilation.hooks.afterOptimizeChunkAssets.tap({\n        name: \"SourceMapDevToolPlugin\",\n        context: true\n      }, (context, chunks) => {\n        const moduleToSourceNameMapping = new Map();\n        const reportProgress = context && context.reportProgress ? context.reportProgress : () => {};\n        const files = [];\n\n        for (const chunk of chunks) {\n          for (const file of chunk.files) {\n            if (matchObject(file)) {\n              files.push({\n                file,\n                chunk\n              });\n            }\n          }\n        }\n\n        reportProgress(0.0);\n        const tasks = [];\n        files.forEach(({\n          file,\n          chunk\n        }, idx) => {\n          reportProgress(0.5 * idx / files.length, file, \"generate SourceMap\");\n          const task = getTaskForFile(file, chunk, options, compilation);\n\n          if (task) {\n            const modules = task.sourceMap.sources.map(source => {\n              const module = compilation.findModule(source);\n              return module || source;\n            });\n\n            for (let idx = 0; idx < modules.length; idx++) {\n              const module = modules[idx];\n\n              if (!moduleToSourceNameMapping.get(module)) {\n                moduleToSourceNameMapping.set(module, ModuleFilenameHelpers.createFilename(module, {\n                  moduleFilenameTemplate: moduleFilenameTemplate,\n                  namespace: namespace\n                }, requestShortener));\n              }\n            }\n\n            task.modules = modules;\n            tasks.push(task);\n          }\n        });\n        reportProgress(0.5, \"resolve sources\");\n        const usedNamesSet = new Set(moduleToSourceNameMapping.values());\n        const conflictDetectionSet = new Set(); // all modules in defined order (longest identifier first)\n\n        const allModules = Array.from(moduleToSourceNameMapping.keys()).sort((a, b) => {\n          const ai = typeof a === \"string\" ? a : a.identifier();\n          const bi = typeof b === \"string\" ? b : b.identifier();\n          return ai.length - bi.length;\n        }); // find modules with conflicting source names\n\n        for (let idx = 0; idx < allModules.length; idx++) {\n          const module = allModules[idx];\n          let sourceName = moduleToSourceNameMapping.get(module);\n          let hasName = conflictDetectionSet.has(sourceName);\n\n          if (!hasName) {\n            conflictDetectionSet.add(sourceName);\n            continue;\n          } // try the fallback name first\n\n\n          sourceName = ModuleFilenameHelpers.createFilename(module, {\n            moduleFilenameTemplate: fallbackModuleFilenameTemplate,\n            namespace: namespace\n          }, requestShortener);\n          hasName = usedNamesSet.has(sourceName);\n\n          if (!hasName) {\n            moduleToSourceNameMapping.set(module, sourceName);\n            usedNamesSet.add(sourceName);\n            continue;\n          } // elsewise just append stars until we have a valid name\n\n\n          while (hasName) {\n            sourceName += \"*\";\n            hasName = usedNamesSet.has(sourceName);\n          }\n\n          moduleToSourceNameMapping.set(module, sourceName);\n          usedNamesSet.add(sourceName);\n        }\n\n        tasks.forEach((task, index) => {\n          reportProgress(0.5 + 0.5 * index / tasks.length, task.file, \"attach SourceMap\");\n          const assets = Object.create(null);\n          const chunk = task.chunk;\n          const file = task.file;\n          const asset = task.asset;\n          const sourceMap = task.sourceMap;\n          const source = task.source;\n          const modules = task.modules;\n          const moduleFilenames = modules.map(m => moduleToSourceNameMapping.get(m));\n          sourceMap.sources = moduleFilenames;\n\n          if (options.noSources) {\n            sourceMap.sourcesContent = undefined;\n          }\n\n          sourceMap.sourceRoot = options.sourceRoot || \"\";\n          sourceMap.file = file;\n          assetsCache.set(asset, {\n            file,\n            assets\n          });\n          /** @type {string | false} */\n\n          let currentSourceMappingURLComment = sourceMappingURLComment;\n\n          if (currentSourceMappingURLComment !== false && /\\.css($|\\?)/i.test(file)) {\n            currentSourceMappingURLComment = currentSourceMappingURLComment.replace(/^\\n\\/\\/(.*)$/, \"\\n/*$1*/\");\n          }\n\n          const sourceMapString = JSON.stringify(sourceMap);\n\n          if (sourceMapFilename) {\n            let filename = file;\n            let query = \"\";\n            const idx = filename.indexOf(\"?\");\n\n            if (idx >= 0) {\n              query = filename.substr(idx);\n              filename = filename.substr(0, idx);\n            }\n\n            let sourceMapFile = compilation.getPath(sourceMapFilename, {\n              chunk,\n              filename: options.fileContext ? path.relative(options.fileContext, filename) : filename,\n              query,\n              basename: basename(filename),\n              contentHash: createHash(\"md4\").update(sourceMapString).digest(\"hex\")\n            });\n            const sourceMapUrl = options.publicPath ? options.publicPath + sourceMapFile.replace(/\\\\/g, \"/\") : path.relative(path.dirname(file), sourceMapFile).replace(/\\\\/g, \"/\");\n\n            if (currentSourceMappingURLComment !== false) {\n              assets[file] = compilation.assets[file] = new ConcatSource(new RawSource(source), currentSourceMappingURLComment.replace(/\\[url\\]/g, sourceMapUrl));\n            }\n\n            assets[sourceMapFile] = compilation.assets[sourceMapFile] = new RawSource(sourceMapString);\n            chunk.files.push(sourceMapFile);\n          } else {\n            if (currentSourceMappingURLComment === false) {\n              throw new Error(\"SourceMapDevToolPlugin: append can't be false when no filename is provided\");\n            }\n\n            assets[file] = compilation.assets[file] = new ConcatSource(new RawSource(source), currentSourceMappingURLComment.replace(/\\[map\\]/g, () => sourceMapString).replace(/\\[url\\]/g, () => \"data:application/json;charset=utf-8;base64,\".concat(Buffer.from(sourceMapString, \"utf-8\").toString(\"base64\"))));\n          }\n        });\n        reportProgress(1.0);\n      });\n    });\n  }\n\n}\n\nmodule.exports = SourceMapDevToolPlugin;","map":null,"metadata":{},"sourceType":"script"}