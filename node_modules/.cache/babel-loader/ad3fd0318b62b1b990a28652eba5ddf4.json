{"ast":null,"code":"var __assign = this && this.__assign || Object.assign || function (t) {\n  for (var s, i = 1, n = arguments.length; i < n; i++) {\n    s = arguments[i];\n\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n  }\n\n  return t;\n};\n\nimport 'cross-fetch/polyfill';\n\nfunction buildWareStack(funcs, modifiedObject, resolve) {\n  var _this = this;\n\n  var next = function () {\n    if (funcs.length > 0) {\n      var f = funcs.shift();\n\n      if (f) {\n        f.apply(_this, [modifiedObject, next]);\n      }\n    } else {\n      resolve(modifiedObject);\n    }\n  };\n\n  next();\n}\n\nexport function constructDefaultOptions(requestOrRequests, options) {\n  var body;\n\n  try {\n    body = JSON.stringify(requestOrRequests);\n  } catch (e) {\n    throw new Error(\"Network request failed. Payload is not serializable: \" + e.message);\n  }\n\n  return __assign({\n    body: body,\n    method: 'POST'\n  }, options, {\n    headers: __assign({\n      Accept: '*/*',\n      'Content-Type': 'application/json'\n    }, options.headers || [])\n  });\n}\n\nfunction throwHttpError(response, error) {\n  var httpError;\n\n  if (response && response.status >= 300) {\n    httpError = new Error(\"Network request failed with status \" + response.status + \" - \\\"\" + response.statusText + \"\\\"\");\n  } else {\n    httpError = new Error(\"Network request failed to return valid JSON\");\n  }\n\n  httpError.response = response;\n  httpError.parseError = error;\n  throw httpError;\n}\n\nfunction throwBatchError(response) {\n  var httpError = new Error(\"A batched Operation of responses for \");\n  httpError.response = response;\n  throw httpError;\n}\n\nexport function createApolloFetch(params) {\n  if (params === void 0) {\n    params = {};\n  }\n\n  var constructOptions = params.constructOptions,\n      customFetch = params.customFetch;\n\n  var _uri = params.uri || '/graphql';\n\n  var middlewares = [];\n  var batchedMiddlewares = [];\n  var afterwares = [];\n  var batchedAfterwares = [];\n\n  var applyMiddlewares = function (requestAndOptions, batched) {\n    return new Promise(function (resolve, reject) {\n      if (batched) {\n        buildWareStack(batchedMiddlewares.slice(), requestAndOptions, resolve);\n      } else {\n        buildWareStack(middlewares.slice(), requestAndOptions, resolve);\n      }\n    });\n  };\n\n  var applyAfterwares = function (responseObject, batched) {\n    return new Promise(function (resolve, reject) {\n      if (batched) {\n        buildWareStack(batchedAfterwares.slice(), responseObject, resolve);\n      } else {\n        buildWareStack(afterwares.slice(), responseObject, resolve);\n      }\n    });\n  };\n\n  var apolloFetch = function (request) {\n    var options = {};\n    var parseError;\n    var batched = Array.isArray(request);\n    var requestObject = batched ? {\n      requests: request,\n      options: options\n    } : {\n      request: request,\n      options: options\n    };\n    return applyMiddlewares(requestObject, batched).then(function (reqOpts) {\n      var construct = constructOptions || constructDefaultOptions;\n      var requestOrRequests = reqOpts.request || reqOpts.requests;\n      return construct(requestOrRequests, reqOpts.options);\n    }).then(function (opts) {\n      options = __assign({}, opts);\n      return (customFetch || fetch)(_uri, options);\n    }).then(function (response) {\n      return response.text().then(function (raw) {\n        try {\n          var parsed = JSON.parse(raw);\n          response.raw = raw;\n          response.parsed = parsed;\n          return response;\n        } catch (e) {\n          parseError = e;\n          response.raw = raw;\n          return response;\n        }\n      });\n    }).then(function (response) {\n      return applyAfterwares({\n        response: response,\n        options: options\n      }, batched);\n    }).then(function (_a) {\n      var response = _a.response;\n\n      if (response.parsed) {\n        if (batched) {\n          if (Array.isArray(response.parsed)) {\n            return response.parsed;\n          } else {\n            throwBatchError(response);\n          }\n        } else {\n          return __assign({}, response.parsed);\n        }\n      } else {\n        throwHttpError(response, parseError);\n      }\n    });\n  };\n\n  apolloFetch.use = function (middleware) {\n    if (typeof middleware === 'function') {\n      middlewares.push(middleware);\n    } else {\n      throw new Error('Middleware must be a function');\n    }\n\n    return apolloFetch;\n  };\n\n  apolloFetch.useAfter = function (afterware) {\n    if (typeof afterware === 'function') {\n      afterwares.push(afterware);\n    } else {\n      throw new Error('Afterware must be a function');\n    }\n\n    return apolloFetch;\n  };\n\n  apolloFetch.batchUse = function (middleware) {\n    if (typeof middleware === 'function') {\n      batchedMiddlewares.push(middleware);\n    } else {\n      throw new Error('Middleware must be a function');\n    }\n\n    return apolloFetch;\n  };\n\n  apolloFetch.batchUseAfter = function (afterware) {\n    if (typeof afterware === 'function') {\n      batchedAfterwares.push(afterware);\n    } else {\n      throw new Error('Afterware must be a function');\n    }\n\n    return apolloFetch;\n  };\n\n  return apolloFetch;\n}","map":null,"metadata":{},"sourceType":"module"}