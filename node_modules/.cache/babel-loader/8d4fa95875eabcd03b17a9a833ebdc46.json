{"ast":null,"code":"const _require = require('apollo-fetch'),\n      createApolloFetch = _require.createApolloFetch;\n\nconst URI = 'https://api.staging.entur.io/journey-planner/v2/graphql';\n\nconst run = (authorities, line, date) => {\n  const apolloFetch = createApolloFetch({\n    uri: URI,\n    headers: {\n      'entur': 'deviation-messages'\n    }\n  });\n  const lines = date === null ? '' : ', lines: \"' + line + '\"';\n  const dates = date === null ? '' : ', activeDates: \"' + date + '\"';\n  const partQuay = date === null ? '\\n name\\n quays {\\n id\\n name\\n }' : '\\n estimatedCalls(date:\"' + date + '\") {\\n aimedDepartureTime\\n quay {\\n id\\n name\\n }\\n }';\n  const type = date === null ? 'lines' : 'serviceJourneys';\n  const query = \"{ \".concat(type, \"(authorities:\\\"\").concat(authorities, \"\\\"\").concat(lines).concat(dates, \") { id\").concat(partQuay, \" } } \");\n  return apolloFetch({\n    query\n  }).catch(error => error).then(response => response);\n};\n\nconst fetchGet = {\n  method: 'GET',\n  headers: {\n    'accept': 'application/json',\n    'ET-Client-Name': 'entur - deviation-messages'\n  }\n};\n\nconst organisationID = id => {\n  fetch('https://api.staging.entur.io/organisations/v1/register/organisations/' + id, fetchGet).catch(error => error).then(response => response).then(data => {\n    localStorage.setItem('test', JSON.stringify(data));\n  });\n};\n\nexport default {\n  run,\n  organisationID\n};","map":{"version":3,"sources":["/Users/marcusgoplen/Desktop/entur/deviation-messages/src/api/api.js"],"names":["require","createApolloFetch","URI","run","authorities","line","date","apolloFetch","uri","headers","lines","dates","partQuay","type","query","catch","error","then","response","fetchGet","method","organisationID","id","fetch","data","localStorage","setItem","JSON","stringify"],"mappings":"iBAA8BA,OAAO,CAAC,cAAD,C;MAA7BC,iB,YAAAA,iB;;AAER,MAAMC,GAAG,GAAG,yDAAZ;;AAEA,MAAMC,GAAG,GAAG,CAACC,WAAD,EAAcC,IAAd,EAAoBC,IAApB,KAA6B;AACrC,QAAMC,WAAW,GAAGN,iBAAiB,CAAC;AAAEO,IAAAA,GAAG,EAAEN,GAAP;AAAYO,IAAAA,OAAO,EAAE;AAAE,eAAS;AAAX;AAArB,GAAD,CAArC;AACA,QAAMC,KAAK,GAAIJ,IAAI,KAAK,IAAV,GAAkB,EAAlB,GAAuB,eAAaD,IAAb,GAAkB,GAAvD;AACA,QAAMM,KAAK,GAAIL,IAAI,KAAK,IAAV,GAAkB,EAAlB,GAAuB,qBAAmBA,IAAnB,GAAwB,GAA7D;AACA,QAAMM,QAAQ,GAAIN,IAAI,KAAK,IAAV,GAAkB,mCAAlB,GACb,6BAA2BA,IAA3B,GAAgC,wDADpC;AAEA,QAAMO,IAAI,GAAIP,IAAI,KAAK,IAAV,GAAkB,OAAlB,GAA4B,iBAAzC;AAEA,QAAMQ,KAAK,eAAQD,IAAR,4BAA6BT,WAA7B,eAA4CM,KAA5C,SAAoDC,KAApD,mBAAkEC,QAAlE,UAAX;AAEA,SAAOL,WAAW,CAAC;AAAEO,IAAAA;AAAF,GAAD,CAAX,CACFC,KADE,CACIC,KAAK,IAAIA,KADb,EAEFC,IAFE,CAEGC,QAAQ,IAAIA,QAFf,CAAP;AAGH,CAbD;;AAeA,MAAMC,QAAQ,GAAG;AACbC,EAAAA,MAAM,EAAE,KADK;AAEbX,EAAAA,OAAO,EAAE;AACL,cAAU,kBADL;AAEL,sBAAkB;AAFb;AAFI,CAAjB;;AAQA,MAAMY,cAAc,GAAIC,EAAD,IAAQ;AAC3BC,EAAAA,KAAK,CAAC,0EAAwED,EAAzE,EAA6EH,QAA7E,CAAL,CACKJ,KADL,CACYC,KAAK,IAAIA,KADrB,EAEKC,IAFL,CAEUC,QAAQ,IAAIA,QAFtB,EAGKD,IAHL,CAGUO,IAAI,IAAI;AACVC,IAAAA,YAAY,CAACC,OAAb,CAAqB,MAArB,EAA6BC,IAAI,CAACC,SAAL,CAAeJ,IAAf,CAA7B;AACH,GALL;AAMH,CAPD;;AASA,eAAe;AAAErB,EAAAA,GAAF;AAAOkB,EAAAA;AAAP,CAAf","sourcesContent":["const { createApolloFetch } = require('apollo-fetch');\n\nconst URI = 'https://api.staging.entur.io/journey-planner/v2/graphql';\n\nconst run = (authorities, line, date) => {\n    const apolloFetch = createApolloFetch({ uri: URI, headers: { 'entur': 'deviation-messages' } });\n    const lines = (date === null) ? '' : ', lines: \"'+line+'\"';\n    const dates = (date === null) ? '' : ', activeDates: \"'+date+'\"';\n    const partQuay = (date === null) ? '\\n name\\n quays {\\n id\\n name\\n }' :\n        '\\n estimatedCalls(date:\"'+date+'\") {\\n aimedDepartureTime\\n quay {\\n id\\n name\\n }\\n }';\n    const type = (date === null) ? 'lines' : 'serviceJourneys';\n\n    const query = `{ ${type}(authorities:\"${authorities}\"${lines}${dates}) { id${partQuay} } } `;\n\n    return apolloFetch({ query })\n        .catch(error => error)\n        .then(response => response)\n};\n\nconst fetchGet = {\n    method: 'GET',\n    headers: {\n        'accept': 'application/json',\n        'ET-Client-Name': 'entur - deviation-messages'\n    }\n};\n\nconst organisationID = (id) => {\n    fetch('https://api.staging.entur.io/organisations/v1/register/organisations/'+id, fetchGet)\n        .catch (error => error)\n        .then(response => response)\n        .then(data => {\n            localStorage.setItem('test', JSON.stringify(data));\n        });\n};\n\nexport default { run, organisationID }\n"]},"metadata":{},"sourceType":"module"}