{"ast":null,"code":"const _require = require('apollo-fetch'),\n      createApolloFetch = _require.createApolloFetch;\n\nconst uri = 'https://api.staging.entur.io/journey-planner/v2/graphql';\n\nconst run = (localKey, authorities, line, date) => {\n  const apolloFetch = createApolloFetch({\n    uri\n  });\n  const lines = date === null ? '' : ', lines: \"' + line + '\"';\n  const dates = date === null ? '' : ', activeDates: \"' + date + '\"';\n  const partQuay = date === null ? '\\n name\\n quays {\\n id\\n name\\n }' : '\\n estimatedCalls(date:\"' + date + '\") {\\n aimedDepartureTime\\n quay {\\n id\\n name\\n }\\n }';\n  const type = date === null ? 'lines' : 'serviceJourneys';\n  const query = \"{ \".concat(type, \"(authorities:\\\"\").concat(authorities, \"\\\"\").concat(lines).concat(dates, \") { id\").concat(partQuay, \" } } \");\n  apolloFetch({\n    query\n  }).catch(error => error).then(response => {\n    if (date === null) {\n      localStorage.setItem(localKey, JSON.stringify(response.data.lines));\n    } else {\n      localStorage.setItem(localKey, JSON.stringify(response.data.serviceJourneys));\n    }\n  });\n};\n\nconst organisationID = () => {\n  return fetch(allCom, {\n    method: 'GET',\n    mode: 'cors',\n    headers: {\n      Authorization: \"Basic \".concat(btoa('admin:district')),\n      'Content-type': 'application/json',\n      'Access-Control-Allow-Credentials': true\n    }\n  }).catch(error => error).then(response => response.json()).then(data => {\n    localStorage.setItem('AllCom', JSON.stringify(data.dataElements));\n  });\n};\n\nexport default {\n  run,\n  organisationID\n};","map":{"version":3,"sources":["/Users/Goplen/Desktop/knowit/3psx/src/api/api.js"],"names":["require","createApolloFetch","uri","run","localKey","authorities","line","date","apolloFetch","lines","dates","partQuay","type","query","catch","error","then","response","localStorage","setItem","JSON","stringify","data","serviceJourneys","organisationID","fetch","allCom","method","mode","headers","Authorization","btoa","json","dataElements"],"mappings":"iBAA8BA,OAAO,CAAC,cAAD,C;MAA7BC,iB,YAAAA,iB;;AAER,MAAMC,GAAG,GAAG,yDAAZ;;AAEA,MAAMC,GAAG,GAAG,CAACC,QAAD,EAAWC,WAAX,EAAwBC,IAAxB,EAA8BC,IAA9B,KAAuC;AAC/C,QAAMC,WAAW,GAAGP,iBAAiB,CAAC;AAAEC,IAAAA;AAAF,GAAD,CAArC;AACA,QAAMO,KAAK,GAAIF,IAAI,KAAK,IAAV,GAAkB,EAAlB,GAAuB,eAAaD,IAAb,GAAkB,GAAvD;AACA,QAAMI,KAAK,GAAIH,IAAI,KAAK,IAAV,GAAkB,EAAlB,GAAuB,qBAAmBA,IAAnB,GAAwB,GAA7D;AACA,QAAMI,QAAQ,GAAIJ,IAAI,KAAK,IAAV,GAAkB,mCAAlB,GACb,6BAA2BA,IAA3B,GAAgC,wDADpC;AAEA,QAAMK,IAAI,GAAIL,IAAI,KAAK,IAAV,GAAkB,OAAlB,GAA4B,iBAAzC;AAEA,QAAMM,KAAK,eAAQD,IAAR,4BAA6BP,WAA7B,eAA4CI,KAA5C,SAAoDC,KAApD,mBAAkEC,QAAlE,UAAX;AAEAH,EAAAA,WAAW,CAAC;AAAEK,IAAAA;AAAF,GAAD,CAAX,CACKC,KADL,CACWC,KAAK,IAAIA,KADpB,EAEKC,IAFL,CAEUC,QAAQ,IAAI;AACd,QAAGV,IAAI,KAAK,IAAZ,EAAiB;AACbW,MAAAA,YAAY,CAACC,OAAb,CAAqBf,QAArB,EAA+BgB,IAAI,CAACC,SAAL,CAAeJ,QAAQ,CAACK,IAAT,CAAcb,KAA7B,CAA/B;AACH,KAFD,MAEK;AACDS,MAAAA,YAAY,CAACC,OAAb,CAAqBf,QAArB,EAA+BgB,IAAI,CAACC,SAAL,CAAeJ,QAAQ,CAACK,IAAT,CAAcC,eAA7B,CAA/B;AACH;AACJ,GARL;AASH,CAnBD;;AAqBA,MAAMC,cAAc,GAAG,MAAM;AACzB,SAAOC,KAAK,CAACC,MAAD,EAAS;AACjBC,IAAAA,MAAM,EAAE,KADS;AAEjBC,IAAAA,IAAI,EAAE,MAFW;AAGjBC,IAAAA,OAAO,EAAE;AACLC,MAAAA,aAAa,kBAAWC,IAAI,CAAC,gBAAD,CAAf,CADR;AAEL,sBAAgB,kBAFX;AAGL,0CAAoC;AAH/B;AAHQ,GAAT,CAAL,CASFjB,KATE,CASKC,KAAK,IAAIA,KATd,EAUFC,IAVE,CAUGC,QAAQ,IAAIA,QAAQ,CAACe,IAAT,EAVf,EAWFhB,IAXE,CAWGM,IAAI,IAAI;AACVJ,IAAAA,YAAY,CAACC,OAAb,CAAqB,QAArB,EAA+BC,IAAI,CAACC,SAAL,CAAeC,IAAI,CAACW,YAApB,CAA/B;AACH,GAbE,CAAP;AAcH,CAfD;;AAiBA,eAAe;AAAE9B,EAAAA,GAAF;AAAOqB,EAAAA;AAAP,CAAf","sourcesContent":["const { createApolloFetch } = require('apollo-fetch');\n\nconst uri = 'https://api.staging.entur.io/journey-planner/v2/graphql';\n\nconst run = (localKey, authorities, line, date) => {\n    const apolloFetch = createApolloFetch({ uri });\n    const lines = (date === null) ? '' : ', lines: \"'+line+'\"';\n    const dates = (date === null) ? '' : ', activeDates: \"'+date+'\"';\n    const partQuay = (date === null) ? '\\n name\\n quays {\\n id\\n name\\n }' :\n        '\\n estimatedCalls(date:\"'+date+'\") {\\n aimedDepartureTime\\n quay {\\n id\\n name\\n }\\n }';\n    const type = (date === null) ? 'lines' : 'serviceJourneys';\n\n    const query = `{ ${type}(authorities:\"${authorities}\"${lines}${dates}) { id${partQuay} } } `;\n\n    apolloFetch({ query })\n        .catch(error => error)\n        .then(response => {\n            if(date === null){\n                localStorage.setItem(localKey, JSON.stringify(response.data.lines));\n            }else{\n                localStorage.setItem(localKey, JSON.stringify(response.data.serviceJourneys));\n            }\n        });\n};\n\nconst organisationID = () => {\n    return fetch(allCom, {\n        method: 'GET',\n        mode: 'cors',\n        headers: {\n            Authorization: `Basic ${btoa('admin:district')}`,\n            'Content-type': 'application/json',\n            'Access-Control-Allow-Credentials': true\n        }\n    })\n        .catch (error => error)\n        .then(response => response.json())\n        .then(data => {\n            localStorage.setItem('AllCom', JSON.stringify(data.dataElements));\n        })\n};\n\nexport default { run, organisationID }"]},"metadata":{},"sourceType":"module"}