{"ast":null,"code":"const _require = require('apollo-fetch'),\n      createApolloFetch = _require.createApolloFetch;\n\nconst uri = 'https://api.staging.entur.io/journey-planner/v2/graphql';\n\nconst run = (localKey, authorities, line, date) => {\n  const apolloFetch = createApolloFetch({\n    uri\n  });\n  let lines = '';\n  let dates = null;\n  let partQuay = '\\n name\\n quays {\\n id\\n name\\n }';\n  let type = '';\n\n  if (date === null) {\n    dates = '';\n    type = 'lines';\n  } else {\n    lines = ', lines: \"' + line + '\"';\n    type = 'serviceJourneys';\n    partQuay = '\\n estimatedCalls(date:\"' + date + '\") {\\n aimedDepartureTime\\n quay {\\n id\\n name\\n }\\n }';\n    dates = ', activeDates: \"' + date + '\"';\n  }\n\n  const query = \"{ \".concat(type, \"(authorities:\\\"\").concat(authorities, \"\\\"\").concat(lines).concat(dates, \") { id\").concat(partQuay, \" } } \");\n  console.log(query);\n  apolloFetch({\n    query\n  }).catch(error => error).then(response => {\n    if (date === null) {\n      localStorage.setItem(localKey, JSON.stringify(response.data.lines));\n    } else {\n      localStorage.setItem(localKey, JSON.stringify(response.data.serviceJourneys));\n    }\n  });\n};\n\nexport default {\n  run\n};","map":{"version":3,"sources":["/Users/Goplen/Desktop/knowit/3psx/src/api.js"],"names":["require","createApolloFetch","uri","run","localKey","authorities","line","date","apolloFetch","lines","dates","partQuay","type","query","console","log","catch","error","then","response","localStorage","setItem","JSON","stringify","data","serviceJourneys"],"mappings":"iBAA8BA,OAAO,CAAC,cAAD,C;MAA7BC,iB,YAAAA,iB;;AAER,MAAMC,GAAG,GAAG,yDAAZ;;AAEA,MAAMC,GAAG,GAAG,CAACC,QAAD,EAAWC,WAAX,EAAwBC,IAAxB,EAA8BC,IAA9B,KAAuC;AAC/C,QAAMC,WAAW,GAAGP,iBAAiB,CAAC;AAAEC,IAAAA;AAAF,GAAD,CAArC;AACA,MAAIO,KAAK,GAAG,EAAZ;AACA,MAAIC,KAAK,GAAG,IAAZ;AACA,MAAIC,QAAQ,GAAG,mCAAf;AACA,MAAIC,IAAI,GAAG,EAAX;;AACA,MAAGL,IAAI,KAAK,IAAZ,EAAiB;AACbG,IAAAA,KAAK,GAAG,EAAR;AACAE,IAAAA,IAAI,GAAG,OAAP;AACH,GAHD,MAGK;AACDH,IAAAA,KAAK,GAAG,eAAaH,IAAb,GAAkB,GAA1B;AACAM,IAAAA,IAAI,GAAG,iBAAP;AACAD,IAAAA,QAAQ,GAAG,6BAA2BJ,IAA3B,GAAgC,wDAA3C;AACAG,IAAAA,KAAK,GAAG,qBAAmBH,IAAnB,GAAwB,GAAhC;AACH;;AAED,QAAMM,KAAK,eAAQD,IAAR,4BAA6BP,WAA7B,eAA4CI,KAA5C,SAAoDC,KAApD,mBAAkEC,QAAlE,UAAX;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AAEAL,EAAAA,WAAW,CAAC;AAAEK,IAAAA;AAAF,GAAD,CAAX,CACKG,KADL,CACWC,KAAK,IAAIA,KADpB,EAEKC,IAFL,CAEUC,QAAQ,IAAI;AACd,QAAGZ,IAAI,KAAK,IAAZ,EAAiB;AACba,MAAAA,YAAY,CAACC,OAAb,CAAqBjB,QAArB,EAA+BkB,IAAI,CAACC,SAAL,CAAeJ,QAAQ,CAACK,IAAT,CAAcf,KAA7B,CAA/B;AACH,KAFD,MAEK;AACDW,MAAAA,YAAY,CAACC,OAAb,CAAqBjB,QAArB,EAA+BkB,IAAI,CAACC,SAAL,CAAeJ,QAAQ,CAACK,IAAT,CAAcC,eAA7B,CAA/B;AACH;AACJ,GARL;AASH,CA5BD;;AA8BA,eAAe;AAAEtB,EAAAA;AAAF,CAAf","sourcesContent":["const { createApolloFetch } = require('apollo-fetch');\n\nconst uri = 'https://api.staging.entur.io/journey-planner/v2/graphql';\n\nconst run = (localKey, authorities, line, date) => {\n    const apolloFetch = createApolloFetch({ uri });\n    let lines = '';\n    let dates = null;\n    let partQuay = '\\n name\\n quays {\\n id\\n name\\n }';\n    let type = '';\n    if(date === null){\n        dates = '';\n        type = 'lines';\n    }else{\n        lines = ', lines: \"'+line+'\"';\n        type = 'serviceJourneys';\n        partQuay = '\\n estimatedCalls(date:\"'+date+'\") {\\n aimedDepartureTime\\n quay {\\n id\\n name\\n }\\n }';\n        dates = ', activeDates: \"'+date+'\"';\n    }\n\n    const query = `{ ${type}(authorities:\"${authorities}\"${lines}${dates}) { id${partQuay} } } `;\n    console.log(query);\n\n    apolloFetch({ query })\n        .catch(error => error)\n        .then(response => {\n            if(date === null){\n                localStorage.setItem(localKey, JSON.stringify(response.data.lines));\n            }else{\n                localStorage.setItem(localKey, JSON.stringify(response.data.serviceJourneys));\n            }\n        });\n};\n\nexport default { run }"]},"metadata":{},"sourceType":"module"}