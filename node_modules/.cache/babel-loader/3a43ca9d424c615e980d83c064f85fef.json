{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _dotenvDefaults = require('dotenv-defaults');\n\nvar _dotenvDefaults2 = _interopRequireDefault(_dotenvDefaults);\n\nvar _fs = require('fs');\n\nvar _fs2 = _interopRequireDefault(_fs);\n\nvar _webpack = require('webpack');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n} // Mostly taken from here: https://github.com/motdotla/dotenv-expand/blob/master/lib/main.js#L4\n\n\nvar interpolate = function interpolate(env, vars) {\n  var matches = env.match(/\\$([a-zA-Z0-9_]+)|\\${([a-zA-Z0-9_]+)}/g) || [];\n  matches.forEach(function (match) {\n    var key = match.replace(/\\$|{|}/g, '');\n    var variable = vars[key] || '';\n    variable = interpolate(variable, vars);\n    env = env.replace(match, variable);\n  });\n  return env;\n};\n\nvar Dotenv = function () {\n  /**\n   * The dotenv-webpack plugin.\n   * @param {Object} options - The parameters.\n   * @param {String} [options.path=./.env] - The location of the environment variable.\n   * @param {Boolean|String} [options.safe=false] - If false ignore safe-mode, if true load `'./.env.example'`, if a string load that file as the sample.\n   * @param {Boolean} [options.systemvars=false] - If true, load system environment variables.\n   * @param {Boolean} [options.silent=false] - If true, suppress warnings, if false, display warnings.\n   * @returns {webpack.DefinePlugin}\n   */\n  function Dotenv() {\n    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, Dotenv);\n\n    this.config = _extends({}, {\n      path: './.env'\n    }, config);\n    this.checkDeprecation();\n    return new _webpack.DefinePlugin(this.formatData(this.gatherVariables()));\n  }\n\n  _createClass(Dotenv, [{\n    key: 'checkDeprecation',\n    value: function checkDeprecation() {\n      var _config = this.config,\n          sample = _config.sample,\n          safe = _config.safe,\n          silent = _config.silent; // Catch older packages, but hold their hand (just for a bit)\n\n      if (sample) {\n        if (safe) {\n          this.config.safe = sample;\n        }\n\n        this.warn('dotenv-webpack: \"options.sample\" is a deprecated property. Please update your configuration to use \"options.safe\" instead.', silent);\n      }\n    }\n  }, {\n    key: 'gatherVariables',\n    value: function gatherVariables() {\n      var safe = this.config.safe;\n      var vars = this.initializeVars();\n\n      var _getEnvs = this.getEnvs(),\n          env = _getEnvs.env,\n          blueprint = _getEnvs.blueprint;\n\n      Object.keys(blueprint).map(function (key) {\n        var value = vars.hasOwnProperty(key) ? vars[key] : env[key];\n\n        if (!value && safe) {\n          throw new Error('Missing environment variable: ' + key);\n        } else {\n          vars[key] = value;\n        }\n      }); // add the leftovers\n\n      if (safe) {\n        _extends(vars, env);\n      }\n\n      return vars;\n    }\n  }, {\n    key: 'initializeVars',\n    value: function initializeVars() {\n      return this.config.systemvars ? _extends({}, process.env) : {};\n    }\n  }, {\n    key: 'getEnvs',\n    value: function getEnvs() {\n      var _config2 = this.config,\n          path = _config2.path,\n          silent = _config2.silent,\n          safe = _config2.safe;\n\n      var env = _dotenvDefaults2.default.parse(this.loadFile({\n        file: path,\n        silent: silent\n      }), this.getDefaults());\n\n      var blueprint = env;\n\n      if (safe) {\n        var file = './.env.example';\n\n        if (safe !== true) {\n          file = safe;\n        }\n\n        blueprint = _dotenvDefaults2.default.parse(this.loadFile({\n          file: file,\n          silent: silent\n        }));\n      }\n\n      return {\n        env: env,\n        blueprint: blueprint\n      };\n    }\n  }, {\n    key: 'getDefaults',\n    value: function getDefaults() {\n      var _config3 = this.config,\n          silent = _config3.silent,\n          defaults = _config3.defaults;\n\n      if (defaults) {\n        return this.loadFile({\n          file: defaults === true ? './.env.defaults' : defaults,\n          silent: silent\n        });\n      }\n\n      return '';\n    }\n  }, {\n    key: 'formatData',\n    value: function formatData() {\n      var vars = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var expand = this.config.expand;\n      return Object.keys(vars).reduce(function (obj, key) {\n        var v = vars[key];\n        var vKey = 'process.env.' + key;\n        var vValue = void 0;\n\n        if (expand) {\n          if (v.substring(0, 2) === '\\\\$') {\n            vValue = v.substring(1);\n          } else if (v.indexOf('\\\\$') > 0) {\n            vValue = v.replace(/\\\\\\$/g, '$');\n          } else {\n            vValue = interpolate(v, vars);\n          }\n        } else {\n          vValue = v;\n        }\n\n        obj[vKey] = JSON.stringify(vValue);\n        return obj;\n      }, {});\n    }\n    /**\n     * Load a file.\n     * @param {String} config.file - The file to load.\n     * @param {Boolean} config.silent - If true, suppress warnings, if false, display warnings.\n     * @returns {Object}\n     */\n\n  }, {\n    key: 'loadFile',\n    value: function loadFile(_ref) {\n      var file = _ref.file,\n          silent = _ref.silent;\n\n      try {\n        return _fs2.default.readFileSync(file, 'utf8');\n      } catch (err) {\n        this.warn('Failed to load ' + file + '.', silent);\n        return {};\n      }\n    }\n    /**\n     * Displays a console message if 'silent' is falsey\n     * @param {String} msg - The message.\n     * @param {Boolean} silent - If true, display the message, if false, suppress the message.\n     */\n\n  }, {\n    key: 'warn',\n    value: function warn(msg, silent) {\n      !silent && console.warn(msg);\n    }\n  }]);\n\n  return Dotenv;\n}();\n\nexports.default = Dotenv;","map":null,"metadata":{},"sourceType":"script"}