{"ast":null,"code":"import Keycloak from 'keycloak-js';\nimport token from './token';\nconst keycloak_json = {\n  realm: 'rutebanken',\n  'auth-server-url': 'https://kc-dev.devstage.entur.io/auth',\n  'ssl-required': 'external',\n  resource: 'flexible-transport-frontend',\n  'public-client': true\n}; // Minimum number of seconds left of token before a refresh is needed\n\nconst minValiditySeconds = 60; // How often should lib check for valid token\n\nconst refreshRateMs = 10000;\n\nconst initAuth = () => {\n  const kc = new Keycloak(keycloak_json);\n  const options = {\n    checkLoginIframe: false\n  };\n  kc.init(options).success(authenticated => {\n    if (authenticated) {\n      token.save(kc.token);\n      setInterval(() => {\n        kc.updateToken(minValiditySeconds).error(() => kc.logout());\n        token.save(kc.token);\n      }, refreshRateMs);\n      const userInfo = {\n        logoutUrl: kc.createLogoutUrl(options),\n        familyName: kc.idTokenParsed.family_name,\n        givenName: kc.idTokenParsed.given_name,\n        email: kc.idTokenParsed.email,\n        username: kc.idTokenParsed.preferred_username,\n        isAdmin: isAdmin(kc.tokenParsed)\n      };\n      renderIndex(userInfo);\n    } else {\n      kc.login();\n    }\n  });\n};\n\nexport default {\n  initAuth\n};","map":{"version":3,"sources":["/Users/Goplen/Desktop/knowit/3psx/src/auth.js"],"names":["Keycloak","token","keycloak_json","realm","resource","minValiditySeconds","refreshRateMs","initAuth","kc","options","checkLoginIframe","init","success","authenticated","save","setInterval","updateToken","error","logout","userInfo","logoutUrl","createLogoutUrl","familyName","idTokenParsed","family_name","givenName","given_name","email","username","preferred_username","isAdmin","tokenParsed","renderIndex","login"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,aAArB;AACA,OAAOC,KAAP,MAAkB,SAAlB;AAEA,MAAMC,aAAa,GAAE;AACjBC,EAAAA,KAAK,EAAE,YADU;AAEjB,qBAAmB,uCAFF;AAGjB,kBAAgB,UAHC;AAIjBC,EAAAA,QAAQ,EAAE,6BAJO;AAKjB,mBAAiB;AALA,CAArB,C,CAQA;;AACA,MAAMC,kBAAkB,GAAG,EAA3B,C,CAEA;;AACA,MAAMC,aAAa,GAAG,KAAtB;;AAEA,MAAMC,QAAQ,GAAG,MAAM;AACnB,QAAMC,EAAE,GAAG,IAAIR,QAAJ,CAAaE,aAAb,CAAX;AACA,QAAMO,OAAO,GAAG;AAAEC,IAAAA,gBAAgB,EAAE;AAApB,GAAhB;AACAF,EAAAA,EAAE,CAACG,IAAH,CAAQF,OAAR,EAAiBG,OAAjB,CAAyBC,aAAa,IAAI;AACtC,QAAIA,aAAJ,EAAmB;AACfZ,MAAAA,KAAK,CAACa,IAAN,CAAWN,EAAE,CAACP,KAAd;AACAc,MAAAA,WAAW,CAAC,MAAM;AACdP,QAAAA,EAAE,CAACQ,WAAH,CAAeX,kBAAf,EAAmCY,KAAnC,CAAyC,MAAMT,EAAE,CAACU,MAAH,EAA/C;AACAjB,QAAAA,KAAK,CAACa,IAAN,CAAWN,EAAE,CAACP,KAAd;AACH,OAHU,EAGRK,aAHQ,CAAX;AAIA,YAAMa,QAAQ,GAAG;AACbC,QAAAA,SAAS,EAAEZ,EAAE,CAACa,eAAH,CAAmBZ,OAAnB,CADE;AAEba,QAAAA,UAAU,EAAEd,EAAE,CAACe,aAAH,CAAiBC,WAFhB;AAGbC,QAAAA,SAAS,EAAEjB,EAAE,CAACe,aAAH,CAAiBG,UAHf;AAIbC,QAAAA,KAAK,EAAEnB,EAAE,CAACe,aAAH,CAAiBI,KAJX;AAKbC,QAAAA,QAAQ,EAAEpB,EAAE,CAACe,aAAH,CAAiBM,kBALd;AAMbC,QAAAA,OAAO,EAAEA,OAAO,CAACtB,EAAE,CAACuB,WAAJ;AANH,OAAjB;AAQAC,MAAAA,WAAW,CAACb,QAAD,CAAX;AACH,KAfD,MAeO;AACHX,MAAAA,EAAE,CAACyB,KAAH;AACH;AACJ,GAnBD;AAoBH,CAvBD;;AAyBA,eAAe;AAAE1B,EAAAA;AAAF,CAAf","sourcesContent":["import Keycloak from 'keycloak-js';\nimport token from './token';\n\nconst keycloak_json ={\n    realm: 'rutebanken',\n    'auth-server-url': 'https://kc-dev.devstage.entur.io/auth',\n    'ssl-required': 'external',\n    resource: 'flexible-transport-frontend',\n    'public-client': true\n};\n\n// Minimum number of seconds left of token before a refresh is needed\nconst minValiditySeconds = 60;\n\n// How often should lib check for valid token\nconst refreshRateMs = 10000;\n\nconst initAuth = () => {\n    const kc = new Keycloak(keycloak_json);\n    const options = { checkLoginIframe: false };\n    kc.init(options).success(authenticated => {\n        if (authenticated) {\n            token.save(kc.token);\n            setInterval(() => {\n                kc.updateToken(minValiditySeconds).error(() => kc.logout());\n                token.save(kc.token);\n            }, refreshRateMs);\n            const userInfo = {\n                logoutUrl: kc.createLogoutUrl(options),\n                familyName: kc.idTokenParsed.family_name,\n                givenName: kc.idTokenParsed.given_name,\n                email: kc.idTokenParsed.email,\n                username: kc.idTokenParsed.preferred_username,\n                isAdmin: isAdmin(kc.tokenParsed)\n            };\n            renderIndex(userInfo);\n        } else {\n            kc.login();\n        }\n    });\n};\n\nexport default { initAuth }"]},"metadata":{},"sourceType":"module"}