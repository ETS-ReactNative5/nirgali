{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\nexports.ExpandableGroup = ExpandableGroup;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nrequire('./styles.css');\n\nvar _styles = {\n  'groupClassName': 'entur-expandable-group',\n  'rootClassName': 'entur-expandable',\n  'entur-expandable': 'entur-expandable',\n  'entur-expandable--disabled': 'entur-expandable--disabled',\n  'entur-expandable__header': 'entur-expandable__header',\n  'entur-expandable__icon': 'entur-expandable__icon',\n  'entur-expandable__content': 'entur-expandable__content',\n  'entur-expandable--size-md': 'entur-expandable--size-md',\n  'entur-expandable--size-lg': 'entur-expandable--size-lg',\n  'entur-expandable--variant-default': 'entur-expandable--variant-default',\n  'entur-expandable__header--disabled': 'entur-expandable__header--disabled',\n  'entur-expandable--variant-midnight': 'entur-expandable--variant-midnight',\n  'entur-expandable__header--expanded': 'entur-expandable__header--expanded'\n};\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction isDefined(whatever) {\n  return whatever !== undefined;\n}\n\nfunction cloneChildren(children, getPropsUpdates) {\n  return _react2.default.Children.toArray(children).map(function (child) {\n    return _react2.default.cloneElement(child, getPropsUpdates(child));\n  });\n}\n\nfunction ExpandableGroup(props) {\n  var className = props.className,\n      children = props.children,\n      icon = props.icon,\n      disabled = props.disabled,\n      size = props.size,\n      variant = props.variant;\n\n  var _useState = (0, _react.useState)(),\n      _useState2 = _slicedToArray(_useState, 2),\n      expanded = _useState2[0],\n      setExpanded = _useState2[1];\n\n  var classNames = (0, _classnames2.default)(_styles.groupClassName, _styles.groupClassName + '--variant-' + variant, className);\n  var expandables = cloneChildren(children, function (child) {\n    return {\n      icon: isDefined(icon) ? icon : child.props.icon,\n      disabled: isDefined(disabled) ? disabled : child.props.disabled,\n      size: size,\n      variant: variant,\n      expanded: child.key === expanded,\n      onHeaderClick: function onHeaderClick() {\n        return setExpanded(expanded !== child.key ? child.key : undefined);\n      }\n    };\n  });\n  return _react2.default.createElement('div', {\n    className: classNames\n  }, expandables);\n}\n\nExpandableGroup.propTypes = {\n  children: _propTypes2.default.node,\n  className: _propTypes2.default.string,\n  disabled: _propTypes2.default.bool,\n  icon: _propTypes2.default.node,\n  size: _propTypes2.default.oneOf(['md', 'lg']),\n  variant: _propTypes2.default.oneOf(['default', 'midnight'])\n};\nExpandableGroup.__docgenInfo = {\n  'description': '',\n  'methods': [],\n  'displayName': 'ExpandableGroup',\n  'props': {\n    'children': {\n      'type': {\n        'name': 'node'\n      },\n      'required': false,\n      'description': ''\n    },\n    'className': {\n      'type': {\n        'name': 'string'\n      },\n      'required': false,\n      'description': ''\n    },\n    'disabled': {\n      'type': {\n        'name': 'bool'\n      },\n      'required': false,\n      'description': ''\n    },\n    'icon': {\n      'type': {\n        'name': 'node'\n      },\n      'required': false,\n      'description': ''\n    },\n    'size': {\n      'type': {\n        'name': 'enum',\n        'value': [{\n          'value': '\\'md\\'',\n          'computed': false\n        }, {\n          'value': '\\'lg\\'',\n          'computed': false\n        }]\n      },\n      'required': false,\n      'description': ''\n    },\n    'variant': {\n      'type': {\n        'name': 'enum',\n        'value': [{\n          'value': '\\'default\\'',\n          'computed': false\n        }, {\n          'value': '\\'midnight\\'',\n          'computed': false\n        }]\n      },\n      'required': false,\n      'description': ''\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"script"}