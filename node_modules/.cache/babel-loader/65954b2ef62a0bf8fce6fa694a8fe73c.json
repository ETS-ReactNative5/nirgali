{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nexports.FormGroup = FormGroup;\nexports.FieldSetGroup = FieldSetGroup;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nrequire('./styles.css');\n\nvar _styles = {\n  'rootClassName': 'entur-form-group',\n  'entur-form-group': 'entur-form-group'\n};\n\nvar _label = require('../label');\n\nvar _alertMessage = require('../alertMessage');\n\nvar _formControl = require('../formControl');\n\nvar _dropdown = require('../formControl/dropdown');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar propTypes = {\n  id: _propTypes2.default.string,\n  className: _propTypes2.default.string,\n  title: _propTypes2.default.node,\n  alertLabel: _propTypes2.default.string,\n  alertLevel: _propTypes2.default.string,\n  children: _propTypes2.default.node,\n  variant: _propTypes2.default.oneOf(['primary', 'midnight'])\n};\nvar CHILDREN_WHITELIST = [_formControl.TextField, _formControl.TextArea, _dropdown.DropDown];\n\nfunction FormGroup(props) {\n  var id = props.id,\n      className = props.className,\n      inputId = props.inputId,\n      title = props.title,\n      alertLevel = props.alertLevel,\n      alertLabel = props.alertLabel,\n      children = props.children,\n      variant = props.variant;\n  var combinedClassNames = (0, _classnames2.default)(_styles.rootClassName, className);\n\n  var childrenArray = _react2.default.Children.toArray(children);\n\n  var mappedChildren = childrenArray.map(function (child) {\n    if (!CHILDREN_WHITELIST.includes(child.type)) {\n      return child;\n    }\n\n    return _react2.default.cloneElement(child, {\n      valid: child.props.valid || alertLevel,\n      variant: child.props.variant || variant\n    });\n  });\n  return _react2.default.createElement('div', {\n    id: id,\n    className: combinedClassNames\n  }, title && _react2.default.createElement(_label.Label, {\n    htmlFor: inputId,\n    variant: variant\n  }, title), mappedChildren, alertLabel && _react2.default.createElement(_alertMessage.AlertMessage, {\n    variant: variant,\n    level: alertLevel\n  }, alertLabel));\n}\n\nFormGroup.propTypes = _extends({}, propTypes, {\n  inputId: _propTypes2.default.string.isRequired\n});\n\nfunction FieldSetGroup(props) {\n  var id = props.id,\n      children = props.children,\n      className = props.className,\n      title = props.title,\n      disabled = props.disabled,\n      alertLevel = props.alertLevel,\n      alertLabel = props.alertLabel,\n      variant = props.variant;\n  var combinedClassNames = (0, _classnames2.default)(_styles.rootClassName, className);\n\n  var mappedChildren = _react2.default.Children.toArray(children).map(function (child) {\n    return _react2.default.cloneElement(child, {\n      variant: child.props.variant || variant\n    });\n  });\n\n  return _react2.default.createElement('fieldset', {\n    id: id,\n    className: combinedClassNames,\n    disabled: disabled\n  }, title && _react2.default.createElement(_label.Legend, {\n    variant: variant\n  }, title), mappedChildren, alertLabel && _react2.default.createElement(_alertMessage.AlertMessage, {\n    variant: variant,\n    level: alertLevel\n  }, alertLabel));\n}\n\nFieldSetGroup.propTypes = _extends({}, propTypes, {\n  disabled: _propTypes2.default.bool\n});\nFormGroup.__docgenInfo = {\n  'description': '',\n  'methods': [],\n  'displayName': 'FormGroup',\n  'props': {\n    'id': {\n      'type': {\n        'name': 'string'\n      },\n      'required': false,\n      'description': ''\n    },\n    'className': {\n      'type': {\n        'name': 'string'\n      },\n      'required': false,\n      'description': ''\n    },\n    'title': {\n      'type': {\n        'name': 'node'\n      },\n      'required': false,\n      'description': ''\n    },\n    'alertLabel': {\n      'type': {\n        'name': 'string'\n      },\n      'required': false,\n      'description': ''\n    },\n    'alertLevel': {\n      'type': {\n        'name': 'string'\n      },\n      'required': false,\n      'description': ''\n    },\n    'children': {\n      'type': {\n        'name': 'node'\n      },\n      'required': false,\n      'description': ''\n    },\n    'variant': {\n      'type': {\n        'name': 'enum',\n        'value': [{\n          'value': '\\'primary\\'',\n          'computed': false\n        }, {\n          'value': '\\'midnight\\'',\n          'computed': false\n        }]\n      },\n      'required': false,\n      'description': ''\n    },\n    'inputId': {\n      'type': {\n        'name': 'string'\n      },\n      'required': true,\n      'description': ''\n    }\n  }\n};\nFieldSetGroup.__docgenInfo = {\n  'description': '',\n  'methods': [],\n  'displayName': 'FieldSetGroup',\n  'props': {\n    'id': {\n      'type': {\n        'name': 'string'\n      },\n      'required': false,\n      'description': ''\n    },\n    'className': {\n      'type': {\n        'name': 'string'\n      },\n      'required': false,\n      'description': ''\n    },\n    'title': {\n      'type': {\n        'name': 'node'\n      },\n      'required': false,\n      'description': ''\n    },\n    'alertLabel': {\n      'type': {\n        'name': 'string'\n      },\n      'required': false,\n      'description': ''\n    },\n    'alertLevel': {\n      'type': {\n        'name': 'string'\n      },\n      'required': false,\n      'description': ''\n    },\n    'children': {\n      'type': {\n        'name': 'node'\n      },\n      'required': false,\n      'description': ''\n    },\n    'variant': {\n      'type': {\n        'name': 'enum',\n        'value': [{\n          'value': '\\'primary\\'',\n          'computed': false\n        }, {\n          'value': '\\'midnight\\'',\n          'computed': false\n        }]\n      },\n      'required': false,\n      'description': ''\n    },\n    'disabled': {\n      'type': {\n        'name': 'bool'\n      },\n      'required': false,\n      'description': ''\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"script"}