{"ast":null,"code":"import React from \"react\";\n\nconst _require = require('apollo-fetch'),\n      createApolloFetch = _require.createApolloFetch;\n\nconst uri = 'https://api.staging.entur.io/journey-planner/v2/graphql';\nconst value = localStorage.getItem(\"loggedInAs\") + ':Authority:' + localStorage.getItem(\"loggedInAs\");\nvar this_date = null;\nconst query = \"\\n  {\\n  lines(authorities:\\\"GOA:Authority:GOA\\\") {\\n  \\tid\\n    name\\n    quays {\\n      id\\n      name\\n    }\\n  }\\n}\\n\";\nconst query2 = \"\\n  {\\n  serviceJourneys(authorities: \\\"GOA:Authority:GOA\\\", activeDates: [\\\"\".concat(this_date, \"\\\"]) {\\n    id\\n    quays {\\n      id\\n      name\\n    }\\n  }\\n}\\n\");\n\nconst run = (localKey, date) => {\n  const apolloFetch = createApolloFetch({\n    uri\n  });\n  this_date = date;\n\n  if (date === null) {\n    apolloFetch({\n      query\n    }).catch(error => error).then(response => {\n      localStorage.setItem(localKey, JSON.stringify(response.data.lines));\n    });\n  } else {\n    apolloFetch({\n      query2\n    }).catch(error => error).then(response => {\n      localStorage.setItem(localKey, JSON.stringify(response.data));\n    });\n  }\n};\n\nexport default {\n  run\n};","map":{"version":3,"sources":["/Users/Goplen/Desktop/knowit/3psx/src/api.js"],"names":["React","require","createApolloFetch","uri","value","localStorage","getItem","this_date","query","query2","run","localKey","date","apolloFetch","catch","error","then","response","setItem","JSON","stringify","data","lines"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;;iBAC8BC,OAAO,CAAC,cAAD,C;MAA7BC,iB,YAAAA,iB;;AAER,MAAMC,GAAG,GAAG,yDAAZ;AACA,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,YAArB,IAAmC,aAAnC,GAAiDD,YAAY,CAACC,OAAb,CAAqB,YAArB,CAA/D;AACA,IAAIC,SAAS,GAAG,IAAhB;AAEA,MAAMC,KAAK,8HAAX;AAaA,MAAMC,MAAM,0FAEyDF,SAFzD,uEAAZ;;AAYA,MAAMG,GAAG,GAAG,CAACC,QAAD,EAAWC,IAAX,KAAoB;AAC5B,QAAMC,WAAW,GAAGX,iBAAiB,CAAC;AAAEC,IAAAA;AAAF,GAAD,CAArC;AACAI,EAAAA,SAAS,GAAGK,IAAZ;;AAEA,MAAGA,IAAI,KAAK,IAAZ,EAAiB;AACbC,IAAAA,WAAW,CAAC;AAAEL,MAAAA;AAAF,KAAD,CAAX,CACKM,KADL,CACWC,KAAK,IAAIA,KADpB,EAEKC,IAFL,CAEUC,QAAQ,IAAI;AACdZ,MAAAA,YAAY,CAACa,OAAb,CAAqBP,QAArB,EAA+BQ,IAAI,CAACC,SAAL,CAAeH,QAAQ,CAACI,IAAT,CAAcC,KAA7B,CAA/B;AACH,KAJL;AAKH,GAND,MAMK;AACDT,IAAAA,WAAW,CAAC;AAAEJ,MAAAA;AAAF,KAAD,CAAX,CACKK,KADL,CACWC,KAAK,IAAIA,KADpB,EAEKC,IAFL,CAEUC,QAAQ,IAAI;AACdZ,MAAAA,YAAY,CAACa,OAAb,CAAqBP,QAArB,EAA+BQ,IAAI,CAACC,SAAL,CAAeH,QAAQ,CAACI,IAAxB,CAA/B;AACH,KAJL;AAKH;AACJ,CAjBD;;AAmBA,eAAe;AAAEX,EAAAA;AAAF,CAAf","sourcesContent":["import React from \"react\";\nconst { createApolloFetch } = require('apollo-fetch');\n\nconst uri = 'https://api.staging.entur.io/journey-planner/v2/graphql';\nconst value = localStorage.getItem(\"loggedInAs\")+':Authority:'+localStorage.getItem(\"loggedInAs\");\nvar this_date = null;\n\nconst query = `\n  {\n  lines(authorities:\"GOA:Authority:GOA\") {\n  \tid\n    name\n    quays {\n      id\n      name\n    }\n  }\n}\n`;\n\nconst query2 = `\n  {\n  serviceJourneys(authorities: \"GOA:Authority:GOA\", activeDates: [\"${this_date}\"]) {\n    id\n    quays {\n      id\n      name\n    }\n  }\n}\n`;\n\nconst run = (localKey, date) => {\n    const apolloFetch = createApolloFetch({ uri });\n    this_date = date;\n\n    if(date === null){\n        apolloFetch({ query })\n            .catch(error => error)\n            .then(response => {\n                localStorage.setItem(localKey, JSON.stringify(response.data.lines));\n            });\n    }else{\n        apolloFetch({ query2 })\n            .catch(error => error)\n            .then(response => {\n                localStorage.setItem(localKey, JSON.stringify(response.data));\n            });\n    }\n};\n\nexport default { run }"]},"metadata":{},"sourceType":"module"}