{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AlertMessage = AlertMessage;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nvar _error = require('../icons/ui/error');\n\nvar _error2 = _interopRequireDefault(_error);\n\nvar _exclamation = require('../icons/ui/exclamation');\n\nvar _exclamation2 = _interopRequireDefault(_exclamation);\n\nvar _success = require('../icons/ui/success');\n\nvar _success2 = _interopRequireDefault(_success);\n\nvar _info = require('../icons/ui/info');\n\nvar _info2 = _interopRequireDefault(_info);\n\nvar _constants = require('../../utils/constants');\n\nrequire('./styles.css');\n\nvar _styles = {\n  'rootClassName': 'entur-alert-message',\n  'entur-alert-message': 'entur-alert-message',\n  'entur-alert-message__icon': 'entur-alert-message__icon',\n  'entur-alert-message__text': 'entur-alert-message__text',\n  'entur-alert-message__text--variant-midnight': 'entur-alert-message__text--variant-midnight'\n};\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction getIcon(level, variant) {\n  var fillColor = variant === 'midnight' ? _constants.COLORS.BLUE : _constants.COLORS.WHITE;\n\n  switch (level) {\n    case 'success':\n      return _react2.default.createElement(_success2.default, {\n        className: _styles.rootClassName + '__icon',\n        backgroundColor: variant === 'midnight' ? _constants.COLORS.MINT : _constants.COLORS.DARK_MINT,\n        color: fillColor\n      });\n\n    case 'error':\n      return _react2.default.createElement(_error2.default, {\n        className: _styles.rootClassName + '__icon',\n        backgroundColor: _constants.COLORS.LAVA,\n        color: fillColor\n      });\n\n    case 'warning':\n      return _react2.default.createElement(_exclamation2.default, {\n        className: _styles.rootClassName + '__icon',\n        backgroundColor: _constants.COLORS.CANARY,\n        color: fillColor\n      });\n\n    case 'info':\n      return _react2.default.createElement(_info2.default, {\n        className: _styles.rootClassName + '__icon',\n        backgroundColor: variant === 'midnight' ? _constants.COLORS.LAVENDER : _constants.COLORS.BLUE,\n        color: fillColor\n      });\n\n    case 'none':\n      return null;\n\n    default:\n      return null;\n  }\n}\n\nfunction AlertMessage(_ref) {\n  var level = _ref.level,\n      children = _ref.children,\n      className = _ref.className,\n      variant = _ref.variant;\n  var classNames = (0, _classnames2.default)(_styles.rootClassName, className);\n  var textClass = _styles.rootClassName + '__text';\n  var textClassNames = (0, _classnames2.default)(textClass, _defineProperty({}, textClass + '--variant-' + variant, variant));\n  return _react2.default.createElement('div', {\n    className: classNames\n  }, getIcon(level, variant), _react2.default.createElement('div', {\n    className: textClassNames\n  }, children));\n}\n\nAlertMessage.propTypes = {\n  children: _propTypes2.default.node,\n  className: _propTypes2.default.string,\n  level: _propTypes2.default.oneOf(['success', 'error', 'warning', 'info', 'none']),\n  variant: _propTypes2.default.oneOf(['midnight'])\n};\nAlertMessage.defaultProps = {\n  level: 'none'\n};\nAlertMessage.__docgenInfo = {\n  'description': '',\n  'methods': [],\n  'displayName': 'AlertMessage',\n  'props': {\n    'level': {\n      'defaultValue': {\n        'value': '\\'none\\'',\n        'computed': false\n      },\n      'type': {\n        'name': 'enum',\n        'value': [{\n          'value': '\\'success\\'',\n          'computed': false\n        }, {\n          'value': '\\'error\\'',\n          'computed': false\n        }, {\n          'value': '\\'warning\\'',\n          'computed': false\n        }, {\n          'value': '\\'info\\'',\n          'computed': false\n        }, {\n          'value': '\\'none\\'',\n          'computed': false\n        }]\n      },\n      'required': false,\n      'description': ''\n    },\n    'children': {\n      'type': {\n        'name': 'node'\n      },\n      'required': false,\n      'description': ''\n    },\n    'className': {\n      'type': {\n        'name': 'string'\n      },\n      'required': false,\n      'description': ''\n    },\n    'variant': {\n      'type': {\n        'name': 'enum',\n        'value': [{\n          'value': '\\'midnight\\'',\n          'computed': false\n        }]\n      },\n      'required': false,\n      'description': ''\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"script"}