{"ast":null,"code":"import React from \"react\";\n\nconst _require = require('apollo-fetch'),\n      createApolloFetch = _require.createApolloFetch;\n\nconst uri = 'https://api.staging.entur.io/journey-planner/v2/graphql';\nconst value = localStorage.getItem(\"loggedInAs\") + ':Authority:' + localStorage.getItem(\"loggedInAs\");\nconst query = \"\\n  {\\n  lines(authorities:\\\"GOA:Authority:GOA\\\") {\\n  \\tid\\n    name\\n    quays {\\n      id\\n      name\\n    }\\n  }\\n}\\n\";\nconst query2 = \"\\n  {\\n  serviceJourneys(authorities: \\\"GOA:Authority:GOA\\\", activeDates: [\\\"\".concat(date, \"\\\"]) {\\n    id\\n    quays {\\n      id\\n      name\\n    }\\n  }\\n}\\n\");\n\nconst run = (localKey, date) => {\n  const apolloFetch = createApolloFetch({\n    uri\n  });\n  this_date = date;\n\n  if (date === null) {\n    apolloFetch({\n      query\n    }).catch(error => error).then(response => {\n      localStorage.setItem(localKey, JSON.stringify(response.data.lines));\n    });\n  } else {\n    console.log(query2);\n    apolloFetch({\n      query2\n    }).catch(error => error).then(response => {\n      localStorage.setItem(localKey, JSON.stringify(response));\n    });\n  }\n};\n\nexport default {\n  run\n};","map":{"version":3,"sources":["/Users/Goplen/Desktop/knowit/3psx/src/api.js"],"names":["React","require","createApolloFetch","uri","value","localStorage","getItem","query","query2","date","run","localKey","apolloFetch","this_date","catch","error","then","response","setItem","JSON","stringify","data","lines","console","log"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;;iBAC8BC,OAAO,CAAC,cAAD,C;MAA7BC,iB,YAAAA,iB;;AAER,MAAMC,GAAG,GAAG,yDAAZ;AACA,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,YAArB,IAAmC,aAAnC,GAAiDD,YAAY,CAACC,OAAb,CAAqB,YAArB,CAA/D;AAEA,MAAMC,KAAK,8HAAX;AAaA,MAAMC,MAAM,0FAEyDC,IAFzD,uEAAZ;;AAYA,MAAMC,GAAG,GAAG,CAACC,QAAD,EAAWF,IAAX,KAAoB;AAC5B,QAAMG,WAAW,GAAGV,iBAAiB,CAAC;AAAEC,IAAAA;AAAF,GAAD,CAArC;AACAU,EAAAA,SAAS,GAAGJ,IAAZ;;AAEA,MAAGA,IAAI,KAAK,IAAZ,EAAiB;AACbG,IAAAA,WAAW,CAAC;AAAEL,MAAAA;AAAF,KAAD,CAAX,CACKO,KADL,CACWC,KAAK,IAAIA,KADpB,EAEKC,IAFL,CAEUC,QAAQ,IAAI;AACdZ,MAAAA,YAAY,CAACa,OAAb,CAAqBP,QAArB,EAA+BQ,IAAI,CAACC,SAAL,CAAeH,QAAQ,CAACI,IAAT,CAAcC,KAA7B,CAA/B;AACH,KAJL;AAKH,GAND,MAMK;AACDC,IAAAA,OAAO,CAACC,GAAR,CAAYhB,MAAZ;AACAI,IAAAA,WAAW,CAAC;AAAEJ,MAAAA;AAAF,KAAD,CAAX,CACKM,KADL,CACWC,KAAK,IAAIA,KADpB,EAEKC,IAFL,CAEUC,QAAQ,IAAI;AACdZ,MAAAA,YAAY,CAACa,OAAb,CAAqBP,QAArB,EAA+BQ,IAAI,CAACC,SAAL,CAAeH,QAAf,CAA/B;AACH,KAJL;AAKH;AACJ,CAlBD;;AAoBA,eAAe;AAAEP,EAAAA;AAAF,CAAf","sourcesContent":["import React from \"react\";\nconst { createApolloFetch } = require('apollo-fetch');\n\nconst uri = 'https://api.staging.entur.io/journey-planner/v2/graphql';\nconst value = localStorage.getItem(\"loggedInAs\")+':Authority:'+localStorage.getItem(\"loggedInAs\");\n\nconst query = `\n  {\n  lines(authorities:\"GOA:Authority:GOA\") {\n  \tid\n    name\n    quays {\n      id\n      name\n    }\n  }\n}\n`;\n\nconst query2 = `\n  {\n  serviceJourneys(authorities: \"GOA:Authority:GOA\", activeDates: [\"${date}\"]) {\n    id\n    quays {\n      id\n      name\n    }\n  }\n}\n`;\n\nconst run = (localKey, date) => {\n    const apolloFetch = createApolloFetch({ uri });\n    this_date = date;\n\n    if(date === null){\n        apolloFetch({ query })\n            .catch(error => error)\n            .then(response => {\n                localStorage.setItem(localKey, JSON.stringify(response.data.lines));\n            });\n    }else{\n        console.log(query2);\n        apolloFetch({ query2 })\n            .catch(error => error)\n            .then(response => {\n                localStorage.setItem(localKey, JSON.stringify(response));\n            });\n    }\n};\n\nexport default { run }"]},"metadata":{},"sourceType":"module"}