{"ast":null,"code":"import issues from \"./data\";\n\nconst _require = require('apollo-fetch'),\n      createApolloFetch = _require.createApolloFetch;\n\nconst uri = 'https://api.staging.entur.io/journey-planner/v2/graphql';\nconst query = \"\\n  mutation SubmitRepo ($authorities: String!) {\\n    submitRepository (authorities: $authorities) {\\n      id,\\n      score,\\n    }\\n  }\\n\";\nconst variables = {\n  authorities: 'GOA:Authority:GOA'\n};\nconst apolloFetch = createApolloFetch({\n  uri\n});\napolloFetch({\n  query,\n  variables\n}).catch(error => error).then(response => response.json()).then(data => {\n  localStorage.setItem('test', JSON.stringify(data));\n});\nexport default {\n  apolloFetch\n};","map":{"version":3,"sources":["/Users/Goplen/Desktop/knowit/3psx/src/api.js"],"names":["issues","require","createApolloFetch","uri","query","variables","authorities","apolloFetch","catch","error","then","response","json","data","localStorage","setItem","JSON","stringify"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,QAAnB;;iBAE8BC,OAAO,CAAC,cAAD,C;MAA7BC,iB,YAAAA,iB;;AAER,MAAMC,GAAG,GAAG,yDAAZ;AAEA,MAAMC,KAAK,iJAAX;AASA,MAAMC,SAAS,GAAG;AACdC,EAAAA,WAAW,EAAE;AADC,CAAlB;AAIA,MAAMC,WAAW,GAAGL,iBAAiB,CAAC;AAAEC,EAAAA;AAAF,CAAD,CAArC;AAEAI,WAAW,CAAC;AAAEH,EAAAA,KAAF;AAASC,EAAAA;AAAT,CAAD,CAAX,CACKG,KADL,CACWC,KAAK,IAAIA,KADpB,EAEKC,IAFL,CAEUC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAFtB,EAGKF,IAHL,CAGUG,IAAI,IAAI;AACVC,EAAAA,YAAY,CAACC,OAAb,CAAqB,MAArB,EAA6BC,IAAI,CAACC,SAAL,CAAeJ,IAAf,CAA7B;AACH,CALL;AAOA,eAAc;AAAEN,EAAAA;AAAF,CAAd","sourcesContent":["import issues from \"./data\";\n\nconst { createApolloFetch } = require('apollo-fetch');\n\nconst uri = 'https://api.staging.entur.io/journey-planner/v2/graphql';\n\nconst query = `\n  mutation SubmitRepo ($authorities: String!) {\n    submitRepository (authorities: $authorities) {\n      id,\n      score,\n    }\n  }\n`;\n\nconst variables = {\n    authorities: 'GOA:Authority:GOA',\n};\n\nconst apolloFetch = createApolloFetch({ uri });\n\napolloFetch({ query, variables })\n    .catch(error => error)\n    .then(response => response.json())\n    .then(data => {\n        localStorage.setItem('test', JSON.stringify(data));\n    });\n\nexport default{ apolloFetch }"]},"metadata":{},"sourceType":"module"}