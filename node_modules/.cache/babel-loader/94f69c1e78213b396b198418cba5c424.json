{"ast":null,"code":"const _require = require('apollo-fetch'),\n      createApolloFetch = _require.createApolloFetch;\n\nconst URI = 'https://api.staging.entur.io/journey-planner/v2/graphql';\n\nconst getLines = authorities => {\n  const apolloFetch = createApolloFetch({\n    uri: URI,\n    headers: {\n      'ET-client-Name': 'ops-center - ops-center'\n    }\n  });\n  const query = \"\\n      { \\n        lines(authorities: \\\"\".concat(authorities, \"\\\") { \\n          name \\n          id\\n          quays {\\n            id\\n            name\\n          }\\n        } \\n      } \");\n  return apolloFetch({\n    query\n  }).catch(error => error).then(response => response);\n};\n\nconst getDepartures = (authorities, line, date) => {\n  const apolloFetch = createApolloFetch({\n    uri: URI,\n    headers: {\n      'ET-client-Name': 'ops-center - ops-center'\n    }\n  });\n  const query = \"\\n      { serviceJourneys(authorities: \\\"\".concat(authorities, \"\\\", lines: \\\"\").concat(line, \"\\\", activeDates: \\\"\").concat(date, \"\\\") { \\n        id\\n        estimatedCalls(date:\\\"\").concat(date, \"\\\") {\\n          aimedDepartureTime\\n          quay {\\n            name\\n            }\\n          }\\n        }\\n      }\");\n  return apolloFetch({\n    query\n  }).catch(error => error).then(response => response);\n};\n\nconst fetchGet = {\n  method: 'GET',\n  headers: {\n    'accept': 'application/json',\n    'ET-Client-Name': 'entur - deviation-messages'\n  }\n};\n\nconst organisationID = id => {\n  fetch('https://api.staging.entur.io/organisations/v1/register/organisations/' + id, fetchGet).catch(error => error).then(response => response).then(data => {\n    localStorage.setItem('test', JSON.stringify(data));\n  });\n};\n\nexport default {\n  organisationID,\n  getLines,\n  getDepartures\n};","map":{"version":3,"sources":["/Users/marcusgoplen/Desktop/entur/deviation-messages/src/api/api.js"],"names":["require","createApolloFetch","URI","getLines","authorities","apolloFetch","uri","headers","query","catch","error","then","response","getDepartures","line","date","fetchGet","method","organisationID","id","fetch","data","localStorage","setItem","JSON","stringify"],"mappings":"iBAA8BA,OAAO,CAAC,cAAD,C;MAA7BC,iB,YAAAA,iB;;AAER,MAAMC,GAAG,GAAG,yDAAZ;;AAEA,MAAMC,QAAQ,GAAIC,WAAD,IAAiB;AAC9B,QAAMC,WAAW,GAAGJ,iBAAiB,CAAC;AAAEK,IAAAA,GAAG,EAAEJ,GAAP;AAAYK,IAAAA,OAAO,EAAE;AAAE,wBAAkB;AAApB;AAArB,GAAD,CAArC;AACA,QAAMC,KAAK,sDAEeJ,WAFf,kIAAX;AAYA,SAAOC,WAAW,CAAC;AAAEG,IAAAA;AAAF,GAAD,CAAX,CACJC,KADI,CACEC,KAAK,IAAIA,KADX,EAEJC,IAFI,CAECC,QAAQ,IAAIA,QAFb,CAAP;AAGH,CAjBD;;AAmBA,MAAMC,aAAa,GAAG,CAACT,WAAD,EAAcU,IAAd,EAAoBC,IAApB,KAA6B;AAC/C,QAAMV,WAAW,GAAGJ,iBAAiB,CAAC;AAAEK,IAAAA,GAAG,EAAEJ,GAAP;AAAYK,IAAAA,OAAO,EAAE;AAAE,wBAAkB;AAApB;AAArB,GAAD,CAArC;AACA,QAAMC,KAAK,sDACyBJ,WADzB,0BACkDU,IADlD,gCAC0EC,IAD1E,+DAGgBA,IAHhB,4HAAX;AAYA,SAAOV,WAAW,CAAC;AAAEG,IAAAA;AAAF,GAAD,CAAX,CACJC,KADI,CACEC,KAAK,IAAIA,KADX,EAEJC,IAFI,CAECC,QAAQ,IAAIA,QAFb,CAAP;AAGH,CAjBD;;AAmBA,MAAMI,QAAQ,GAAG;AACbC,EAAAA,MAAM,EAAE,KADK;AAEbV,EAAAA,OAAO,EAAE;AACL,cAAU,kBADL;AAEL,sBAAkB;AAFb;AAFI,CAAjB;;AAQA,MAAMW,cAAc,GAAIC,EAAD,IAAQ;AAC3BC,EAAAA,KAAK,CAAC,0EAAwED,EAAzE,EAA6EH,QAA7E,CAAL,CACKP,KADL,CACYC,KAAK,IAAIA,KADrB,EAEKC,IAFL,CAEUC,QAAQ,IAAIA,QAFtB,EAGKD,IAHL,CAGUU,IAAI,IAAI;AACVC,IAAAA,YAAY,CAACC,OAAb,CAAqB,MAArB,EAA6BC,IAAI,CAACC,SAAL,CAAeJ,IAAf,CAA7B;AACH,GALL;AAMH,CAPD;;AASA,eAAe;AAAEH,EAAAA,cAAF;AAAkBf,EAAAA,QAAlB;AAA4BU,EAAAA;AAA5B,CAAf","sourcesContent":["const { createApolloFetch } = require('apollo-fetch');\n\nconst URI = 'https://api.staging.entur.io/journey-planner/v2/graphql';\n\nconst getLines = (authorities) => {\n    const apolloFetch = createApolloFetch({ uri: URI, headers: { 'ET-client-Name': 'ops-center - ops-center' } });\n    const query = `\n      { \n        lines(authorities: \"${authorities}\") { \n          name \n          id\n          quays {\n            id\n            name\n          }\n        } \n      } `;\n\n    return apolloFetch({ query })\n      .catch(error => error)\n      .then(response => response);\n};\n\nconst getDepartures = (authorities, line, date) => {\n    const apolloFetch = createApolloFetch({ uri: URI, headers: { 'ET-client-Name': 'ops-center - ops-center' } });\n    const query = `\n      { serviceJourneys(authorities: \"${authorities}\", lines: \"${line}\", activeDates: \"${date}\") { \n        id\n        estimatedCalls(date:\"${date}\") {\n          aimedDepartureTime\n          quay {\n            name\n            }\n          }\n        }\n      }`;\n\n    return apolloFetch({ query })\n      .catch(error => error)\n      .then(response => response);\n};\n\nconst fetchGet = {\n    method: 'GET',\n    headers: {\n        'accept': 'application/json',\n        'ET-Client-Name': 'entur - deviation-messages'\n    }\n};\n\nconst organisationID = (id) => {\n    fetch('https://api.staging.entur.io/organisations/v1/register/organisations/'+id, fetchGet)\n        .catch (error => error)\n        .then(response => response)\n        .then(data => {\n            localStorage.setItem('test', JSON.stringify(data));\n        });\n};\n\nexport default { organisationID, getLines, getDepartures }\n"]},"metadata":{},"sourceType":"module"}