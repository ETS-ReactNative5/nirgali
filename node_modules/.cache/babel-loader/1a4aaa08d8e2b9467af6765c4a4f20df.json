{"ast":null,"code":"const dotenv = require('dotenv');\n/**\n * Merges two objects.\n * @param {Object} apply - The overwriter\n * @param {Object} defaults - The defaults to be overwritten\n * @returns {Object} The merged results.\n */\n\n\nconst merge = (apply = {}, defaults = {}) => Object.assign({}, defaults, apply);\n/**\n * Parses objects like before, but with defaults!\n * @param {String} src - The original src.\n * @param {String} [defaultSrc=''] - The new-and-improved default source.\n * @returns {Object} The parsed results.\n */\n\n\nconst parse = (src, defaultSrc = '') => {\n  const parsedSrc = dotenv.parse(src);\n  const parsedDefault = dotenv.parse(defaultSrc);\n  return merge(parsedSrc, parsedDefault);\n};\n/**\n * Runs the configurations and applies it to process.env.\n * @param {Object} [options={}] - The options to determnie how this goes\n * @returns {Object} The parsed results.\n */\n\n\nconst config = (options = {}) => {\n  const src = dotenv.config(options); // we run this second so it doesn't override things set from src\n\n  const defaults = dotenv.config(Object.assign({}, options, {\n    path: options.defaults || '.env.defaults'\n  }));\n  return {\n    parsed: merge(src.parsed, defaults.parsed)\n  };\n};\n\nconst load = config;\nmodule.exports = {\n  parse,\n  config,\n  load\n};","map":null,"metadata":{},"sourceType":"script"}