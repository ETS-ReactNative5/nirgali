{"ast":null,"code":"import React from \"react\";\n\nconst _require = require('apollo-fetch'),\n      createApolloFetch = _require.createApolloFetch;\n\nconst uri = 'https://api.staging.entur.io/journey-planner/v2/graphql';\n\nconst run = (localKey, athorities, date) => {\n  const apolloFetch = createApolloFetch({\n    uri\n  });\n\n  if (date === null) {\n    date = '';\n  } else {\n    date = ', activeDates: \"' + date + '\"';\n  }\n\n  const query = \"\\n      {\\n      lines(authorities:\\\"\".concat(authorities, \"\\\"\").concat(date, \") {\\n        id\\n        name\\n        quays {\\n          id\\n          name\\n        }\\n      }\\n    }\\n    \");\n  console.log(query);\n  apolloFetch({\n    query\n  }).catch(error => error).then(response => {\n    localStorage.setItem(localKey, JSON.stringify(response.data.lines));\n  });\n};\n\nexport default {\n  run\n};","map":{"version":3,"sources":["/Users/Goplen/Desktop/knowit/3psx/src/api.js"],"names":["React","require","createApolloFetch","uri","run","localKey","athorities","date","apolloFetch","query","authorities","console","log","catch","error","then","response","localStorage","setItem","JSON","stringify","data","lines"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;;iBAC8BC,OAAO,CAAC,cAAD,C;MAA7BC,iB,YAAAA,iB;;AAER,MAAMC,GAAG,GAAG,yDAAZ;;AAEA,MAAMC,GAAG,GAAG,CAACC,QAAD,EAAWC,UAAX,EAAuBC,IAAvB,KAAgC;AACxC,QAAMC,WAAW,GAAGN,iBAAiB,CAAC;AAAEC,IAAAA;AAAF,GAAD,CAArC;;AACA,MAAGI,IAAI,KAAK,IAAZ,EAAiB;AACbA,IAAAA,IAAI,GAAG,EAAP;AACH,GAFD,MAEK;AACDA,IAAAA,IAAI,GAAG,qBAAmBA,IAAnB,GAAwB,GAA/B;AACH;;AAED,QAAME,KAAK,kDAEYC,WAFZ,eAE2BH,IAF3B,kHAAX;AAYAI,EAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ;AAEAD,EAAAA,WAAW,CAAC;AAAEC,IAAAA;AAAF,GAAD,CAAX,CACKI,KADL,CACWC,KAAK,IAAIA,KADpB,EAEKC,IAFL,CAEUC,QAAQ,IAAI;AACdC,IAAAA,YAAY,CAACC,OAAb,CAAqBb,QAArB,EAA+Bc,IAAI,CAACC,SAAL,CAAeJ,QAAQ,CAACK,IAAT,CAAcC,KAA7B,CAA/B;AACH,GAJL;AAKH,CA3BD;;AA6BA,eAAe;AAAElB,EAAAA;AAAF,CAAf","sourcesContent":["import React from \"react\";\nconst { createApolloFetch } = require('apollo-fetch');\n\nconst uri = 'https://api.staging.entur.io/journey-planner/v2/graphql';\n\nconst run = (localKey, athorities, date) => {\n    const apolloFetch = createApolloFetch({ uri });\n    if(date === null){\n        date = '';\n    }else{\n        date = ', activeDates: \"'+date+'\"';\n    }\n\n    const query = `\n      {\n      lines(authorities:\"${authorities}\"${date}) {\n        id\n        name\n        quays {\n          id\n          name\n        }\n      }\n    }\n    `;\n    console.log(query)\n\n    apolloFetch({ query })\n        .catch(error => error)\n        .then(response => {\n            localStorage.setItem(localKey, JSON.stringify(response.data.lines));\n        });\n};\n\nexport default { run }"]},"metadata":{},"sourceType":"module"}