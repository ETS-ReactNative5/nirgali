{"ast":null,"code":"const _require = require('apollo-fetch'),\n      createApolloFetch = _require.createApolloFetch;\n\nconst uri = 'https://api.staging.entur.io/journey-planner/v2/graphql';\n\nconst run = (authorities, line, date) => {\n  const apolloFetch = createApolloFetch({\n    uri\n  });\n  const lines = date === null ? '' : ', lines: \"' + line + '\"';\n  const dates = date === null ? '' : ', activeDates: \"' + date + '\"';\n  const partQuay = date === null ? '\\n name\\n quays {\\n id\\n name\\n }' : '\\n estimatedCalls(date:\"' + date + '\") {\\n aimedDepartureTime\\n quay {\\n id\\n name\\n }\\n }';\n  const type = date === null ? 'lines' : 'serviceJourneys';\n  const query = \"{ \".concat(type, \"(authorities:\\\"\").concat(authorities, \"\\\"\").concat(lines).concat(dates, \") { id\").concat(partQuay, \" } } \");\n  apolloFetch({\n    query\n  }).catch(error => error).then(response => response.json()).then(data => {\n    localStorage.setItem(\"lines\", JSON.stringify(data.lines));\n  });\n};\n\nconst fetchGet = {\n  method: 'GET',\n  mode: 'no-cors',\n  headers: {\n    'Content-type': 'application/json'\n  }\n};\n\nconst organisationID = id => {\n  const url = 'https://api.staging.entur.io/organisations/v1/register/organisations/' + id;\n  return fetch(url, fetchGet).then(response => JSON.parse(response));\n};\n\nexport default {\n  run,\n  organisationID\n};","map":{"version":3,"sources":["/Users/Goplen/Desktop/knowit/3psx/src/api/api.js"],"names":["require","createApolloFetch","uri","run","authorities","line","date","apolloFetch","lines","dates","partQuay","type","query","catch","error","then","response","json","data","localStorage","setItem","JSON","stringify","fetchGet","method","mode","headers","organisationID","id","url","fetch","parse"],"mappings":"iBAA8BA,OAAO,CAAC,cAAD,C;MAA7BC,iB,YAAAA,iB;;AAER,MAAMC,GAAG,GAAG,yDAAZ;;AAEA,MAAMC,GAAG,GAAG,CAACC,WAAD,EAAcC,IAAd,EAAoBC,IAApB,KAA6B;AACrC,QAAMC,WAAW,GAAGN,iBAAiB,CAAC;AAAEC,IAAAA;AAAF,GAAD,CAArC;AACA,QAAMM,KAAK,GAAIF,IAAI,KAAK,IAAV,GAAkB,EAAlB,GAAuB,eAAaD,IAAb,GAAkB,GAAvD;AACA,QAAMI,KAAK,GAAIH,IAAI,KAAK,IAAV,GAAkB,EAAlB,GAAuB,qBAAmBA,IAAnB,GAAwB,GAA7D;AACA,QAAMI,QAAQ,GAAIJ,IAAI,KAAK,IAAV,GAAkB,mCAAlB,GACb,6BAA2BA,IAA3B,GAAgC,wDADpC;AAEA,QAAMK,IAAI,GAAIL,IAAI,KAAK,IAAV,GAAkB,OAAlB,GAA4B,iBAAzC;AAEA,QAAMM,KAAK,eAAQD,IAAR,4BAA6BP,WAA7B,eAA4CI,KAA5C,SAAoDC,KAApD,mBAAkEC,QAAlE,UAAX;AAEAH,EAAAA,WAAW,CAAC;AAAEK,IAAAA;AAAF,GAAD,CAAX,CACKC,KADL,CACWC,KAAK,IAAIA,KADpB,EAEKC,IAFL,CAEUC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAFtB,EAGKF,IAHL,CAGUG,IAAI,IAAI;AACVC,IAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BC,IAAI,CAACC,SAAL,CAAeJ,IAAI,CAACV,KAApB,CAA9B;AACH,GALL;AAMH,CAhBD;;AAkBA,MAAMe,QAAQ,GAAG;AAAEC,EAAAA,MAAM,EAAE,KAAV;AAAiBC,EAAAA,IAAI,EAAE,SAAvB;AAAkCC,EAAAA,OAAO,EAAE;AAAE,oBAAgB;AAAlB;AAA3C,CAAjB;;AAEA,MAAMC,cAAc,GAAIC,EAAD,IAAQ;AAC3B,QAAMC,GAAG,GAAG,0EAAwED,EAApF;AACA,SAAOE,KAAK,CAACD,GAAD,EAAMN,QAAN,CAAL,CACFR,IADE,CACGC,QAAQ,IAAIK,IAAI,CAACU,KAAL,CAAWf,QAAX,CADf,CAAP;AAEH,CAJD;;AAMA,eAAe;AAAEb,EAAAA,GAAF;AAAOwB,EAAAA;AAAP,CAAf","sourcesContent":["const { createApolloFetch } = require('apollo-fetch');\n\nconst uri = 'https://api.staging.entur.io/journey-planner/v2/graphql';\n\nconst run = (authorities, line, date) => {\n    const apolloFetch = createApolloFetch({ uri });\n    const lines = (date === null) ? '' : ', lines: \"'+line+'\"';\n    const dates = (date === null) ? '' : ', activeDates: \"'+date+'\"';\n    const partQuay = (date === null) ? '\\n name\\n quays {\\n id\\n name\\n }' :\n        '\\n estimatedCalls(date:\"'+date+'\") {\\n aimedDepartureTime\\n quay {\\n id\\n name\\n }\\n }';\n    const type = (date === null) ? 'lines' : 'serviceJourneys';\n\n    const query = `{ ${type}(authorities:\"${authorities}\"${lines}${dates}) { id${partQuay} } } `;\n\n    apolloFetch({ query })\n        .catch(error => error)\n        .then(response => response.json())\n        .then(data => {\n            localStorage.setItem(\"lines\", JSON.stringify(data.lines))\n        });\n};\n\nconst fetchGet = { method: 'GET', mode: 'no-cors', headers: { 'Content-type': 'application/json' } };\n\nconst organisationID = (id) => {\n    const url = 'https://api.staging.entur.io/organisations/v1/register/organisations/'+id;\n    return fetch(url, fetchGet)\n        .then(response => JSON.parse(response))\n};\n\nexport default { run, organisationID }"]},"metadata":{},"sourceType":"module"}