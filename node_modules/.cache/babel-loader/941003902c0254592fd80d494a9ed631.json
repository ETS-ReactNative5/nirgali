{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LegLine = LegLine;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nrequire('./styles.css');\n\nvar _styles = {\n  'rootClassName': 'entur-leg-line',\n  'entur-leg-line': 'entur-leg-line',\n  'entur-leg-line__start': 'entur-leg-line__start',\n  'entur-leg-line__stop': 'entur-leg-line__stop',\n  'entur-leg-line__middle': 'entur-leg-line__middle',\n  'entur-leg-line__middle--pattern-dotted': 'entur-leg-line__middle--pattern-dotted',\n  'entur-leg-line--direction-vertical': 'entur-leg-line--direction-vertical',\n  'entur-leg-line__middle--pattern-dashed': 'entur-leg-line__middle--pattern-dashed',\n  'entur-leg-line__middle--pattern-wave': 'entur-leg-line__middle--pattern-wave',\n  'entur-leg-line--direction-horizontal': 'entur-leg-line--direction-horizontal'\n};\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n} // @flow\n\n\nfunction LegLine(_ref) {\n  var className = _ref.className,\n      _ref$direction = _ref.direction,\n      direction = _ref$direction === undefined ? 'horizontal' : _ref$direction,\n      pattern = _ref.pattern,\n      color = _ref.color,\n      endColor = _ref.endColor,\n      startColor = _ref.startColor,\n      _ref$showStart = _ref.showStart,\n      showStart = _ref$showStart === undefined ? true : _ref$showStart,\n      _ref$showLine = _ref.showLine,\n      showLine = _ref$showLine === undefined ? true : _ref$showLine,\n      _ref$showStop = _ref.showStop,\n      showStop = _ref$showStop === undefined ? true : _ref$showStop;\n  var classNames = (0, _classnames2.default)(_styles.rootClassName, _defineProperty({}, _styles.rootClassName + '--direction-' + direction, direction), className);\n  var middleClassName = (0, _classnames2.default)(_styles.rootClassName + '__middle', _defineProperty({}, _styles.rootClassName + '__middle--pattern-' + pattern, pattern));\n  return _react2.default.createElement('div', {\n    className: classNames\n  }, showStart && _react2.default.createElement('div', {\n    className: _styles.rootClassName + '__start',\n    style: {\n      backgroundColor: startColor || color\n    }\n  }), showLine && _react2.default.createElement('div', {\n    className: middleClassName,\n    style: {\n      backgroundColor: color\n    }\n  }), showStop && _react2.default.createElement('div', {\n    className: _styles.rootClassName + '__stop',\n    style: {\n      backgroundColor: endColor || color\n    }\n  }));\n}\n\nLegLine.propTypes = {\n  className: _propTypes2.default.string,\n  color: _propTypes2.default.string,\n  direction: _propTypes2.default.oneOf(['horizontal', 'vertical']),\n  endColor: _propTypes2.default.string,\n  pattern: _propTypes2.default.oneOf(['line', 'dashed', 'dotted', 'wave']),\n  startColor: _propTypes2.default.string,\n  showStart: _propTypes2.default.bool,\n  showLine: _propTypes2.default.bool,\n  showStop: _propTypes2.default.bool\n};\nLegLine.__docgenInfo = {\n  'description': '',\n  'methods': [],\n  'displayName': 'LegLine',\n  'props': {\n    'direction': {\n      'defaultValue': {\n        'value': '\\'horizontal\\'',\n        'computed': false\n      },\n      'type': {\n        'name': 'enum',\n        'value': [{\n          'value': '\\'horizontal\\'',\n          'computed': false\n        }, {\n          'value': '\\'vertical\\'',\n          'computed': false\n        }]\n      },\n      'required': false,\n      'description': ''\n    },\n    'showStart': {\n      'defaultValue': {\n        'value': 'true',\n        'computed': false\n      },\n      'type': {\n        'name': 'bool'\n      },\n      'required': false,\n      'description': ''\n    },\n    'showLine': {\n      'defaultValue': {\n        'value': 'true',\n        'computed': false\n      },\n      'type': {\n        'name': 'bool'\n      },\n      'required': false,\n      'description': ''\n    },\n    'showStop': {\n      'defaultValue': {\n        'value': 'true',\n        'computed': false\n      },\n      'type': {\n        'name': 'bool'\n      },\n      'required': false,\n      'description': ''\n    },\n    'className': {\n      'type': {\n        'name': 'string'\n      },\n      'required': false,\n      'description': ''\n    },\n    'color': {\n      'type': {\n        'name': 'string'\n      },\n      'required': false,\n      'description': ''\n    },\n    'endColor': {\n      'type': {\n        'name': 'string'\n      },\n      'required': false,\n      'description': ''\n    },\n    'pattern': {\n      'type': {\n        'name': 'enum',\n        'value': [{\n          'value': '\\'line\\'',\n          'computed': false\n        }, {\n          'value': '\\'dashed\\'',\n          'computed': false\n        }, {\n          'value': '\\'dotted\\'',\n          'computed': false\n        }, {\n          'value': '\\'wave\\'',\n          'computed': false\n        }]\n      },\n      'required': false,\n      'description': ''\n    },\n    'startColor': {\n      'type': {\n        'name': 'string'\n      },\n      'required': false,\n      'description': ''\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"script"}