{"ast":null,"code":"import React from \"react\";\n\nconst _require = require('apollo-fetch'),\n      createApolloFetch = _require.createApolloFetch;\n\nconst uri = 'https://api.staging.entur.io/journey-planner/v2/graphql';\n\nconst run = (localKey, authorities, date) => {\n  const apolloFetch = createApolloFetch({\n    uri\n  });\n  let dates = null;\n  let name = '\\n        name';\n  let type = '';\n\n  if (date === null) {\n    dates = '';\n    type = 'lines';\n  } else {\n    type = 'serviceJourneys';\n    name = '';\n    dates = ', activeDates: \"' + date + '\"';\n  }\n\n  const query = \"\\n      {\\n      \".concat(type, \"(authorities:\\\"\").concat(authorities, \"\\\"\").concat(dates, \") {\\n        id\").concat(name, \"\\n        quays {\\n          id\\n          name\\n        }\\n      }\\n    }\\n    \");\n  console.log(query);\n  apolloFetch({\n    query\n  }).catch(error => error).then(response => {\n    if (date === null) {\n      localStorage.setItem(localKey, JSON.stringify(response.data.lines));\n    } else {\n      localStorage.setItem(localKey, JSON.stringify(response.data.serviceJourneys));\n    }\n  });\n};\n\nexport default {\n  run\n};","map":{"version":3,"sources":["/Users/Goplen/Desktop/knowit/3psx/src/api.js"],"names":["React","require","createApolloFetch","uri","run","localKey","authorities","date","apolloFetch","dates","name","type","query","console","log","catch","error","then","response","localStorage","setItem","JSON","stringify","data","lines","serviceJourneys"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;;iBAC8BC,OAAO,CAAC,cAAD,C;MAA7BC,iB,YAAAA,iB;;AAER,MAAMC,GAAG,GAAG,yDAAZ;;AAEA,MAAMC,GAAG,GAAG,CAACC,QAAD,EAAWC,WAAX,EAAwBC,IAAxB,KAAiC;AACzC,QAAMC,WAAW,GAAGN,iBAAiB,CAAC;AAAEC,IAAAA;AAAF,GAAD,CAArC;AACA,MAAIM,KAAK,GAAG,IAAZ;AACA,MAAIC,IAAI,GAAG,gBAAX;AACA,MAAIC,IAAI,GAAG,EAAX;;AACA,MAAGJ,IAAI,KAAK,IAAZ,EAAiB;AACbE,IAAAA,KAAK,GAAG,EAAR;AACAE,IAAAA,IAAI,GAAG,OAAP;AACH,GAHD,MAGK;AACDA,IAAAA,IAAI,GAAG,iBAAP;AACAD,IAAAA,IAAI,GAAG,EAAP;AACAD,IAAAA,KAAK,GAAG,qBAAmBF,IAAnB,GAAwB,GAAhC;AACH;;AAED,QAAMK,KAAK,8BAEPD,IAFO,4BAEcL,WAFd,eAE6BG,KAF7B,4BAGHC,IAHG,qFAAX;AAWAG,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AAEAJ,EAAAA,WAAW,CAAC;AAAEI,IAAAA;AAAF,GAAD,CAAX,CACKG,KADL,CACWC,KAAK,IAAIA,KADpB,EAEKC,IAFL,CAEUC,QAAQ,IAAI;AACd,QAAGX,IAAI,KAAK,IAAZ,EAAiB;AACbY,MAAAA,YAAY,CAACC,OAAb,CAAqBf,QAArB,EAA+BgB,IAAI,CAACC,SAAL,CAAeJ,QAAQ,CAACK,IAAT,CAAcC,KAA7B,CAA/B;AACH,KAFD,MAEK;AACDL,MAAAA,YAAY,CAACC,OAAb,CAAqBf,QAArB,EAA+BgB,IAAI,CAACC,SAAL,CAAeJ,QAAQ,CAACK,IAAT,CAAcE,eAA7B,CAA/B;AACH;AACJ,GARL;AASH,CApCD;;AAsCA,eAAe;AAAErB,EAAAA;AAAF,CAAf","sourcesContent":["import React from \"react\";\nconst { createApolloFetch } = require('apollo-fetch');\n\nconst uri = 'https://api.staging.entur.io/journey-planner/v2/graphql';\n\nconst run = (localKey, authorities, date) => {\n    const apolloFetch = createApolloFetch({ uri });\n    let dates = null;\n    let name = '\\n        name';\n    let type = '';\n    if(date === null){\n        dates = '';\n        type = 'lines';\n    }else{\n        type = 'serviceJourneys';\n        name = '';\n        dates = ', activeDates: \"'+date+'\"';\n    }\n\n    const query = `\n      {\n      ${type}(authorities:\"${authorities}\"${dates}) {\n        id${name}\n        quays {\n          id\n          name\n        }\n      }\n    }\n    `;\n    console.log(query);\n\n    apolloFetch({ query })\n        .catch(error => error)\n        .then(response => {\n            if(date === null){\n                localStorage.setItem(localKey, JSON.stringify(response.data.lines));\n            }else{\n                localStorage.setItem(localKey, JSON.stringify(response.data.serviceJourneys));\n            }\n        });\n};\n\nexport default { run }"]},"metadata":{},"sourceType":"module"}