{"ast":null,"code":"var _jsxFileName = \"/Users/marcusgoplen/Desktop/entur/deviation-messages/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './style/index.css';\nimport { Route, BrowserRouter as Router } from 'react-router-dom';\nimport Overview from \"./components/overview\";\nimport Register from './components/register';\nimport Edit from './components/edit';\nimport auth from './authenticate/auth';\nimport api from \"./api/api\";\nvar config = {\n  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n  databaseURL: process.env.REACT_APP_FIREBASE_DATABASE_URL,\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_FIREBASE_STORAGEBUCKET,\n  messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_TMDB_API_KEY\n};\n\nconst firebase = require(\"firebase/app\");\n\nrequire(\"firebase/firestore\");\n\nfirebase.initializeApp(config);\nvar db = firebase.firestore();\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      data: '',\n      key: \"NULL:Authority:NULL\",\n      keys: [],\n      orgIDs: '',\n      lines: '',\n      id: ''\n    };\n  }\n\n  componentDidMount() {\n    api.getOrgID().then(response => {\n      this.setState({\n        orgIDs: response.data.authorities\n      });\n    });\n    let roles = this.props.userInfo.roles;\n    let setRoles = [];\n\n    for (let i = 0; i < roles.length; i++) {\n      if (roles[i].includes('editSX')) {\n        setRoles.push(roles[i].split(\"\\\"\")[7]);\n      }\n    }\n\n    this.setState({\n      key: setRoles[0] + ':Authority:' + setRoles[0],\n      keys: setRoles\n    });\n    const orgID = setRoles[0] + ':Authority:' + setRoles[0];\n    db.collection(orgID).get().then(querySnapshot => {\n      querySnapshot.forEach(doc => {\n        if (doc.id === 'Issues') {\n          if (doc.data().PtSituationElement) {\n            this.setState({\n              data: doc.data(),\n              id: doc.id\n            });\n          } else {\n            this.setState({\n              data: {\n                PtSituationElement: []\n              },\n              id: doc.id\n            });\n          }\n        }\n      });\n    });\n    api.getLines(orgID).then(response => {\n      if (response.data) {\n        this.setState({\n          lines: response.data.lines\n        });\n      } else {\n        console.log(\"Could not find any lines for this organization\");\n      }\n    });\n  }\n\n  render() {\n    return React.createElement(Router, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, React.createElement(Route, {\n      path: \"/\",\n      render: props => React.createElement(Overview, Object.assign({}, props, {\n        data: this.state.data,\n        user: this.state.key.split(':')[0],\n        logout: this.props.userInfo.logoutUrl,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"/edit/:deviationId?\",\n      render: props => React.createElement(Edit, Object.assign({}, props, {\n        data: this.state.data,\n        firebase: db,\n        docID: this.state.id,\n        orgID: this.state.key,\n        user: this.state.key.split(':')[0],\n        ogout: this.props.userInfo.logoutUrl,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"/register\",\n      render: props => React.createElement(Register, Object.assign({}, props, {\n        data: this.state.data,\n        firebase: db,\n        docID: this.state.id,\n        orgID: this.state.key,\n        lines: this.state.lines,\n        user: this.state.key.split(':')[0],\n        logout: this.props.userInfo.logoutUrl,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    })));\n  }\n\n}\n\nconst renderIndex = userInfo => {\n  ReactDOM.render(React.createElement(App, {\n    userInfo: userInfo,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123\n    },\n    __self: this\n  }), document.getElementById('root'));\n};\n\nauth.initAuth();\nexport default renderIndex;","map":{"version":3,"sources":["/Users/marcusgoplen/Desktop/entur/deviation-messages/src/index.js"],"names":["React","ReactDOM","Route","BrowserRouter","Router","Overview","Register","Edit","auth","api","config","apiKey","process","env","REACT_APP_FIREBASE_API_KEY","authDomain","REACT_APP_FIREBASE_AUTH_DOMAIN","databaseURL","REACT_APP_FIREBASE_DATABASE_URL","projectId","REACT_APP_FIREBASE_PROJECT_ID","storageBucket","REACT_APP_FIREBASE_STORAGEBUCKET","messagingSenderId","REACT_APP_FIREBASE_MESSAGING_SENDER_ID","appId","REACT_APP_TMDB_API_KEY","firebase","require","initializeApp","db","firestore","App","Component","state","data","key","keys","orgIDs","lines","id","componentDidMount","getOrgID","then","response","setState","authorities","roles","props","userInfo","setRoles","i","length","includes","push","split","orgID","collection","get","querySnapshot","forEach","doc","PtSituationElement","getLines","console","log","render","logoutUrl","renderIndex","document","getElementById","initAuth"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './style/index.css';\nimport { Route, BrowserRouter as Router } from 'react-router-dom'\nimport Overview from \"./components/overview\";\nimport Register from './components/register';\nimport Edit from './components/edit';\nimport auth from './authenticate/auth';\nimport api from \"./api/api\";\n\nvar config = {\n    apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n    authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n    databaseURL: process.env.REACT_APP_FIREBASE_DATABASE_URL,\n    projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n    storageBucket: process.env.REACT_APP_FIREBASE_STORAGEBUCKET,\n    messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\n    appId: process.env.REACT_APP_TMDB_API_KEY\n};\n\nconst firebase = require(\"firebase/app\");\nrequire(\"firebase/firestore\");\n\nfirebase.initializeApp(config);\nvar db = firebase.firestore();\n\nclass App extends React.Component {\n    state = {\n        data: '',\n        key: \"NULL:Authority:NULL\",\n        keys: [],\n        orgIDs: '',\n        lines: '',\n        id: '',\n    };\n\n    componentDidMount() {\n        api.getOrgID()\n          .then(response => {\n              this.setState({\n                 orgIDs: response.data.authorities,\n              });\n          });\n        let roles = this.props.userInfo.roles;\n        let setRoles = [];\n        for (let i = 0; i < roles.length; i++) {\n            if(roles[i].includes('editSX')) {\n                setRoles.push(roles[i].split(\"\\\"\")[7]);\n            }\n        }\n        this.setState({\n            key: setRoles[0]+':Authority:'+setRoles[0],\n            keys: setRoles,\n        });\n        const orgID = setRoles[0]+':Authority:'+setRoles[0];\n\n        db.collection(orgID).get().then((querySnapshot) => {\n            querySnapshot.forEach((doc) => {\n                if(doc.id === 'Issues'){\n                    if(doc.data().PtSituationElement){\n                        this.setState({\n                            data: doc.data(),\n                            id: doc.id,\n                        });\n                    }else{\n                        this.setState({\n                            data: {PtSituationElement: []},\n                            id: doc.id,\n                        })\n                    }\n                }\n            });\n        });\n\n        api.getLines(orgID)\n            .then(response => {\n                if(response.data){\n                    this.setState({\n                        lines: response.data.lines\n                    })\n                }else{\n                    console.log(\"Could not find any lines for this organization\");\n                }\n            })\n\n    }\n\n    render() {\n        return (\n            <Router>\n                <div>\n                    <Route path=\"/\"\n                           render={props => <Overview {...props}\n                                                      data={this.state.data}\n                                                      user={this.state.key.split(':')[0]}\n                                                      logout={this.props.userInfo.logoutUrl} />} />\n                    <Route path=\"/edit/:deviationId?\"\n                           render={props => <Edit {...props}\n                                                  data={this.state.data}\n                                                  firebase={db}\n                                                  docID={this.state.id}\n                                                  orgID={this.state.key}\n                                                  user={this.state.key.split(':')[0]}\n                                                  ogout={this.props.userInfo.logoutUrl} />} />\n                    <Route path=\"/register\"\n                           render={props => <Register {...props}\n                                                      data={this.state.data}\n                                                      firebase={db}\n                                                      docID={this.state.id}\n                                                      orgID={this.state.key}\n                                                      lines={this.state.lines}\n                                                      user={this.state.key.split(':')[0]}\n                                                      logout={this.props.userInfo.logoutUrl} />} />\n                </div>\n            </Router>\n        )\n    }\n}\n\nconst renderIndex = (userInfo) => {\n    ReactDOM.render(\n        <App userInfo={userInfo} />,\n        document.getElementById('root')\n    );\n};\n\nauth.initAuth();\n\nexport default renderIndex;\n"]},"metadata":{},"sourceType":"module"}